{"version":3,"sources":["cljs/tools/reader/impl/commons.cljs"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.commons\n  (:refer-clojure :exclude [char])\n  (:require\n   [cljs.tools.reader.impl.errors :refer [reader-error]]\n   [cljs.tools.reader.reader-types :refer [peek-char read-char]]\n   [cljs.tools.reader.impl.utils :refer [numeric? newline? char]]))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; helpers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn ^boolean number-literal?\n  \"Checks whether the reader is at the start of a number literal\"\n  [^not-native reader initch]\n  (or (numeric? initch)\n      (and (or (identical? \\+ initch) (identical?  \\- initch))\n           (numeric? (peek-char reader)))))\n\n(defn read-past\n  \"Read until first character that doesn't match pred, returning\n   char.\"\n  [pred ^not-native rdr]\n  (loop [ch (read-char rdr)]\n    (if ^boolean (pred ch)\n      (recur (read-char rdr))\n      ch)))\n\n(defn skip-line\n  \"Advances the reader to the end of a line. Returns the reader\"\n  [^not-native reader]\n  (loop []\n    (when-not (newline? (read-char reader))\n      (recur)))\n  reader)\n\n(def int-pattern #\"^([-+]?)(?:(0)|([1-9][0-9]*)|0[xX]([0-9A-Fa-f]+)|0([0-7]+)|([1-9][0-9]?)[rR]([0-9A-Za-z]+)|0[0-9]+)(N)?$\")\n(def ratio-pattern #\"([-+]?[0-9]+)/([0-9]+)\")\n(def float-pattern #\"([-+]?[0-9]+(\\.[0-9]*)?([eE][-+]?[0-9]+)?)(M)?\")\n\n(defn- match-int\n  [s]\n  (let [m (vec (re-find int-pattern s))]\n    (if-not (nil? (m 2))\n      0\n      (let [^boolean negate? (identical? \"-\" (m 1))\n            a (cond\n               (not (nil? (m 3))) [(m 3) 10]\n               (not (nil? (m 4))) [(m 4) 16]\n               (not (nil? (m 5))) [(m 5) 8]\n               (not (nil? (m 7))) [(m 7) (js/parseInt (m 6))]\n               :else              [nil nil])\n            n (a 0)]\n        (when-not (nil? n)\n          (let [bn (js/parseInt n (a 1))\n                bn (if negate? (* -1 bn) bn)]\n            (when-not (js/isNaN bn)\n              bn)))))))\n\n(defn- match-ratio\n  [s]\n  (let [m (vec (re-find ratio-pattern s))\n        numerator (m 1)\n        denominator (m 2)\n        numerator (if (re-find #\"^\\+\" numerator)\n                    (subs numerator 1)\n                    numerator)]\n    (/ (-> numerator   js/parseInt) ;;; No ratio type in cljs\n       (-> denominator js/parseInt)))); So will convert to js/Number\n\n(defn- match-float\n  [s]\n  (let [m (vec (re-find float-pattern s))]\n    (if-not (nil? (m 4)) ;; for BigDecimal \"10.03M\", as all parsed to js/Number\n      (js/parseFloat (m 1))\n      (js/parseFloat s))))\n\n(defn ^boolean matches? [pattern s]\n  (let [[match] (re-find pattern s)]\n    (identical? match s)))\n\n(defn match-number [s]\n  (if (matches? int-pattern s)\n    (match-int s)\n    (if (matches? float-pattern s)\n      (match-float s)\n      (when (matches? ratio-pattern s)\n        (match-ratio s)))))\n\n(defn parse-symbol\n  \"Parses a string into a vector of the namespace and symbol\"\n  [token]\n  (when-not (or (identical? \"\" token)\n                (true? (.test #\":$\" token))\n                (true? (.test #\"^::\" token)))\n    (let [ns-idx (.indexOf token \"/\")\n          ns (when (pos? ns-idx)\n               (subs token 0 ns-idx))]\n      (if-not (nil? ns)\n        (let [ns-idx (inc ns-idx)]\n          (when-not (== ns-idx (count token))\n            (let [sym (subs token ns-idx)]\n              (when (and (not (numeric? (nth sym 0)))\n                         (not (identical? \"\" sym))\n                         (false? (.test #\":$\" ns))\n                         (or (identical? sym \"/\")\n                             (== -1 (.indexOf sym \"/\"))))\n                [ns sym]))))\n        (when (or (identical? token \"/\")\n                  (== -1 (.indexOf token \"/\")))\n          [nil token])))))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; readers\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defn read-comment\n  [rdr & _]\n  (skip-line rdr))\n\n(defn throwing-reader\n  [msg]\n  (fn [rdr & _]\n    (reader-error rdr msg)))\n"],"mappings":"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","names":["cljs.tools.reader.impl.commons/number-literal?","cljs.tools.reader.impl.utils/numeric?","initch","reader","cljs.tools.reader.impl.commons/read-past","rdr","pred","ch","cljs.tools.reader.impl.commons/skip-line","cljs.tools.reader.impl.utils/newline?","cljs.tools.reader.impl.commons/int-pattern","cljs.tools.reader.impl.commons/ratio-pattern","cljs.tools.reader.impl.commons/float-pattern","cljs.tools.reader.impl.commons/match-int","cljs.core/vec","cljs.core/re-find","s","m","js/parseInt","a","n","negate?","bn","js/isNaN","cljs.tools.reader.impl.commons/match-ratio","numerator","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","denominator","cljs.tools.reader.impl.commons/match-float","js/parseFloat","cljs.tools.reader.impl.commons/matches?","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__15757","pattern","match","cljs.tools.reader.impl.commons/match-number","cljs.tools.reader.impl.commons/parse-symbol","token","ns-idx","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","ns","cljs.core/count","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","sym","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","cljs.tools.reader.impl.commons/read-comment","argseq__4648__auto__","cljs.core/first","seq15777","cljs.core/next","self__4628__auto__","G__15778","cljs.tools.reader.impl.commons/throwing-reader","cljs.tools.reader.impl.errors.reader_error.cljs$core$IFn$_invoke$arity$variadic","msg"]}