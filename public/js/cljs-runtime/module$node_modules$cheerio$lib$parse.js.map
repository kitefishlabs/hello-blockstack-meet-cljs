{
"version":3,
"file":"module$node_modules$cheerio$lib$parse.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,sCAAA,CAA0D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAIvH,IAAIC,WAAaJ,OAAA,CAAQ,2CAAR,CAKjBE,QAAA,CAAUD,MAAAC,QAAV,CAA2BG,QAAQ,CAACC,OAAD,CAAUC,OAAV,CAAmB,CAChDC,OAAAA,CAAMN,OAAAO,SAAA,CAAiBH,OAAjB,CAA0BC,OAA1B,CAENG,QAAAA,CAAOR,OAAAO,SAAA,CAAiB,2BAAjB,CAAkCF,OAAlC,CAAA,CAA2C,CAA3C,CAEXG,QAAAC,KAAA,CAAY,MAGZT,QAAAU,OAAA,CAAeJ,OAAf,CAAoBE,OAApB,CAEA,OAAOA,QAV6C,CAatDR,QAAAO,SAAA,CAAmBI,QAAQ,CAACP,OAAD,CAAUC,OAAV,CAAmB,CAW5C,MANuB,QAAvBC,GAAI,MAAOF,QAAXE,EAAmCM,mBAAAC,SAAA,CAAgBT,OAAhB,CAAnCE;AACQJ,UAAAY,SAAA,CAAoBV,OAApB,CAA6BC,OAA7B,CADRC,CAGQF,OARoC,CAiB9CJ,QAAAU,OAAA,CAAiBK,QAAQ,CAACC,GAAD,CAAMC,MAAN,CAAc,CAEhCC,KAAAC,QAAA,CAAcH,GAAd,CAAL,GAAyBA,GAAzB,CAA+B,CAACA,GAAD,CAA/B,CAGIC,OAAJ,CACEA,MAAAG,SADF,CACoBJ,GADpB,CAGEC,MAHF,CAGW,IAIX,KAAK,IAAII,EAAI,CAAb,CAAgBA,CAAhB,CAAoBL,GAAAM,OAApB,CAAgCD,CAAA,EAAhC,CAAqC,CACnC,IAAIE,KAAOP,GAAA,CAAIK,CAAJ,CAAX,CAGIG,UAAYD,IAAAN,OAAZO,EAA2BD,IAAAf,KAE/B,EADIiB,SACJ,CADkBD,SAClB,EAD+BA,SAAAJ,SAC/B,GAAmBK,SAAnB,GAAmCT,GAAnC,GACES,SAAAC,OAAA,CAAmBD,SAAAE,QAAA,CAAoBJ,IAApB,CAAnB,CAA8C,CAA9C,CAIA,CAHIA,IAAAK,KAGJ,GAFEL,IAAAK,KAAAC,KAEF,CAFmBN,IAAAM,KAEnB,EAAIN,IAAAM,KAAJ,GACEN,IAAAM,KAAAD,KADF,CACmBL,IAAAK,KADnB,CALF,CAUIX,OAAJ,EACEM,IAAAK,KACA,CADYZ,GAAA,CAAIK,CAAJ,CAAQ,CAAR,CACZ,EAD0B,IAC1B,CAAAE,IAAAM,KAAA,CAAYb,GAAA,CAAIK,CAAJ,CAAQ,CAAR,CAAZ,EAA0B,IAF5B,EAIEE,IAAAK,KAJF,CAIcL,IAAAM,KAJd,CAI0B,IAGtBZ,OAAJ;AAA8B,MAA9B,GAAcA,MAAAR,KAAd,EACEc,IAAAf,KACA,CADYS,MACZ,CAAAM,IAAAN,OAAA,CAAc,IAFhB,GAIEM,IAAAf,KACA,CADY,IACZ,CAAAe,IAAAN,OAAA,CAAcA,MALhB,CAvBmC,CAgCrC,MAAOA,OA5C8B,CAvCgF;",
"sources":["node_modules/cheerio/lib/parse.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$cheerio$lib$parse\"] = function(global,process,require,module,exports,shadow$shims) {\n/*\n  Module Dependencies\n*/\nvar htmlparser = require('htmlparser2');\n\n/*\n  Parser\n*/\nexports = module.exports = function(content, options) {\n  var dom = exports.evaluate(content, options),\n      // Generic root element\n      root = exports.evaluate('<root></root>', options)[0];\n\n  root.type = 'root';\n\n  // Update the dom using the root\n  exports.update(dom, root);\n\n  return root;\n};\n\nexports.evaluate = function(content, options) {\n  // options = options || $.fn.options;\n\n  var dom;\n\n  if (typeof content === 'string' || Buffer.isBuffer(content)) {\n    dom = htmlparser.parseDOM(content, options);\n  } else {\n    dom = content;\n  }\n\n  return dom;\n};\n\n/*\n  Update the dom structure, for one changed layer\n*/\nexports.update = function(arr, parent) {\n  // normalize\n  if (!Array.isArray(arr)) arr = [arr];\n\n  // Update parent\n  if (parent) {\n    parent.children = arr;\n  } else {\n    parent = null;\n  }\n\n  // Update neighbors\n  for (var i = 0; i < arr.length; i++) {\n    var node = arr[i];\n\n    // Cleanly remove existing nodes from their previous structures.\n    var oldParent = node.parent || node.root,\n        oldSiblings = oldParent && oldParent.children;\n    if (oldSiblings && oldSiblings !== arr) {\n      oldSiblings.splice(oldSiblings.indexOf(node), 1);\n      if (node.prev) {\n        node.prev.next = node.next;\n      }\n      if (node.next) {\n        node.next.prev = node.prev;\n      }\n    }\n\n    if (parent) {\n      node.prev = arr[i - 1] || null;\n      node.next = arr[i + 1] || null;\n    } else {\n      node.prev = node.next = null;\n    }\n\n    if (parent && parent.type === 'root') {\n      node.root = parent;\n      node.parent = null;\n    } else {\n      node.root = null;\n      node.parent = parent;\n    }\n  }\n\n  return parent;\n};\n\n// module.exports = $.extend(exports);\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","htmlparser","module.exports","content","options","dom","evaluate","root","type","update","exports.evaluate","Buffer","isBuffer","parseDOM","exports.update","arr","parent","Array","isArray","children","i","length","node","oldParent","oldSiblings","splice","indexOf","prev","next"]
}
