shadow$provide.module$node_modules$tiny_secp256k1$ecurve=function(global,process,require,module,exports,shadow$shims){function isScalar(x){return shadow$shims.Buffer.isBuffer(x)&&32===x.length}function isOrderScalar(x){return isScalar(x)?0>x.compare(EC_GROUP_ORDER):!1}function isPoint(p){if(!shadow$shims.Buffer.isBuffer(p)||33>p.length)return!1;var t=p[0],x=p.slice(1,33);if(0===x.compare(ZERO32)||0<=x.compare(EC_P))return!1;if((2===t||3===t)&&33===p.length)return!0;x=p.slice(33);return 0===x.compare(ZERO32)||
0<=x.compare(EC_P)?!1:4===t&&65===p.length?!0:!1}function isPrivate(x){return isScalar(x)?0<x.compare(ZERO32)&&0>x.compare(EC_GROUP_ORDER):!1}function assumeCompression(value,pubkey){return void 0===value&&void 0!==pubkey?4!==pubkey[0]:void 0===value?!0:value}function fromBuffer(d){return new BN(d)}function toBuffer(d){return d.toArrayLike(shadow$shims.Buffer,"be",32)}function getEncoded(P,compressed){return shadow$shims.Buffer.from(P._encode(compressed))}var BN=require("module$node_modules$bn_DOT_js$lib$bn"),
secp256k1=new (require("module$node_modules$elliptic$lib$elliptic").ec)("secp256k1"),deterministicGenerateK=require("module$node_modules$tiny_secp256k1$rfc6979"),ZERO32=shadow$shims.Buffer.alloc(32,0),EC_GROUP_ORDER=shadow$shims.Buffer.from("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141","hex"),EC_P=shadow$shims.Buffer.from("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f","hex"),n=secp256k1.curve.n,nDiv2=n.shrn(1),G=secp256k1.curve.g;module.exports={isPoint:isPoint,
isPointCompressed:function(p){return isPoint(p)?4!==p[0]:!1},isPrivate:isPrivate,pointAdd:function(pA,pB,__compressed){if(!isPoint(pA))throw new TypeError("Expected Point");if(!isPoint(pB))throw new TypeError("Expected Point");var a=secp256k1.curve.decodePoint(pA);pB=secp256k1.curve.decodePoint(pB);a=a.add(pB);if(a.isInfinity())return null;pA=assumeCompression(__compressed,pA);return getEncoded(a,pA)},pointAddScalar:function(p,tweak,__compressed){if(!isPoint(p))throw new TypeError("Expected Point");
if(!isOrderScalar(tweak))throw new TypeError("Expected Tweak");__compressed=assumeCompression(__compressed,p);p=secp256k1.curve.decodePoint(p);if(0===tweak.compare(ZERO32))return getEncoded(p,__compressed);tweak=fromBuffer(tweak);tweak=G.mul(tweak);tweak=p.add(tweak);return tweak.isInfinity()?null:getEncoded(tweak,__compressed)},pointCompress:function(p,compressed){if(!isPoint(p))throw new TypeError("Expected Point");p=secp256k1.curve.decodePoint(p);if(p.isInfinity())throw new TypeError("Expected Point");
return getEncoded(p,compressed)},pointFromScalar:function(d,__compressed){if(!isPrivate(d))throw new TypeError("Expected Private");d=fromBuffer(d);d=G.mul(d);if(d.isInfinity())return null;__compressed=assumeCompression(__compressed);return getEncoded(d,__compressed)},pointMultiply:function(p,tweak,__compressed){if(!isPoint(p))throw new TypeError("Expected Point");if(!isOrderScalar(tweak))throw new TypeError("Expected Tweak");__compressed=assumeCompression(__compressed,p);p=secp256k1.curve.decodePoint(p);
tweak=fromBuffer(tweak);tweak=p.mul(tweak);return tweak.isInfinity()?null:getEncoded(tweak,__compressed)},privateAdd:function(d,tweak){if(!isPrivate(d))throw new TypeError("Expected Private");if(!isOrderScalar(tweak))throw new TypeError("Expected Tweak");d=fromBuffer(d);tweak=fromBuffer(tweak);tweak=toBuffer(d.add(tweak).umod(n));return isPrivate(tweak)?tweak:null},privateSub:function(d,tweak){if(!isPrivate(d))throw new TypeError("Expected Private");if(!isOrderScalar(tweak))throw new TypeError("Expected Tweak");
d=fromBuffer(d);tweak=fromBuffer(tweak);tweak=toBuffer(d.sub(tweak).umod(n));return isPrivate(tweak)?tweak:null},sign:function(hash,x){if(!isScalar(hash))throw new TypeError("Expected Hash");if(!isPrivate(x))throw new TypeError("Expected Private");var d=fromBuffer(x),e=fromBuffer(hash),r,s;deterministicGenerateK(hash,x,function(k){k=fromBuffer(k);var Q=G.mul(k);if(Q.isInfinity())return!1;r=Q.x.umod(n);if(0===r.isZero())return!1;s=k.invm(n).mul(e.add(d.mul(r))).umod(n);return 0===s.isZero()?!1:!0},
isPrivate);0<s.cmp(nDiv2)&&(s=n.sub(s));hash=shadow$shims.Buffer.allocUnsafe(64);toBuffer(r).copy(hash,0);toBuffer(s).copy(hash,32);return hash},verify:function(hash,q,signature){if(!isScalar(hash))throw new TypeError("Expected Hash");if(!isPoint(q))throw new TypeError("Expected Point");var r=signature.slice(0,32),s=signature.slice(32,64);if(!(shadow$shims.Buffer.isBuffer(signature)&&64===signature.length&&0>r.compare(EC_GROUP_ORDER)&&0>s.compare(EC_GROUP_ORDER)))throw new TypeError("Expected Signature");
r=secp256k1.curve.decodePoint(q);q=fromBuffer(signature.slice(0,32));signature=fromBuffer(signature.slice(32,64));if(0>=q.gtn(0)||0>=signature.gtn(0))return!1;hash=fromBuffer(hash);signature=signature.invm(n);hash=hash.mul(signature).umod(n);signature=q.mul(signature).umod(n);r=G.mulAdd(hash,r,signature);return r.isInfinity()?!1:r.x.umod(n).eq(q)}}}
//# sourceMappingURL=module$node_modules$tiny_secp256k1$ecurve.js.map
