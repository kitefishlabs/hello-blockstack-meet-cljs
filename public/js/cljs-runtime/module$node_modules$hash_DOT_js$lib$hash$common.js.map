{
"version":3,
"file":"module$node_modules$hash_DOT_js$lib$hash$common.js",
"lineCount":4,
"mappings":"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",
"sources":["node_modules/hash_DOT_js/lib/hash/common.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$hash_DOT_js$lib$hash$common\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","BlockHash","pending","pendingTotal","blockSize","constructor","outSize","hmacStrength","padLength","endian","_delta8","_delta32","utils","assert","prototype","update","BlockHash.prototype.update","msg","enc","toArray","concat","length","i","r","slice","join32","_update","digest","BlockHash.prototype.digest","_pad","_digest","BlockHash.prototype._pad","len","bytes","k","res","Array","t"]
}
