shadow$provide.module$node_modules$parse_asn1$fixProc=function(global,process,require,module,exports,shadow$shims){var findProc=/Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r\+\/=]+)[\n\r]+/m,startRegex=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m,fullRegex=/^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\n\r\+\/=]+)-----END \1-----$/m,evp=require("module$node_modules$evp_bytestokey$index"),ciphers=require("module$node_modules$browserify_aes$browser");
module.exports=function(okey,password){okey=okey.toString();var match=okey.match(findProc);if(match){var suite="aes"+match[1],iv=new shadow$shims.Buffer(match[2],"hex");var decrypted=new shadow$shims.Buffer(match[3].replace(/[\r\n]/g,""),"base64");match=evp(password,iv.slice(0,8),parseInt(match[1],10)).key;password=[];suite=ciphers.createDecipheriv(suite,match,iv);password.push(suite.update(decrypted));password.push(suite.final());decrypted=shadow$shims.Buffer.concat(password)}else decrypted=okey.match(fullRegex),
decrypted=new shadow$shims.Buffer(decrypted[2].replace(/[\r\n]/g,""),"base64");return{tag:okey.match(startRegex)[1],data:decrypted}}}
//# sourceMappingURL=module$node_modules$parse_asn1$fixProc.js.map
