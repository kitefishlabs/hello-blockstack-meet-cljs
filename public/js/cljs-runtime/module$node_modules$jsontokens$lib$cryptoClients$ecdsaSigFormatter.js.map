{
"version":3,
"file":"module$node_modules$jsontokens$lib$cryptoClients$ecdsaSigFormatter.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/jsontokens/lib/cryptoClients/ecdsaSigFormatter.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jsontokens$lib$cryptoClients$ecdsaSigFormatter\"] = function(global,process,require,module,exports,shadow$shims) {\n/*\n * This code is taken from https://github.com/Brightspace/node-ecdsa-sig-formatter\n * which is licensed under the Apache 2.0 license.\n * \n * It got copied over here to make some adjustments for being compatible with browserify.\n * Going forward would be either simplifying this code (as we only need 256 bit signatures),\n * or moving back to the direct dependency; both is future work(TM) for some other day.\n */\n\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.derToJose = derToJose;\nexports.joseToDer = joseToDer;\nvar asn1 = require('asn1.js');\n\nfunction base64UrlEscape(str) {\n    return str.replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=/g, '');\n}\n\nvar ECDSASigValue = asn1.define('ECDSASigValue', function () {\n    this.seq().obj(this.key('r').int(), this.key('s').int());\n});\n\nvar seq = 0x10,\n    int = 0x02;\n\nfunction getParamSize(keySize) {\n    var result = (keySize / 8 | 0) + (keySize % 8 === 0 ? 0 : 1);\n    return result;\n}\n\nvar paramBytesForAlg = {\n    ES256: getParamSize(256),\n    ES384: getParamSize(384),\n    ES512: getParamSize(512)\n};\n\nfunction getParamBytesForAlg(alg) {\n    var paramBytes = paramBytesForAlg[alg];\n    if (paramBytes) {\n        return paramBytes;\n    }\n\n    throw new Error('Unknown algorithm \"' + alg + '\"');\n}\n\nfunction bignumToBuf(bn, numBytes) {\n    var buf = new Buffer(bn.toString('hex', numBytes), 'hex');\n    return buf;\n}\n\nfunction signatureAsBuffer(signature) {\n    if (Buffer.isBuffer(signature)) {\n        return new Buffer(signature);\n    } else if ('string' === typeof signature) {\n        return new Buffer(signature, 'base64');\n    }\n\n    throw new TypeError('ECDSA signature must be a Base64 string or a Buffer');\n}\n\nfunction reduceBuffer(buf) {\n    var padding = 0;\n    for (var n = buf.length; padding < n && buf[padding] === 0;) {\n        ++padding;\n    }\n\n    var needsSign = buf[padding] >= 0x80;\n    if (needsSign) {\n        --padding;\n\n        if (padding < 0) {\n            var old = buf;\n            buf = new Buffer(1 + buf.length);\n            buf[0] = 0;\n            old.copy(buf, 1);\n\n            return buf;\n        }\n    }\n\n    if (padding === 0) {\n        return buf;\n    }\n\n    buf = buf.slice(padding);\n    return buf;\n}\n\nfunction derToJose(signature, alg) {\n    signature = signatureAsBuffer(signature);\n    var paramBytes = getParamBytesForAlg(alg);\n\n    signature = ECDSASigValue.decode(signature, 'der');\n\n    var r = bignumToBuf(signature.r, paramBytes);\n    var s = bignumToBuf(signature.s, paramBytes);\n\n    signature = Buffer.concat([r, s], r.length + s.length);\n    signature = signature.toString('base64');\n    signature = base64UrlEscape(signature);\n\n    return signature;\n}\n\nfunction joseToDer(signature, alg) {\n    signature = signatureAsBuffer(signature);\n    var paramBytes = getParamBytesForAlg(alg);\n\n    var signatureBytes = signature.length;\n    if (signatureBytes !== paramBytes * 2) {\n        throw new TypeError('\"' + alg + '\" signatures must be \"' + paramBytes * 2 + '\" bytes, saw \"' + signatureBytes + '\"');\n    }\n\n    var r = reduceBuffer(signature.slice(0, paramBytes));\n    var s = reduceBuffer(signature.slice(paramBytes));\n\n    var rsBytes = 1 + 1 + r.length + 1 + 1 + s.length;\n\n    var oneByteLength = rsBytes < 0x80;\n\n    signature = new Buffer((oneByteLength ? 2 : 3) + rsBytes);\n\n    var offset = 0;\n    signature[offset++] = seq | 0x20 | 0 << 6;\n    if (oneByteLength) {\n        signature[offset++] = rsBytes;\n    } else {\n        signature[offset++] = 0x80 | 1;\n        signature[offset++] = rsBytes & 0xff;\n    }\n    signature[offset++] = int | 0 << 6;\n    signature[offset++] = r.length;\n    r.copy(signature, offset);\n    offset += r.length;\n    signature[offset++] = int | 0 << 6;\n    signature[offset++] = s.length;\n    s.copy(signature, offset);\n\n    return signature;\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","getParamSize","keySize","getParamBytesForAlg","alg","paramBytes","paramBytesForAlg","Error","signatureAsBuffer","signature","Buffer","isBuffer","TypeError","reduceBuffer","buf","padding","n","length","old","copy","slice","Object","defineProperty","value","derToJose","ECDSASigValue","decode","r","toString","s","concat","replace","joseToDer","signatureBytes","rsBytes","oneByteLength","offset","seq","int","asn1","define","obj","key","ES256","ES384","ES512"]
}
