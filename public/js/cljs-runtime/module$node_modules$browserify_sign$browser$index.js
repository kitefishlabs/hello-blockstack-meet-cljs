shadow$provide.module$node_modules$browserify_sign$browser$index=function(global,process,require,module,exports,shadow$shims){function Sign(algorithm){stream.Writable.call(this);algorithm=algorithms[algorithm];if(!algorithm)throw Error("Unknown message digest");this._hashType=algorithm.hash;this._hash=createHash(algorithm.hash);this._tag=algorithm.id;this._signType=algorithm.sign}function Verify(algorithm){stream.Writable.call(this);algorithm=algorithms[algorithm];if(!algorithm)throw Error("Unknown message digest");
this._hash=createHash(algorithm.hash);this._tag=algorithm.id;this._signType=algorithm.sign}function createSign(algorithm){return new Sign(algorithm)}function createVerify(algorithm){return new Verify(algorithm)}var createHash=require("module$node_modules$create_hash$browser"),stream=require("module$node_modules$stream_browserify$index");global=require("module$node_modules$inherits$inherits_browser");var sign=require("module$node_modules$browserify_sign$browser$sign"),verify=require("module$node_modules$browserify_sign$browser$verify"),
algorithms=require("module$node_modules$browserify_sign$browser$algorithms_json");Object.keys(algorithms).forEach(function(key){algorithms[key].id=new shadow$shims.Buffer(algorithms[key].id,"hex");algorithms[key.toLowerCase()]=algorithms[key]});global(Sign,stream.Writable);Sign.prototype._write=function(data,_,done){this._hash.update(data);done()};Sign.prototype.update=function(data,enc){"string"===typeof data&&(data=new shadow$shims.Buffer(data,enc));this._hash.update(data);return this};Sign.prototype.sign=
function(key,enc){this.end();var hash=this._hash.digest();key=sign(hash,key,this._hashType,this._signType,this._tag);return enc?key.toString(enc):key};global(Verify,stream.Writable);Verify.prototype._write=function(data,_,done){this._hash.update(data);done()};Verify.prototype.update=function(data,enc){"string"===typeof data&&(data=new shadow$shims.Buffer(data,enc));this._hash.update(data);return this};Verify.prototype.verify=function(key,sig,enc){"string"===typeof sig&&(sig=new shadow$shims.Buffer(sig,
enc));this.end();enc=this._hash.digest();return verify(sig,enc,key,this._signType,this._tag)};module.exports={Sign:createSign,Verify:createVerify,createSign:createSign,createVerify:createVerify}}
//# sourceMappingURL=module$node_modules$browserify_sign$browser$index.js.map
