{"version":3,"sources":["devtools/formatters/helpers.cljs"],"sourcesContent":["(ns devtools.formatters.helpers\n  (:require-macros [devtools.oops :refer [oget safe-call]])\n  (:require [devtools.prefs :as prefs]\n            [devtools.munging :as munging]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]))\n\n(defn pref [v]\n  (if (keyword? v)\n    (recur (prefs/pref v))\n    v))\n\n(defn get-prototype [o]\n  (.-prototype o))\n\n(defn get-constructor [o]\n  (.-constructor o))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn is-prototype? [o]\n  (identical? (get-prototype (get-constructor o)) o))\n\n(defn is-js-symbol? [o]\n  (= (goog/typeOf o) \"symbol\"))\n\n(defn cljs-function? [value]\n  (and (not (pref :disable-cljs-fn-formatting))                                                                               ; TODO: this should be deprecated\n       (not (var? value))                                                                                                     ; HACK: vars have IFn protocol and would act as functions TODO: implement custom rendering for vars\n       (munging/cljs-fn? value)))\n\n(defn has-formatting-protocol? [value]\n  (or (safe-call satisfies? false IPrintWithWriter value)\n      (safe-call satisfies? false IDevtoolsFormat value)                                                                      ; legacy\n      (safe-call satisfies? false IFormat value)))\n\n; IRC #clojurescript @ freenode.net on 2015-01-27:\n; [13:40:09] darwin_: Hi, what is the best way to test if I'm handled ClojureScript data value or plain javascript object?\n; [14:04:34] dnolen: there is a very low level thing you can check\n; [14:04:36] dnolen: https://github.com/clojure/clojurescript/blob/c2550c4fdc94178a7957497e2bfde54e5600c457/src/clj/cljs/core.clj#L901\n; [14:05:00] dnolen: this property is unlikely to change - still it's probably not something anything anyone should use w/o a really good reason\n(defn cljs-type? [f]\n  (and (goog/isObject f)                                                                                                      ; see http://stackoverflow.com/a/22482737/84283\n       (not (is-prototype? f))\n       (.-cljs$lang$type f)))\n\n(defn cljs-instance? [value]\n  (and (goog/isObject value)                                                                                                  ; see http://stackoverflow.com/a/22482737/84283\n       (cljs-type? (get-constructor value))))\n\n(defn cljs-land-value? [value]\n  (or (cljs-instance? value)\n      (has-formatting-protocol? value)))                                                                                      ; some raw js types can be extend-protocol to support cljs printing, see issue #21\n\n(defn cljs-value? [value]\n  (and\n    (or (cljs-land-value? value)\n        (cljs-function? value))\n    (not (is-prototype? value))\n    (not (is-js-symbol? value))))\n\n(defn bool? [value]\n  (or (true? value) (false? value)))\n\n(defn instance-of-a-well-known-type? [value]\n  (let [well-known-types (pref :well-known-types)\n        constructor-fn (get-constructor value)\n        [ns name] (munging/parse-constructor-info constructor-fn)\n        fully-qualified-type-name (str ns \"/\" name)]\n    (contains? well-known-types fully-qualified-type-name)))\n\n(defn should-render-instance? [value]\n  (and (cljs-instance? value)\n       (not (instance-of-a-well-known-type? value))))\n\n(defn directly-printable? [value]\n  (or (string? value)\n      (number? value)\n      (bool? value)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn abbreviated? [template]\n  (some #(= (pref :more-marker) %) template))\n\n(defn abbreviate-long-string [string marker prefix-limit postfix-limit]\n  (let [prefix (.slice string 0 prefix-limit)\n        postfix (.slice string (- (.-length string) postfix-limit))]\n    (str prefix marker postfix)))\n\n(defn get-more-marker [more-count]\n  (str (pref :plus-symbol) more-count (pref :more-symbol)))\n\n(defn wrap-arity [arity]\n  (let [args-open-symbol (pref :args-open-symbol)\n        args-close-symbol (pref :args-close-symbol)]\n    (str args-open-symbol arity args-close-symbol)))\n\n(defn fetch-field-value [obj field]\n  [field (oget obj (munge field))])\n\n(defn fetch-fields-values [obj fields]\n  (map (partial fetch-field-value obj) fields))\n\n(defn expandable? [obj]\n  (if (satisfies? ISeqable obj)\n    (if-let [min-count (pref (if (instance-of-a-well-known-type? obj)\n                               :min-expandable-sequable-count-for-well-known-types\n                               :min-expandable-sequable-count))]\n      (if-not (empty? obj)\n        (let [actual-count (bounded-count min-count obj)]\n          (>= actual-count min-count))))))\n\n(defn should-render? [pref-key value default-check]\n  (if-let [render-pref (pref pref-key)]\n    (cond\n      (true? render-pref) (default-check value)\n      (fn? render-pref) (render-pref value))))\n"],"mappings":"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","names":["devtools.formatters.helpers/pref","cljs.core/Keyword","v","devtools.prefs/pref","devtools.formatters.helpers/get-prototype","o","devtools.formatters.helpers/get-constructor","devtools.formatters.helpers/is-prototype?","devtools.formatters.helpers/is-js-symbol?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog/typeOf","devtools.formatters.helpers/cljs-function?","and__4036__auto__","cljs.core/not","cljs.core/var?","value","devtools.munging/cljs-fn?","devtools.formatters.helpers/has-formatting-protocol?","or__4047__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","e13154","cljs.core/IPrintWithWriter","e13158","devtools.format/IDevtoolsFormat","e13160","devtools.protocols/IFormat","devtools.formatters.helpers/cljs-type?","goog/isObject","f","devtools.formatters.helpers/cljs-instance?","devtools.formatters.helpers/cljs-land-value?","devtools.formatters.helpers/cljs-value?","devtools.formatters.helpers/bool?","devtools.formatters.helpers/instance-of-a-well-known-type?","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__13190","devtools.munging/parse-constructor-info","constructor-fn","ns","name","cljs.core/contains?","well-known-types","fully-qualified-type-name","devtools.formatters.helpers/should-render-instance?","devtools.formatters.helpers/directly-printable?","devtools.formatters.helpers/abbreviated?","cljs.core/some","p1__13196#","template","devtools.formatters.helpers/abbreviate-long-string","string","prefix-limit","postfix-limit","prefix","marker","postfix","devtools.formatters.helpers/get-more-marker","more-count","devtools.formatters.helpers/wrap-arity","args-open-symbol","arity","args-close-symbol","devtools.formatters.helpers/fetch-field-value","field","obj","cljs.core/munge","devtools.formatters.helpers/fetch-fields-values","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","fields","devtools.formatters.helpers/expandable?","cljs.core/ISeqable","temp__5455__auto__","cljs.core/empty?","cljs.core/bounded-count","min-count","actual-count","devtools.formatters.helpers/should-render?","pref-key","render-pref","default-check","cljs.core/fn?"]}