shadow$provide.module$node_modules$blockstack$lib$auth$authSession=function(global,process,require,module,exports,shadow$shims){function makeCoreSessionRequest(appDomain,appMethods,appPrivateKey){var blockchainID=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null,thisDevice=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null;null===thisDevice&&(thisDevice=".default");var appPublicKeys=[{public_key:_jsontokens.SECP256K1Client.derivePublicKey(appPrivateKey),device_id:thisDevice}];blockchainID=
{version:1,blockchain_id:blockchainID,app_private_key:appPrivateKey,app_domain:appDomain,methods:appMethods,app_public_keys:appPublicKeys,device_id:thisDevice};return(new _jsontokens.TokenSigner("ES256k",appPrivateKey)).sign(blockchainID)}function sendCoreSessionRequest(coreHost,corePort,coreAuthRequest,apiPassword){return new Promise(function(resolve,reject){return apiPassword?fetch("http://"+coreHost+":"+corePort+"/v1/auth?authRequest\x3d"+coreAuthRequest,{headers:{Authorization:"bearer "+apiPassword}}).then(function(response){if(!response.ok)throw reject("HTTP status not OK"),
Error("HTTP status not OK");return response.text()}).then(function(responseText){return JSON.parse(responseText)}).then(function(responseJson){responseJson=responseJson.token;if(!responseJson)return reject("Failed to get Core session token"),null;resolve(responseJson);return responseJson}).catch(function(error){console.error(error);reject("Invalid Core response: not JSON")}):(reject("Missing API password"),null)})}Object.defineProperty(exports,"__esModule",{value:!0});exports.makeCoreSessionRequest=
makeCoreSessionRequest;exports.sendCoreSessionRequest=sendCoreSessionRequest;exports.getCoreSession=function(coreHost,corePort,apiPassword,appPrivateKey){var blockchainId=4<arguments.length&&void 0!==arguments[4]?arguments[4]:null,authRequest=5<arguments.length&&void 0!==arguments[5]?arguments[5]:null,deviceId=6<arguments.length&&void 0!==arguments[6]?arguments[6]:"0";if(!authRequest)return Promise.reject("No authRequest provided");var payload=null,authRequestObject=null;try{authRequestObject=(0,
_jsontokens.decodeToken)(authRequest);if(!authRequestObject||!authRequestObject.payload)return Promise.reject("Invalid authRequest in URL query string");payload=authRequestObject.payload}catch(e){return console.error(e.stack),Promise.reject("Failed to parse authRequest in URL")}authRequest=payload.domain_name;if(!authRequest)return Promise.reject("No domain_name in authRequest");blockchainId=makeCoreSessionRequest(authRequest,payload.scopes,appPrivateKey,blockchainId,deviceId);return sendCoreSessionRequest(coreHost,
corePort,blockchainId,apiPassword)};var _jsontokens=require("module$node_modules$jsontokens$lib$index");require("module$node_modules$cross_fetch$dist$browser_polyfill")}
//# sourceMappingURL=module$node_modules$blockstack$lib$auth$authSession.js.map
