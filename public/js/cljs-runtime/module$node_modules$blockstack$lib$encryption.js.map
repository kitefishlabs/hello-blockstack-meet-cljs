{
"version":3,
"file":"module$node_modules$blockstack$lib$encryption.js",
"lineCount":15,
"mappings":"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",
"sources":["node_modules/blockstack/lib/encryption.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockstack$lib$encryption\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getHexFromBN = getHexFromBN;\nexports.encryptECIES = encryptECIES;\nexports.decryptECIES = decryptECIES;\nexports.signECDSA = signECDSA;\nexports.verifyECDSA = verifyECDSA;\nexports.encryptMnemonic = encryptMnemonic;\nexports.decryptMnemonic = decryptMnemonic;\n\nvar _elliptic = require('elliptic');\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nvar _bip = require('bip39');\n\nvar _bip2 = _interopRequireDefault(_bip);\n\nvar _triplesec = require('triplesec');\n\nvar _triplesec2 = _interopRequireDefault(_triplesec);\n\nvar _keys = require('./keys');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ecurve = new _elliptic.ec('secp256k1');\n\nfunction aes256CbcEncrypt(iv, key, plaintext) {\n  var cipher = _crypto2.default.createCipheriv('aes-256-cbc', key, iv);\n  return Buffer.concat([cipher.update(plaintext), cipher.final()]);\n}\n\nfunction aes256CbcDecrypt(iv, key, ciphertext) {\n  var cipher = _crypto2.default.createDecipheriv('aes-256-cbc', key, iv);\n  return Buffer.concat([cipher.update(ciphertext), cipher.final()]);\n}\n\nfunction hmacSha256(key, content) {\n  return _crypto2.default.createHmac('sha256', key).update(content).digest();\n}\n\nfunction equalConstTime(b1, b2) {\n  if (b1.length !== b2.length) {\n    return false;\n  }\n  var res = 0;\n  for (var i = 0; i < b1.length; i++) {\n    res |= b1[i] ^ b2[i]; // jshint ignore:line\n  }\n  return res === 0;\n}\n\nfunction sharedSecretToKeys(sharedSecret) {\n  // generate mac and encryption key from shared secret\n  var hashedSecret = _crypto2.default.createHash('sha512').update(sharedSecret).digest();\n  return {\n    encryptionKey: hashedSecret.slice(0, 32),\n    hmacKey: hashedSecret.slice(32)\n  };\n}\n\nfunction getHexFromBN(bnInput) {\n  var hexOut = bnInput.toString('hex');\n\n  if (hexOut.length === 64) {\n    return hexOut;\n  } else if (hexOut.length < 64) {\n    // pad with leading zeros\n    // the padStart function would require node 9\n    var padding = '0'.repeat(64 - hexOut.length);\n    return '' + padding + hexOut;\n  } else {\n    throw new Error('Generated a > 32-byte BN for encryption. Failing.');\n  }\n}\n\n/**\n * Encrypt content to elliptic curve publicKey using ECIES\n * @param {String} publicKey - secp256k1 public key hex string\n * @param {String | Buffer} content - content to encrypt\n * @return {Object} Object containing (hex encoded):\n *  iv (initialization vector), cipherText (cipher text),\n *  mac (message authentication code), ephemeral public key\n *  wasString (boolean indicating with or not to return a buffer or string on decrypt)\n *  @private\n */\nfunction encryptECIES(publicKey, content) {\n  var isString = typeof content === 'string';\n  var plainText = Buffer.from(content); // always copy to buffer\n\n  var ecPK = ecurve.keyFromPublic(publicKey, 'hex').getPublic();\n  var ephemeralSK = ecurve.genKeyPair();\n  var ephemeralPK = ephemeralSK.getPublic();\n  var sharedSecret = ephemeralSK.derive(ecPK);\n\n  var sharedSecretHex = getHexFromBN(sharedSecret);\n\n  var sharedKeys = sharedSecretToKeys(new Buffer(sharedSecretHex, 'hex'));\n\n  var initializationVector = _crypto2.default.randomBytes(16);\n\n  var cipherText = aes256CbcEncrypt(initializationVector, sharedKeys.encryptionKey, plainText);\n\n  var macData = Buffer.concat([initializationVector, new Buffer(ephemeralPK.encodeCompressed()), cipherText]);\n  var mac = hmacSha256(sharedKeys.hmacKey, macData);\n\n  return {\n    iv: initializationVector.toString('hex'),\n    ephemeralPK: ephemeralPK.encodeCompressed('hex'),\n    cipherText: cipherText.toString('hex'),\n    mac: mac.toString('hex'),\n    wasString: isString\n  };\n}\n\n/**\n * Decrypt content encrypted using ECIES\n * @param {String} privateKey - secp256k1 private key hex string\n * @param {Object} cipherObject - object to decrypt, should contain:\n *  iv (initialization vector), cipherText (cipher text),\n *  mac (message authentication code), ephemeralPublicKey\n *  wasString (boolean indicating with or not to return a buffer or string on decrypt)\n * @return {Buffer} plaintext\n * @throws {Error} if unable to decrypt\n * @private\n */\nfunction decryptECIES(privateKey, cipherObject) {\n  var ecSK = ecurve.keyFromPrivate(privateKey, 'hex');\n  var ephemeralPK = ecurve.keyFromPublic(cipherObject.ephemeralPK, 'hex').getPublic();\n  var sharedSecret = ecSK.derive(ephemeralPK);\n  var sharedSecretBuffer = new Buffer(getHexFromBN(sharedSecret), 'hex');\n\n  var sharedKeys = sharedSecretToKeys(sharedSecretBuffer);\n\n  var ivBuffer = new Buffer(cipherObject.iv, 'hex');\n  var cipherTextBuffer = new Buffer(cipherObject.cipherText, 'hex');\n\n  var macData = Buffer.concat([ivBuffer, new Buffer(ephemeralPK.encodeCompressed()), cipherTextBuffer]);\n  var actualMac = hmacSha256(sharedKeys.hmacKey, macData);\n  var expectedMac = new Buffer(cipherObject.mac, 'hex');\n  if (!equalConstTime(expectedMac, actualMac)) {\n    throw new Error('Decryption failed: failure in MAC check');\n  }\n  var plainText = aes256CbcDecrypt(ivBuffer, sharedKeys.encryptionKey, cipherTextBuffer);\n\n  if (cipherObject.wasString) {\n    return plainText.toString();\n  } else {\n    return plainText;\n  }\n}\n\n/**\n * Sign content using ECDSA\n * @private\n * @param {String} privateKey - secp256k1 private key hex string\n * @param {Object} content - content to sign\n * @return {Object} contains:\n * signature - Hex encoded DER signature\n * public key - Hex encoded private string taken from privateKey\n * @private\n */\nfunction signECDSA(privateKey, content) {\n  var contentBuffer = Buffer.from(content);\n  var ecPrivate = ecurve.keyFromPrivate(privateKey, 'hex');\n  var publicKey = (0, _keys.getPublicKeyFromPrivate)(privateKey);\n  var contentHash = _crypto2.default.createHash('sha256').update(contentBuffer).digest();\n  var signature = ecPrivate.sign(contentHash);\n  var signatureString = signature.toDER('hex');\n\n  return {\n    signature: signatureString,\n    publicKey: publicKey\n  };\n}\n\n/**\n * Verify content using ECDSA\n * @param {String | Buffer} content - Content to verify was signed\n * @param {String} publicKey - secp256k1 private key hex string\n * @param {String} signature - Hex encoded DER signature\n * @return {Boolean} returns true when signature matches publickey + content, false if not\n * @private\n */\nfunction verifyECDSA(content, publicKey, signature) {\n  var contentBuffer = Buffer.from(content);\n  var ecPublic = ecurve.keyFromPublic(publicKey, 'hex');\n  var contentHash = _crypto2.default.createHash('sha256').update(contentBuffer).digest();\n\n  return ecPublic.verify(contentHash, signature);\n}\n\n/**\n * Encrypt a raw mnemonic phrase to be password protected\n * @param {string} phrase - Raw mnemonic phrase\n * @param {string} password - Password to encrypt mnemonic with\n * @return {Promise<Buffer>} The encrypted phrase\n * @private\n */\nfunction encryptMnemonic(phrase, password) {\n  return Promise.resolve().then(function () {\n    // must be bip39 mnemonic\n    if (!_bip2.default.validateMnemonic(phrase)) {\n      throw new Error('Not a valid bip39 nmemonic');\n    }\n\n    // normalize plaintext to fixed length byte string\n    var plaintextNormalized = Buffer.from(_bip2.default.mnemonicToEntropy(phrase).toString('hex'), 'hex');\n\n    // AES-128-CBC with SHA256 HMAC\n    var salt = _crypto2.default.randomBytes(16);\n    var keysAndIV = _crypto2.default.pbkdf2Sync(password, salt, 100000, 48, 'sha512');\n    var encKey = keysAndIV.slice(0, 16);\n    var macKey = keysAndIV.slice(16, 32);\n    var iv = keysAndIV.slice(32, 48);\n\n    var cipher = _crypto2.default.createCipheriv('aes-128-cbc', encKey, iv);\n    var cipherText = cipher.update(plaintextNormalized).toString('hex');\n    cipherText += cipher.final().toString('hex');\n\n    var hmacPayload = Buffer.concat([salt, Buffer.from(cipherText, 'hex')]);\n\n    var hmac = _crypto2.default.createHmac('sha256', macKey);\n    hmac.write(hmacPayload);\n    var hmacDigest = hmac.digest();\n\n    var payload = Buffer.concat([salt, hmacDigest, Buffer.from(cipherText, 'hex')]);\n    return payload;\n  });\n}\n\n// Used to distinguish bad password during decrypt vs invalid format\n\nvar PasswordError = function (_Error) {\n  _inherits(PasswordError, _Error);\n\n  function PasswordError() {\n    _classCallCheck(this, PasswordError);\n\n    return _possibleConstructorReturn(this, (PasswordError.__proto__ || Object.getPrototypeOf(PasswordError)).apply(this, arguments));\n  }\n\n  return PasswordError;\n}(Error);\n\nfunction decryptMnemonicBuffer(dataBuffer, password) {\n  return Promise.resolve().then(function () {\n    var salt = dataBuffer.slice(0, 16);\n    var hmacSig = dataBuffer.slice(16, 48); // 32 bytes\n    var cipherText = dataBuffer.slice(48);\n    var hmacPayload = Buffer.concat([salt, cipherText]);\n\n    var keysAndIV = _crypto2.default.pbkdf2Sync(password, salt, 100000, 48, 'sha512');\n    var encKey = keysAndIV.slice(0, 16);\n    var macKey = keysAndIV.slice(16, 32);\n    var iv = keysAndIV.slice(32, 48);\n\n    var decipher = _crypto2.default.createDecipheriv('aes-128-cbc', encKey, iv);\n    var plaintext = decipher.update(cipherText).toString('hex');\n    plaintext += decipher.final().toString('hex');\n\n    var hmac = _crypto2.default.createHmac('sha256', macKey);\n    hmac.write(hmacPayload);\n    var hmacDigest = hmac.digest();\n\n    // hash both hmacSig and hmacDigest so string comparison time\n    // is uncorrelated to the ciphertext\n    var hmacSigHash = _crypto2.default.createHash('sha256').update(hmacSig).digest().toString('hex');\n\n    var hmacDigestHash = _crypto2.default.createHash('sha256').update(hmacDigest).digest().toString('hex');\n\n    if (hmacSigHash !== hmacDigestHash) {\n      // not authentic\n      throw new PasswordError('Wrong password (HMAC mismatch)');\n    }\n\n    var mnemonic = _bip2.default.entropyToMnemonic(plaintext);\n    if (!_bip2.default.validateMnemonic(mnemonic)) {\n      throw new PasswordError('Wrong password (invalid plaintext)');\n    }\n\n    return mnemonic;\n  });\n}\n\n/**\n * Decrypt legacy triplesec keys\n * @param {Buffer} dataBuffer - The encrypted key\n * @param {String} password - Password for data\n * @return {Promise<Buffer>} Decrypted seed\n * @private\n */\nfunction decryptLegacy(dataBuffer, password) {\n  return new Promise(function (resolve, reject) {\n    _triplesec2.default.decrypt({\n      key: Buffer.from(password),\n      data: dataBuffer\n    }, function (err, plaintextBuffer) {\n      if (!err) {\n        resolve(plaintextBuffer);\n      } else {\n        reject(err);\n      }\n    });\n  });\n}\n\n/**\n * Encrypt a raw mnemonic phrase with a password\n * @param {string | Buffer} data - Buffer or hex-encoded string of the encrypted mnemonic\n * @param {string} password - Password for data\n * @return {Promise<Buffer>} the raw mnemonic phrase\n * @private\n */\nfunction decryptMnemonic(data, password) {\n  var dataBuffer = Buffer.isBuffer(data) ? data : Buffer.from(data, 'hex');\n  return decryptMnemonicBuffer(dataBuffer, password).catch(function (err) {\n    // If it was a password error, don't even bother with legacy\n    if (err instanceof PasswordError) {\n      throw err;\n    }\n    return decryptLegacy(dataBuffer, password);\n  });\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_interopRequireDefault","obj","__esModule","default","_inherits","subClass","superClass","TypeError","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","hmacSha256","key","content","_crypto2","createHmac","update","digest","sharedSecretToKeys","sharedSecret","hashedSecret","createHash","encryptionKey","slice","hmacKey","getHexFromBN","bnInput","hexOut","toString","length","repeat","padding","Error","decryptMnemonicBuffer","dataBuffer","password","Promise","resolve","then","salt","hmacSig","cipherText","hmacPayload","Buffer","concat","keysAndIV","pbkdf2Sync","encKey","macKey","iv","decipher","createDecipheriv","plaintext","final","hmac","write","hmacDigest","hmacSigHash","hmacDigestHash","PasswordError","mnemonic","_bip2","entropyToMnemonic","validateMnemonic","decryptLegacy","reject","_triplesec2","decrypt","from","data","err","plaintextBuffer","defineProperty","encryptECIES","publicKey","isString","plainText","ecPK","ecurve","keyFromPublic","getPublic","ephemeralSK","genKeyPair","ephemeralPK","derive","sharedSecretHex","sharedKeys","initializationVector","randomBytes","cipher","createCipheriv","macData","encodeCompressed","mac","wasString","decryptECIES","privateKey","cipherObject","ecSK","keyFromPrivate","sharedSecretBuffer","ivBuffer","cipherTextBuffer","actualMac","expectedMac","res","i","signECDSA","contentBuffer","ecPrivate","_keys","getPublicKeyFromPrivate","contentHash","signature","sign","toDER","signatureString","verifyECDSA","ecPublic","verify","encryptMnemonic","phrase","plaintextNormalized","mnemonicToEntropy","payload","decryptMnemonic","isBuffer","catch","_elliptic","_crypto","_bip","_triplesec","ec","_Error","instance","apply","getPrototypeOf","arguments","self","ReferenceError","call"]
}
