{"version":3,"sources":["cljs/tools/reader/reader_types.cljs"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Protocols and default Reader types implementation\"\n      :author \"Bronsa\"}\n  cljs.tools.reader.reader-types\n  (:refer-clojure :exclude [char read-line])\n  (:require [cljs.tools.reader.impl.utils :refer [char whitespace? newline?]]\n            [goog.string])\n  (:import goog.string.StringBuffer))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; reader protocols\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(defprotocol Reader\n  (read-char [reader]\n    \"Returns the next char from the Reader, nil if the end of stream has been reached\")\n  (peek-char [reader]\n    \"Returns the next char from the Reader without removing it from the reader stream\"))\n\n(defprotocol IPushbackReader\n  (unread [reader ch]\n    \"Pushes back a single character on to the stream\"))\n\n(defprotocol IndexingReader\n  (get-line-number [reader]\n    \"Returns the line number of the next character to be read from the stream\")\n  (get-column-number [reader]\n    \"Returns the column number of the next character to be read from the stream\")\n  (get-file-name [reader]\n    \"Returns the file name the reader is reading from, or nil\"))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; reader deftypes\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n(deftype StringReader\n    [s s-len ^:mutable s-pos]\n  Reader\n  (read-char [reader]\n    (when (> s-len s-pos)\n      (let [r (.charAt s s-pos)]\n        (set! s-pos (inc s-pos))\n        r)))\n  (peek-char [reader]\n    (when (> s-len s-pos)\n      (.charAt s s-pos))))\n\n(deftype NodeReadableReader [readable ^:mutable buf]\n  Reader\n  (read-char [reader]\n    (if buf\n      (let [c (aget buf 0)]\n        (set! buf nil)\n        (char c))\n      (let [c (str (.read readable 1))]\n        (when c\n          (char c)))))\n  (peek-char [reader]\n    (when-not buf\n      (set! buf (str (.read readable 1))))\n    (when buf\n      (char (aget buf 0)))))\n\n(deftype PushbackReader\n  [^not-native rdr buf buf-len ^:mutable buf-pos]\n  Reader\n  (read-char [reader]\n    (let [c (if (< buf-pos buf-len)\n              (aget buf buf-pos)\n              (read-char rdr))]\n      (when (< buf-pos buf-len)\n        (set! buf-pos (inc buf-pos)))\n      (char c)))\n  (peek-char [reader]\n    (let [c (if (< buf-pos buf-len)\n              (aget buf buf-pos)\n              (peek-char rdr))]\n      (char c)))\n  IPushbackReader\n  (unread [reader ch]\n    (when ch\n      (if (zero? buf-pos) (throw (js/Error. \"Pushback buffer is full\")))\n      (set! buf-pos (dec buf-pos))\n      (aset buf buf-pos ch))))\n\n(defn- normalize-newline [^not-native rdr ch]\n  (if (identical? \\return ch)\n    (let [c (peek-char rdr)]\n      (when (or (identical? \\formfeed c)\n                (identical? \\newline c))\n        (read-char rdr))\n      \\newline)\n    ch))\n\n(deftype IndexingPushbackReader\n    [^not-native rdr ^:mutable line ^:mutable column\n     ^:mutable line-start? ^:mutable prev\n     ^:mutable prev-column file-name]\n  Reader\n  (read-char [reader]\n    (when-let [ch (read-char rdr)]\n      (let [ch (normalize-newline rdr ch)]\n        (set! prev line-start?)\n        (set! line-start? (newline? ch))\n        (when line-start?\n          (set! prev-column column)\n          (set! column 0)\n          (set! line (inc line)))\n        (set! column (inc column))\n        ch)))\n\n  (peek-char [reader]\n    (peek-char rdr))\n\n  IPushbackReader\n  (unread [reader ch]\n    (if line-start?\n      (do (set! line (dec line))\n          (set! column prev-column))\n      (set! column (dec column)))\n    (set! line-start? prev)\n    (unread rdr ch))\n\n  IndexingReader\n  (get-line-number [reader] (int line))\n  (get-column-number [reader] (int column))\n  (get-file-name [reader] file-name))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Source Logging support\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n(defn merge-meta\n  \"Returns an object of the same type and value as `obj`, with its\nmetadata merged over `m`.\"\n  [obj m]\n  (let [orig-meta (meta obj)]\n    (with-meta obj (merge m (dissoc orig-meta :source)))))\n\n(defn- peek-source-log\n  \"Returns a string containing the contents of the top most source\nlogging frame.\"\n  [frames]\n  (subs (str (:buffer frames)) (first (:offset frames))))\n\n(defn- log-source-char\n  \"Logs `char` to all currently active source logging frames.\"\n  [frames char]\n  (when-let [buffer (:buffer frames)]\n    (.append buffer char)))\n\n(defn- drop-last-logged-char\n  \"Removes the last logged character from all currently active source\nlogging frames. Called when pushing a character back.\"\n  [frames]\n  (when-let [buffer (:buffer frames)]\n    (.set buffer (subs (str buffer) 0 (dec (.getLength buffer))))))\n\n(deftype SourceLoggingPushbackReader\n    [^not-native rdr ^:mutable line ^:mutable column\n     ^:mutable line-start? ^:mutable prev\n     ^:mutable prev-column file-name frames]\n  Reader\n  (read-char [reader]\n    (when-let [ch (read-char rdr)]\n      (let [ch (normalize-newline rdr ch)]\n        (set! prev line-start?)\n        (set! line-start? (newline? ch))\n        (when line-start?\n          (set! prev-column column)\n          (set! column 0)\n          (set! line (inc line)))\n        (set! column (inc column))\n        (log-source-char @frames ch)\n        ch)))\n\n  (peek-char [reader]\n    (peek-char rdr))\n\n  IPushbackReader\n  (unread [reader ch]\n    (if line-start?\n      (do (set! line (dec line))\n          (set! column prev-column))\n      (set! column (dec column)))\n    (set! line-start? prev)\n    (when ch\n      (drop-last-logged-char @frames))\n    (unread rdr ch))\n\n  IndexingReader\n  (get-line-number [reader] (int line))\n  (get-column-number [reader] (int column))\n  (get-file-name [reader] file-name))\n\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n;; Public API\n;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\n;; fast check for provided implementations\n(defn indexing-reader?\n  \"Returns true if the reader satisfies IndexingReader\"\n  [rdr]\n  (implements? IndexingReader rdr))\n\n(defn string-reader\n  \"Creates a StringReader from a given string\"\n  ([s]\n     (StringReader. s (count s) 0)))\n\n(defn string-push-back-reader\n  \"Creates a PushbackReader from a given string\"\n  ([s]\n     (string-push-back-reader s 1))\n  ([s buf-len]\n     (PushbackReader. (string-reader s) (object-array buf-len) buf-len buf-len)))\n\n(defn node-readable-push-back-reader [readable]\n  (PushbackReader. (NodeReadableReader. readable nil) (object-array 1) 1 1))\n\n(defn indexing-push-back-reader\n  \"Creates an IndexingPushbackReader from a given string or PushbackReader\"\n  ([s-or-rdr]\n     (indexing-push-back-reader s-or-rdr 1))\n  ([s-or-rdr buf-len]\n     (indexing-push-back-reader s-or-rdr buf-len nil))\n  ([s-or-rdr buf-len file-name]\n     (IndexingPushbackReader.\n      (if (string? s-or-rdr) (string-push-back-reader s-or-rdr buf-len) s-or-rdr) 1 1 true nil 0 file-name)))\n\n(defn source-logging-push-back-reader\n  \"Creates a SourceLoggingPushbackReader from a given string or PushbackReader\"\n  ([s-or-rdr]\n     (source-logging-push-back-reader s-or-rdr 1))\n  ([s-or-rdr buf-len]\n     (source-logging-push-back-reader s-or-rdr buf-len nil))\n  ([s-or-rdr buf-len file-name]\n     (SourceLoggingPushbackReader.\n      (if (string? s-or-rdr) (string-push-back-reader s-or-rdr buf-len) s-or-rdr)\n      1\n      1\n      true\n      nil\n      0\n      file-name\n      (atom {:buffer (StringBuffer.) :offset '(0)}))))\n\n(defn read-line\n  \"Reads a line from the reader or from *in* if no reader is specified\"\n  ([^not-native rdr]\n     (loop [c (read-char rdr) s (StringBuffer.)]\n       (if (newline? c)\n         (str s)\n         (recur (read-char rdr) (.append s c))))))\n\n(defn ^boolean source-logging-reader?\n  [rdr]\n  (instance? SourceLoggingPushbackReader rdr))\n\n(defn ^boolean line-start?\n  \"Returns true if rdr is an IndexingReader and the current char starts a new line\"\n  [^not-native rdr]\n  (when (indexing-reader? rdr)\n    (== 1 (get-column-number rdr))))\n\n(defn log-source*\n  [reader f]\n  (let [buffer (:buffer @(.-frames reader))]\n    (try\n      (swap! (.-frames reader) update-in [:offset] conj (.getLength buffer))\n      (let [ret (f)]\n        (if (implements? IMeta ret)\n          (merge-meta ret {:source (peek-source-log @ (.-frames reader))})\n          ret))\n      (finally\n        (swap! (.-frames reader) update-in [:offset] rest)))))\n\n"],"mappings":"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","names":["cljs.tools.reader.reader-types/read-char","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","cljs.tools.reader.reader-types/peek-char","cljs.tools.reader.reader-types/Reader","reader","cljs.tools.reader.reader-types/unread","cljs.tools.reader.reader-types/IPushbackReader","ch","cljs.tools.reader.reader-types/get-line-number","cljs.tools.reader.reader-types/get-column-number","cljs.tools.reader.reader-types/get-file-name","cljs.tools.reader.reader-types/IndexingReader","cljs.core/PROTOCOL_SENTINEL","cljs.core/-write","writer__4291__auto__","cljs.tools.reader.reader-types/StringReader","cljs.tools.reader.reader-types/->StringReader","s","s-len","s-pos","r","cljs.tools.reader.reader-types/NodeReadableReader","cljs.tools.reader.reader-types/->NodeReadableReader","readable","buf","cljs.tools.reader.impl.utils/char","c","cljs.tools.reader.reader-types/PushbackReader","cljs.tools.reader.reader-types/->PushbackReader","rdr","buf-len","buf-pos","js/Error","cljs.tools.reader.reader-types/normalize-newline","cljs.tools.reader.reader-types/IndexingPushbackReader","cljs.tools.reader.reader-types/->IndexingPushbackReader","line","column","line-start?","prev","prev-column","file-name","temp__5457__auto__","cljs.tools.reader.impl.utils/newline?","cljs.tools.reader.reader-types/merge-meta","cljs.core/meta","obj","cljs.core/with-meta","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","m","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","orig-meta","cljs.tools.reader.reader-types/peek-source-log","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","frames","cljs.core/first","cljs.tools.reader.reader-types/log-source-char","buffer","char","cljs.tools.reader.reader-types/drop-last-logged-char","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.tools.reader.reader-types/SourceLoggingPushbackReader","cljs.tools.reader.reader-types/->SourceLoggingPushbackReader","cljs.core/deref","cljs.tools.reader.reader-types/indexing-reader?","cljs.tools.reader.reader-types/string-reader","cljs.core/count","G__15302","cljs.tools.reader.reader-types/string-push-back-reader","cljs.tools.reader.reader_types.string_push_back_reader.cljs$core$IFn$_invoke$arity$2","cljs.core.object_array.cljs$core$IFn$_invoke$arity$1","cljs.tools.reader.reader-types/node-readable-push-back-reader","G__15309","cljs.tools.reader.reader-types/indexing-push-back-reader","cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$2","s-or-rdr","cljs.tools.reader.reader_types.indexing_push_back_reader.cljs$core$IFn$_invoke$arity$3","G__15316","cljs.tools.reader.reader-types/source-logging-push-back-reader","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.reader_types.source_logging_push_back_reader.cljs$core$IFn$_invoke$arity$3","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","goog.string/StringBuffer","cljs.tools.reader.reader-types/read-line","cljs.tools.reader.reader-types/source-logging-reader?","cljs.tools.reader.reader-types/line-start?","cljs.tools.reader.reader-types/log-source*","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/conj","f","ret","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/rest"]}