{"version":3,"sources":["cljs/tools/reader/impl/utils.cljs"],"sourcesContent":[";;   Copyright (c) Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.utils\n  (:refer-clojure :exclude [char])\n  (:require\n   [clojure.string :as string]\n   [goog.string :as gstring]))\n\n(defn char [x]\n  (when-not (nil? x)\n    (cljs.core/char x)))\n\n(defn ^boolean ex-info? [ex]\n  (instance? cljs.core.ExceptionInfo ex))\n\n(defrecord ReaderConditional [splicing? form])\n\n(defn ^boolean reader-conditional?\n  \"Return true if the value is the data representation of a reader conditional\"\n  [value]\n  (instance? ReaderConditional value))\n\n(defn reader-conditional\n  \"Construct a data representation of a reader conditional.\n  If true, splicing? indicates read-cond-splicing.\"\n  [form splicing?]\n  (ReaderConditional. splicing? form))\n\n(extend-protocol IPrintWithWriter\n  ReaderConditional\n  (-pr-writer [coll writer opts]\n    (-write writer (str \"#?\" (when (:splicing? coll) \"@\")))\n    (pr-writer (:form coll) writer opts)))\n\n(def ws-rx #\"[\\s]\")\n\n(defn ^boolean whitespace?\n  \"Checks whether a given character is whitespace\"\n  [ch]\n  (when-not (nil? ch)\n    (if (identical? ch \\,)\n      true\n      (.test ws-rx ch))))\n\n(defn ^boolean numeric?\n  \"Checks whether a given character is numeric\"\n  [ch]\n  (when-not (nil? ch)\n    (gstring/isNumeric ch)))\n\n(defn ^boolean newline?\n  \"Checks whether the character is a newline\"\n  [c]\n  (or (identical? \\newline c)\n      (identical? \"\\n\" c)\n      (nil? c)))\n\n(defn desugar-meta\n  \"Resolves syntactical sugar in metadata\" ;; could be combined with some other desugar?\n  [f]\n  (cond\n    (keyword? f) {f true}\n    (symbol? f)  {:tag f}\n    (string? f)  {:tag f}\n    :else        f))\n\n(def last-id (atom 0))\n\n(defn next-id\n  []\n  (swap! last-id inc))\n\n(defn namespace-keys [ns keys]\n  (for [key keys]\n    (if (or (symbol? key)\n            (keyword? key))\n      (let [[key-ns key-name] ((juxt namespace name) key)\n            ->key (if (symbol? key) symbol keyword)]\n        (cond\n          (nil? key-ns)\n          (->key ns key-name)\n\n          (= \"_\" key-ns)\n          (->key key-name)\n\n          :else\n          key))\n      key)))\n\n(defn second' [[a b]]\n  (when-not a b))\n\n(defn char-code [ch base]\n  (let [code (js/parseInt ch base)]\n    (if (js/isNaN code)\n      -1\n      code)))\n"],"mappings":"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","names":["cljs.tools.reader.impl.utils/char","x","cljs.core/char","cljs.tools.reader.impl.utils/ex-info?","cljs.core/ExceptionInfo","ex","this__4301__auto__","k__4302__auto__","k15046","G__15051","cljs.core/Keyword","splicing?","form","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","else__4304__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__15053","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__15056","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","cljs.core/RecordIter","G__15045","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","cljs.core/count","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__15071","this__4297__auto__","other15048","this15047","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/contains?","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__15079","pred__15078","G__15082","G__15083","G__15084","G__15085","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/seq","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","cljs.tools.reader.impl.utils/ReaderConditional","cljs.core/List","cljs.core/-write","writer__4345__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__15049","cljs.core/record?","G__15092","extmap__4340__auto__","cljs.tools.reader.impl.utils/->ReaderConditional","cljs.tools.reader.impl.utils/map->ReaderConditional","cljs.tools.reader.impl.utils/reader-conditional?","value","cljs.tools.reader.impl.utils/reader-conditional","cljs.core/PROTOCOL_SENTINEL","writer","coll","cljs.core/pr-writer","opts","cljs.tools.reader.impl.utils/ws-rx","cljs.tools.reader.impl.utils/whitespace?","ch","cljs.tools.reader.impl.utils/numeric?","goog.string/isNumeric","cljs.tools.reader.impl.utils/newline?","c","cljs.tools.reader.impl.utils/desugar-meta","f","cljs.core/Symbol","cljs.tools.reader.impl.utils/last-id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.tools.reader.impl.utils/next-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","cljs.tools.reader.impl.utils/namespace-keys","cljs.core/LazySeq","s__15105","temp__5457__auto__","cljs.core/chunked-seq?","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__15106","cljs.core/chunk-append","b__15107","cljs.core/chunk-cons","cljs.core/chunk","iter__15104","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","iter__4434__auto__","keys","key","vec__15109","vec__15115","fexpr__15112","fexpr__15119","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core/name","cljs.core/symbol","cljs.core/keyword","key-ns","->key","ns","key-name","p__15123","vec__15124","cljs.tools.reader.impl.utils/second'","a","b","cljs.tools.reader.impl.utils/char-code","js/parseInt","base","js/isNaN","code","cljs.core/chunk-first"]}