shadow$provide.module$node_modules$blockstack$lib$operations$safety=function(global,process,require,module,exports,shadow$shims){function isNameValid(){var fullyQualifiedName=0<arguments.length&&void 0!==arguments[0]?arguments[0]:"",NAME_PART_RULE=/^[a-z0-9\-_+]+$/;if(!fullyQualifiedName||37<fullyQualifiedName.length)return Promise.resolve(!1);fullyQualifiedName=fullyQualifiedName.split(".");return 2!==fullyQualifiedName.length?Promise.resolve(!1):Promise.resolve(fullyQualifiedName.reduce(function(agg,
namePart){return agg?NAME_PART_RULE.test(namePart):!1},!0))}Object.defineProperty(exports,"__esModule",{value:!0});exports.safety=void 0;var _slicedToArray=function(){return function(arr,i){if(Array.isArray(arr))return arr;if(Symbol.iterator in Object(arr)){var _arr=[],_n=!0,_d=!1,_e=void 0;try{for(var _i=arr[Symbol.iterator](),_s;!(_n=(_s=_i.next()).done)&&(_arr.push(_s.value),!i||_arr.length!==i);_n=!0);}catch(err){_d=!0,_e=err}finally{try{if(!_n&&_i["return"])_i["return"]()}finally{if(_d)throw _e;
}}return _arr}throw new TypeError("Invalid attempt to destructure non-iterable instance");}}(),_config=require("module$node_modules$blockstack$lib$config");exports.safety={addressCanReceiveName:function(address){return _config.config.network.getNamesOwned(address).then(function(names){return Promise.all(names.map(function(name){return isNameValid(name)})).then(function(validNames){return 25>validNames.filter(function(nameValid){return nameValid}).length})})},isInGracePeriod:function(fullyQualifiedName){var network=
_config.config.network;return Promise.all([network.getNameInfo(fullyQualifiedName),network.getBlockHeight(),network.getGracePeriod(fullyQualifiedName)]).then(function(_ref){var _ref2=_slicedToArray(_ref,3);_ref=_ref2[1];var gracePeriod=_ref2[2];_ref2=_ref2[0].expire_block;return _ref>=_ref2&&_ref<gracePeriod+_ref2}).catch(function(e){if("Name not found"===e.message)return!1;throw e;})},ownsName:function(fullyQualifiedName,ownerAddress){return _config.config.network.getNameInfo(fullyQualifiedName).then(function(nameInfo){return nameInfo.address===
ownerAddress}).catch(function(e){if("Name not found"===e.message)return!1;throw e;})},isNameAvailable:function(fullyQualifiedName){return _config.config.network.getNameInfo(fullyQualifiedName).then(function(){return!1}).catch(function(e){if("Name not found"===e.message)return!0;throw e;})},isNameValid:isNameValid,isNamespaceValid:function(namespaceID){return Promise.resolve(null!==namespaceID.match(/^[a-z0-9\-_]{1,19}$/))},isNamespaceAvailable:function(namespaceID){return _config.config.network.getNamespaceInfo(namespaceID).then(function(){return!1}).catch(function(e){if("Namespace not found"===
e.message)return!0;throw e;})},revealedNamespace:function(namespaceID,revealAddress){return _config.config.network.getNamespaceInfo(namespaceID).then(function(namespaceInfo){return namespaceInfo.recipient_address===revealAddress}).catch(function(e){if("Namespace not found"===e.message)return!1;throw e;})},namespaceIsReady:function(namespaceID){return _config.config.network.getNamespaceInfo(namespaceID).then(function(namespaceInfo){return namespaceInfo.ready}).catch(function(e){if("Namespace not found"===
e.message)return!1;throw e;})},namespaceIsRevealed:function(namespaceID){return _config.config.network.getNamespaceInfo(namespaceID).then(function(namespaceInfo){return!namespaceInfo.ready}).catch(function(e){if("Namespace not found"===e.message)return!1;throw e;})},isAccountSpendable:function(address,tokenType,blockHeight){return _config.config.network.getAccountStatus(address,tokenType).then(function(accountStatus){return accountStatus.transfer_send_block_id>=blockHeight})}}}
//# sourceMappingURL=module$node_modules$blockstack$lib$operations$safety.js.map
