{
"version":3,
"file":"module$node_modules$sha_DOT_js$hash.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,oCAAA,CAAwD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAIrHC,QAASA,KAAK,CAACC,SAAD,CAAYC,SAAZ,CAAuB,CACnC,IAAAC,OAAA,CAAcC,MAAAC,MAAA,CAAaJ,SAAb,CACd,KAAAK,WAAA,CAAkBJ,SAClB,KAAAK,WAAA,CAAkBN,SAClB,KAAAO,KAAA,CAAY,CAJuB,CAHrC,IAAIJ,OAASR,OAAA,CAAQ,uCAAR,CAAAQ,OAUbJ,KAAAS,UAAAC,OAAA,CAAwBC,QAAS,CAACC,IAAD,CAAOC,GAAP,CAAY,CACvB,QAApB,GAAI,MAAOD,KAAX,GAEEA,IAFF,CAESR,MAAAU,KAAA,CAAYF,IAAZ,CADDC,GACC,EADM,MACN,CAFT,CAKIE,IAAAA,CAAQ,IAAAZ,OAKZ,KAJA,IAAIF,UAAY,IAAAM,WAAhB,CACIS,OAASJ,IAAAI,OADb,CAEIC,MAAQ,IAAAT,KAFZ;AAISU,OAAS,CAAlB,CAAqBA,MAArB,CAA8BF,MAA9B,CAAA,CAAuC,CAIrC,IAHA,IAAIG,SAAWF,KAAXE,CAAmBlB,SAAvB,CACImB,UAAYC,IAAAC,IAAA,CAASN,MAAT,CAAkBE,MAAlB,CAA0BjB,SAA1B,CAAsCkB,QAAtC,CADhB,CAGSI,EAAI,CAAb,CAAgBA,CAAhB,CAAoBH,SAApB,CAA+BG,CAAA,EAA/B,CACER,GAAA,CAAMI,QAAN,CAAiBI,CAAjB,CAAA,CAAsBX,IAAA,CAAKM,MAAL,CAAcK,CAAd,CAGxBN,MAAA,EAASG,SACTF,OAAA,EAAUE,SAEkB,EAA5B,GAAKH,KAAL,CAAahB,SAAb,EACE,IAAAuB,QAAA,CAAaT,GAAb,CAZmC,CAgBvC,IAAAP,KAAA,EAAaQ,MACb,OAAO,KA5BoC,CA+B7ChB,KAAAS,UAAAgB,OAAA,CAAwBC,QAAS,CAACb,GAAD,CAAM,CACrC,IAAIc,IAAM,IAAAnB,KAANmB,CAAkB,IAAApB,WAEtB,KAAAJ,OAAA,CAAYwB,GAAZ,CAAA,CAAmB,GAInB,KAAAxB,OAAAyB,KAAA,CAAiB,CAAjB,CAAoBD,GAApB,CAA0B,CAA1B,CAEIA,IAAJ,EAAW,IAAArB,WAAX,GACE,IAAAkB,QAAA,CAAa,IAAArB,OAAb,CACA,CAAA,IAAAA,OAAAyB,KAAA,CAAiB,CAAjB,CAFF,CAKIC,IAAAA,CAAmB,CAAnBA,CAAO,IAAArB,KAGX,IAAY,UAAZ,EAAIqB,GAAJ,CACE,IAAA1B,OAAA2B,cAAA,CAA0BD,GAA1B;AAAgC,IAAAtB,WAAhC,CAAkD,CAAlD,CADF,KAIO,CACL,IAAIwB,SAAWF,GAAXE,CAAkB,UAAlBA,IAAkC,CAGtC,KAAA5B,OAAA2B,cAAA,EAFgBD,GAEhB,CAFuBE,OAEvB,EAFkC,UAElC,CAAoC,IAAAxB,WAApC,CAAsD,CAAtD,CACA,KAAAJ,OAAA2B,cAAA,CAA0BC,OAA1B,CAAmC,IAAAxB,WAAnC,CAAqD,CAArD,CALK,CAQP,IAAAiB,QAAA,CAAa,IAAArB,OAAb,CACI6B,IAAAA,CAAO,IAAAC,MAAA,EAEX,OAAOpB,IAAA,CAAMmB,GAAAE,SAAA,CAAcrB,GAAd,CAAN,CAA2BmB,GAhCG,CAmCvChC,KAAAS,UAAAe,QAAA,CAAyBW,QAAS,EAAG,CACnC,KAAUC,MAAJ,CAAU,yCAAV,CAAN,CADmC,CAIrCvC,OAAAC,QAAA,CAAiBE,IAjFoG;",
"sources":["node_modules/sha_DOT_js/hash.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$sha_DOT_js$hash\"] = function(global,process,require,module,exports,shadow$shims) {\nvar Buffer = require('safe-buffer').Buffer\n\n// prototype class for hash functions\nfunction Hash (blockSize, finalSize) {\n  this._block = Buffer.alloc(blockSize)\n  this._finalSize = finalSize\n  this._blockSize = blockSize\n  this._len = 0\n}\n\nHash.prototype.update = function (data, enc) {\n  if (typeof data === 'string') {\n    enc = enc || 'utf8'\n    data = Buffer.from(data, enc)\n  }\n\n  var block = this._block\n  var blockSize = this._blockSize\n  var length = data.length\n  var accum = this._len\n\n  for (var offset = 0; offset < length;) {\n    var assigned = accum % blockSize\n    var remainder = Math.min(length - offset, blockSize - assigned)\n\n    for (var i = 0; i < remainder; i++) {\n      block[assigned + i] = data[offset + i]\n    }\n\n    accum += remainder\n    offset += remainder\n\n    if ((accum % blockSize) === 0) {\n      this._update(block)\n    }\n  }\n\n  this._len += length\n  return this\n}\n\nHash.prototype.digest = function (enc) {\n  var rem = this._len % this._blockSize\n\n  this._block[rem] = 0x80\n\n  // zero (rem + 1) trailing bits, where (rem + 1) is the smallest\n  // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize\n  this._block.fill(0, rem + 1)\n\n  if (rem >= this._finalSize) {\n    this._update(this._block)\n    this._block.fill(0)\n  }\n\n  var bits = this._len * 8\n\n  // uint32\n  if (bits <= 0xffffffff) {\n    this._block.writeUInt32BE(bits, this._blockSize - 4)\n\n  // uint64\n  } else {\n    var lowBits = (bits & 0xffffffff) >>> 0\n    var highBits = (bits - lowBits) / 0x100000000\n\n    this._block.writeUInt32BE(highBits, this._blockSize - 8)\n    this._block.writeUInt32BE(lowBits, this._blockSize - 4)\n  }\n\n  this._update(this._block)\n  var hash = this._hash()\n\n  return enc ? hash.toString(enc) : hash\n}\n\nHash.prototype._update = function () {\n  throw new Error('_update must be implemented by subclass')\n}\n\nmodule.exports = Hash\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Hash","blockSize","finalSize","_block","Buffer","alloc","_finalSize","_blockSize","_len","prototype","update","Hash.prototype.update","data","enc","from","block","length","accum","offset","assigned","remainder","Math","min","i","_update","digest","Hash.prototype.digest","rem","fill","bits","writeUInt32BE","lowBits","hash","_hash","toString","Hash.prototype._update","Error"]
}
