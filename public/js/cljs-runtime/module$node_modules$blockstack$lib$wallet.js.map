{
"version":3,
"file":"module$node_modules$blockstack$lib$wallet.js",
"lineCount":14,
"mappings":"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",
"sources":["node_modules/blockstack/lib/wallet.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockstack$lib$wallet\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BlockstackWallet = undefined;\n\nvar _regenerator = require('babel-runtime/regenerator');\n\nvar _regenerator2 = _interopRequireDefault(_regenerator);\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _crypto = require('crypto');\n\nvar _crypto2 = _interopRequireDefault(_crypto);\n\nvar _bitcoinjsLib = require('bitcoinjs-lib');\n\nvar _bitcoinjsLib2 = _interopRequireDefault(_bitcoinjsLib);\n\nvar _bip = require('bip39');\n\nvar _bip2 = _interopRequireDefault(_bip);\n\nvar _bip3 = require('bip32');\n\nvar _bip4 = _interopRequireDefault(_bip3);\n\nvar _utils = require('./utils');\n\nvar _encryption = require('./encryption');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar APPS_NODE_INDEX = 0;\nvar IDENTITY_KEYCHAIN = 888;\nvar BLOCKSTACK_ON_BITCOIN = 0;\n\nvar BITCOIN_BIP_44_PURPOSE = 44;\nvar BITCOIN_COIN_TYPE = 0;\nvar BITCOIN_ACCOUNT_INDEX = 0;\n\nvar EXTERNAL_ADDRESS = 'EXTERNAL_ADDRESS';\nvar CHANGE_ADDRESS = 'CHANGE_ADDRESS';\n\nfunction hashCode(string) {\n  var hash = 0;\n  if (string.length === 0) return hash;\n  for (var i = 0; i < string.length; i++) {\n    var character = string.charCodeAt(i);\n    hash = (hash << 5) - hash + character;\n    hash &= hash;\n  }\n  return hash & 0x7fffffff;\n}\n\nfunction getNodePrivateKey(node) {\n  return (0, _utils.ecPairToHexString)(_bitcoinjsLib.ECPair.fromPrivateKey(node.privateKey));\n}\n\nfunction getNodePublicKey(node) {\n  return node.publicKey.toString('hex');\n}\n\n/**\n * The BlockstackWallet class manages the hierarchical derivation\n *  paths for a standard blockstack client wallet. This includes paths\n *  for bitcoin payment address, blockstack identity addresses, blockstack\n *  application specific addresses.\n *  @private\n */\n\nvar BlockstackWallet = exports.BlockstackWallet = function () {\n  function BlockstackWallet(rootNode) {\n    _classCallCheck(this, BlockstackWallet);\n\n    this.rootNode = rootNode;\n  }\n\n  _createClass(BlockstackWallet, [{\n    key: 'toBase58',\n    value: function toBase58() {\n      return this.rootNode.toBase58();\n    }\n\n    /**\n     * Initialize a blockstack wallet from a seed buffer\n     * @param {Buffer} seed - the input seed for initializing the root node\n     *  of the hierarchical wallet\n     * @return {BlockstackWallet} the constructed wallet\n     */\n\n  }, {\n    key: 'getIdentityPrivateKeychain',\n    value: function getIdentityPrivateKeychain() {\n      return this.rootNode.deriveHardened(IDENTITY_KEYCHAIN).deriveHardened(BLOCKSTACK_ON_BITCOIN);\n    }\n  }, {\n    key: 'getBitcoinPrivateKeychain',\n    value: function getBitcoinPrivateKeychain() {\n      return this.rootNode.deriveHardened(BITCOIN_BIP_44_PURPOSE).deriveHardened(BITCOIN_COIN_TYPE).deriveHardened(BITCOIN_ACCOUNT_INDEX);\n    }\n  }, {\n    key: 'getBitcoinNode',\n    value: function getBitcoinNode(addressIndex) {\n      var chainType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : EXTERNAL_ADDRESS;\n\n      return BlockstackWallet.getNodeFromBitcoinKeychain(this.getBitcoinPrivateKeychain().toBase58(), addressIndex, chainType);\n    }\n  }, {\n    key: 'getIdentityAddressNode',\n    value: function getIdentityAddressNode(identityIndex) {\n      var identityPrivateKeychain = this.getIdentityPrivateKeychain();\n      return identityPrivateKeychain.deriveHardened(identityIndex);\n    }\n  }, {\n    key: 'getIdentitySalt',\n\n\n    /**\n     * Get a salt for use with creating application specific addresses\n     * @return {String} the salt\n     */\n    value: function getIdentitySalt() {\n      var identityPrivateKeychain = this.getIdentityPrivateKeychain();\n      var publicKeyHex = getNodePublicKey(identityPrivateKeychain);\n      return _crypto2.default.createHash('sha256').update(publicKeyHex).digest('hex');\n    }\n\n    /**\n     * Get a bitcoin receive address at a given index\n     * @param {number} addressIndex - the index of the address\n     * @return {String} address\n     */\n\n  }, {\n    key: 'getBitcoinAddress',\n    value: function getBitcoinAddress(addressIndex) {\n      return BlockstackWallet.getAddressFromBIP32Node(this.getBitcoinNode(addressIndex));\n    }\n\n    /**\n     * Get the private key hex-string for a given bitcoin receive address\n     * @param {number} addressIndex - the index of the address\n     * @return {String} the hex-string. this will be either 64\n     * characters long to denote an uncompressed bitcoin address, or 66\n     * characters long for a compressed bitcoin address.\n     */\n\n  }, {\n    key: 'getBitcoinPrivateKey',\n    value: function getBitcoinPrivateKey(addressIndex) {\n      return getNodePrivateKey(this.getBitcoinNode(addressIndex));\n    }\n\n    /**\n     * Get the root node for the bitcoin public keychain\n     * @return {String} base58-encoding of the public node\n     */\n\n  }, {\n    key: 'getBitcoinPublicKeychain',\n    value: function getBitcoinPublicKeychain() {\n      return this.getBitcoinPrivateKeychain().neutered();\n    }\n\n    /**\n     * Get the root node for the identity public keychain\n     * @return {String} base58-encoding of the public node\n     */\n\n  }, {\n    key: 'getIdentityPublicKeychain',\n    value: function getIdentityPublicKeychain() {\n      return this.getIdentityPrivateKeychain().neutered();\n    }\n  }, {\n    key: 'getIdentityKeyPair',\n\n\n    /**\n     * Get the keypair information for a given identity index. This\n     * information is used to obtain the private key for an identity address\n     * and derive application specific keys for that address.\n     * @param {number} addressIndex - the identity index\n     * @param {boolean} alwaysUncompressed - if true, always return a\n     *   private-key hex string corresponding to the uncompressed address\n     * @return {Object} an IdentityKeyPair type object with keys:\n     *   .key {String} - the private key hex-string\n     *   .keyID {String} - the public key hex-string\n     *   .address {String} - the identity address\n     *   .appsNodeKey {String} - the base-58 encoding of the applications node\n     *   .salt {String} - the salt used for creating app-specific addresses\n     */\n    value: function getIdentityKeyPair(addressIndex) {\n      var alwaysUncompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      var identityNode = this.getIdentityAddressNode(addressIndex);\n\n      var address = BlockstackWallet.getAddressFromBIP32Node(identityNode);\n      var identityKey = getNodePrivateKey(identityNode);\n      if (alwaysUncompressed && identityKey.length === 66) {\n        identityKey = identityKey.slice(0, 64);\n      }\n\n      var identityKeyID = getNodePublicKey(identityNode);\n      var appsNodeKey = BlockstackWallet.getAppsNode(identityNode).toBase58();\n      var salt = this.getIdentitySalt();\n      var keyPair = {\n        key: identityKey,\n        keyID: identityKeyID,\n        address: address,\n        appsNodeKey: appsNodeKey,\n        salt: salt\n      };\n      return keyPair;\n    }\n  }], [{\n    key: 'fromSeedBuffer',\n    value: function fromSeedBuffer(seed) {\n      return new BlockstackWallet(_bip4.default.fromSeed(seed));\n    }\n\n    /**\n     * Initialize a blockstack wallet from a base58 string\n     * @param {string} keychain - the Base58 string used to initialize\n     *  the root node of the hierarchical wallet\n     * @return {BlockstackWallet} the constructed wallet\n     */\n\n  }, {\n    key: 'fromBase58',\n    value: function fromBase58(keychain) {\n      return new BlockstackWallet(_bip4.default.fromBase58(keychain));\n    }\n\n    /**\n     * Initialize a blockstack wallet from an encrypted phrase & password. Throws\n     * if the password is incorrect. Supports all formats of Blockstack phrases.\n     * @param {string} data - The encrypted phrase as a hex-encoded string\n     * @param {string} password - The plain password\n     * @return {Promise<BlockstackWallet>} the constructed wallet\n     */\n\n  }, {\n    key: 'fromEncryptedMnemonic',\n    value: function fromEncryptedMnemonic(data, password) {\n      return (0, _encryption.decryptMnemonic)(data, password).then(function (mnemonic) {\n        var seed = _bip2.default.mnemonicToSeed(mnemonic);\n        return new BlockstackWallet(_bip4.default.fromSeed(seed));\n      }).catch(function (err) {\n        if (err.message && err.message.startsWith('bad header;')) {\n          throw new Error('Incorrect password');\n        } else {\n          throw err;\n        }\n      });\n    }\n\n    /**\n     * Generate a BIP-39 12 word mnemonic\n     * @return {Promise<string>} space-separated 12 word phrase\n     */\n\n  }, {\n    key: 'generateMnemonic',\n    value: function generateMnemonic() {\n      return _bip2.default.generateMnemonic(128, _crypto.randomBytes);\n    }\n\n    /**\n     * Encrypt a mnemonic phrase with a password\n     * @param {string} mnemonic - Raw mnemonic phrase\n     * @param {string} password - Password to encrypt mnemonic with\n     * @return {Promise<string>} Hex-encoded encrypted mnemonic\n     */\n\n  }, {\n    key: 'encryptMnemonic',\n    value: function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regenerator2.default.mark(function _callee(mnemonic, password) {\n        var encryptedBuffer;\n        return _regenerator2.default.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return (0, _encryption.encryptMnemonic)(mnemonic, password);\n\n              case 2:\n                encryptedBuffer = _context.sent;\n                return _context.abrupt('return', encryptedBuffer.toString('hex'));\n\n              case 4:\n              case 'end':\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function encryptMnemonic(_x3, _x4) {\n        return _ref.apply(this, arguments);\n      }\n\n      return encryptMnemonic;\n    }()\n  }, {\n    key: 'getAppsNode',\n    value: function getAppsNode(identityNode) {\n      return identityNode.deriveHardened(APPS_NODE_INDEX);\n    }\n  }, {\n    key: 'getNodeFromBitcoinKeychain',\n    value: function getNodeFromBitcoinKeychain(keychainBase58, addressIndex) {\n      var chainType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EXTERNAL_ADDRESS;\n\n      var chain = void 0;\n      if (chainType === EXTERNAL_ADDRESS) {\n        chain = 0;\n      } else if (chainType === CHANGE_ADDRESS) {\n        chain = 1;\n      } else {\n        throw new Error('Invalid chain type');\n      }\n      var keychain = _bip4.default.fromBase58(keychainBase58);\n\n      return keychain.derive(chain).derive(addressIndex);\n    }\n\n    /**\n     * Get a bitcoin address given a base-58 encoded bitcoin node\n     * (usually called the account node)\n     * @param {String} keychainBase58 - base58-encoding of the node\n     * @param {number} addressIndex - index of the address to get\n     * @param {String} chainType - either 'EXTERNAL_ADDRESS' (for a\n     * \"receive\" address) or 'CHANGE_ADDRESS'\n     * @return {String} the address\n     */\n\n  }, {\n    key: 'getAddressFromBitcoinKeychain',\n    value: function getAddressFromBitcoinKeychain(keychainBase58, addressIndex) {\n      var chainType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : EXTERNAL_ADDRESS;\n\n      return BlockstackWallet.getAddressFromBIP32Node(BlockstackWallet.getNodeFromBitcoinKeychain(keychainBase58, addressIndex, chainType));\n    }\n\n    /**\n     * Get a ECDSA private key hex-string for an application-specific\n     *  address.\n     * @param {String} appsNodeKey - the base58-encoded private key for\n     * applications node (the `appsNodeKey` return in getIdentityKeyPair())\n     * @param {String} salt - a string, used to salt the\n     * application-specific addresses\n     * @param {String} appDomain - the appDomain to generate a key for\n     * @return {String} the private key hex-string. this will be a 64\n     * character string\n     */\n\n  }, {\n    key: 'getLegacyAppPrivateKey',\n    value: function getLegacyAppPrivateKey(appsNodeKey, salt, appDomain) {\n      var hash = _crypto2.default.createHash('sha256').update('' + appDomain + salt).digest('hex');\n      var appIndex = hashCode(hash);\n      var appNode = _bip4.default.fromBase58(appsNodeKey).deriveHardened(appIndex);\n      return getNodePrivateKey(appNode).slice(0, 64);\n    }\n  }, {\n    key: 'getAddressFromBIP32Node',\n    value: function getAddressFromBIP32Node(node) {\n      return _bitcoinjsLib2.default.payments.p2pkh({ pubkey: node.publicKey }).address;\n    }\n\n    /**\n     * Get a ECDSA private key hex-string for an application-specific\n     *  address.\n     * @param {String} appsNodeKey - the base58-encoded private key for\n     * applications node (the `appsNodeKey` return in getIdentityKeyPair())\n     * @param {String} salt - a string, used to salt the\n     * application-specific addresses\n     * @param {String} appDomain - the appDomain to generate a key for\n     * @return {String} the private key hex-string. this will be a 64\n     * character string\n     */\n\n  }, {\n    key: 'getAppPrivateKey',\n    value: function getAppPrivateKey(appsNodeKey, salt, appDomain) {\n      var hash = _crypto2.default.createHash('sha256').update('' + appDomain + salt).digest('hex');\n      var appIndexHexes = [];\n      // note: there's hardcoded numbers here, precisely because I want this\n      //   code to be very specific to the derivation paths we expect.\n      if (hash.length !== 64) {\n        throw new Error('Unexpected app-domain hash length of ' + hash.length);\n      }\n      for (var i = 0; i < 11; i++) {\n        // split the hash into 3-byte chunks\n        // because child nodes can only be up to 2^31,\n        // and we shouldn't deal in partial bytes.\n        appIndexHexes.push(hash.slice(i * 6, i * 6 + 6));\n      }\n      var appNode = _bip4.default.fromBase58(appsNodeKey);\n      appIndexHexes.forEach(function (hex) {\n        if (hex.length > 6) {\n          throw new Error('Invalid hex string length');\n        }\n        appNode = appNode.deriveHardened(parseInt(hex, 16));\n      });\n      return getNodePrivateKey(appNode).slice(0, 64);\n    }\n  }]);\n\n  return BlockstackWallet;\n}();\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_interopRequireDefault","obj","__esModule","default","_asyncToGenerator","fn","gen","apply","arguments","Promise","resolve","reject","step","key","arg","info","value","error","done","then","err","getNodePrivateKey","node","_utils","ecPairToHexString","_bitcoinjsLib","ECPair","fromPrivateKey","privateKey","Object","defineProperty","BlockstackWallet","undefined","_regenerator","_regenerator2","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","prototype","_crypto","_crypto2","_bitcoinjsLib2","_bip","_bip2","_bip3","_bip4","_encryption","rootNode","instance","TypeError","toBase58","getIdentityPrivateKeychain","deriveHardened","IDENTITY_KEYCHAIN","BLOCKSTACK_ON_BITCOIN","getBitcoinPrivateKeychain","BITCOIN_BIP_44_PURPOSE","BITCOIN_COIN_TYPE","BITCOIN_ACCOUNT_INDEX","getBitcoinNode","addressIndex","chainType","EXTERNAL_ADDRESS","getNodeFromBitcoinKeychain","getIdentityAddressNode","identityIndex","identityPrivateKeychain","getIdentitySalt","publicKeyHex","publicKey","toString","createHash","update","digest","getBitcoinAddress","getAddressFromBIP32Node","getBitcoinPrivateKey","getBitcoinPublicKeychain","neutered","getIdentityPublicKeychain","getIdentityKeyPair","alwaysUncompressed","identityNode","address","identityKey","slice","identityKeyID","appsNodeKey","getAppsNode","salt","keyPair","keyID","fromSeedBuffer","seed","fromSeed","fromBase58","keychain","fromEncryptedMnemonic","data","password","decryptMnemonic","mnemonic","mnemonicToSeed","catch","message","startsWith","Error","generateMnemonic","randomBytes","_ref","mark","_callee","encryptedBuffer","wrap","_callee$","_context","prev","next","encryptMnemonic","sent","abrupt","stop","_x3","_x4","APPS_NODE_INDEX","keychainBase58","chain","CHANGE_ADDRESS","derive","getAddressFromBitcoinKeychain","getLegacyAppPrivateKey","appDomain","hash","string","character","charCodeAt","appNode","appIndex","payments","p2pkh","pubkey","getAppPrivateKey","appIndexHexes","push","forEach","hex","parseInt"]
}
