{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$address.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/address.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$address\"] = function(global,process,require,module,exports,shadow$shims) {\nconst Buffer = require('safe-buffer').Buffer\nconst bech32 = require('bech32')\nconst bs58check = require('bs58check')\nconst bscript = require('./script')\nconst networks = require('./networks')\nconst typeforce = require('typeforce')\nconst types = require('./types')\nconst payments = require('./payments')\n\nfunction fromBase58Check (address) {\n  const payload = bs58check.decode(address)\n\n  // TODO: 4.0.0, move to \"toOutputScript\"\n  if (payload.length < 21) throw new TypeError(address + ' is too short')\n  if (payload.length > 21) throw new TypeError(address + ' is too long')\n\n  const version = payload.readUInt8(0)\n  const hash = payload.slice(1)\n\n  return { version: version, hash: hash }\n}\n\nfunction fromBech32 (address) {\n  const result = bech32.decode(address)\n  const data = bech32.fromWords(result.words.slice(1))\n\n  return {\n    version: result.words[0],\n    prefix: result.prefix,\n    data: Buffer.from(data)\n  }\n}\n\nfunction toBase58Check (hash, version) {\n  typeforce(types.tuple(types.Hash160bit, types.UInt8), arguments)\n\n  const payload = Buffer.allocUnsafe(21)\n  payload.writeUInt8(version, 0)\n  hash.copy(payload, 1)\n\n  return bs58check.encode(payload)\n}\n\nfunction toBech32 (data, version, prefix) {\n  const words = bech32.toWords(data)\n  words.unshift(version)\n\n  return bech32.encode(prefix, words)\n}\n\nfunction fromOutputScript (output, network) {\n  network = network || networks.bitcoin\n\n  try { return payments.p2pkh({ output, network }).address } catch (e) {}\n  try { return payments.p2sh({ output, network }).address } catch (e) {}\n  try { return payments.p2wpkh({ output, network }).address } catch (e) {}\n  try { return payments.p2wsh({ output, network }).address } catch (e) {}\n\n  throw new Error(bscript.toASM(output) + ' has no matching Address')\n}\n\nfunction toOutputScript (address, network) {\n  network = network || networks.bitcoin\n\n  let decode\n  try {\n    decode = fromBase58Check(address)\n  } catch (e) {}\n\n  if (decode) {\n    if (decode.version === network.pubKeyHash) return payments.p2pkh({ hash: decode.hash }).output\n    if (decode.version === network.scriptHash) return payments.p2sh({ hash: decode.hash }).output\n  } else {\n    try {\n      decode = fromBech32(address)\n    } catch (e) {}\n\n    if (decode) {\n      if (decode.prefix !== network.bech32) throw new Error(address + ' has an invalid prefix')\n      if (decode.version === 0) {\n        if (decode.data.length === 20) return payments.p2wpkh({ hash: decode.data }).output\n        if (decode.data.length === 32) return payments.p2wsh({ hash: decode.data }).output\n      }\n    }\n  }\n\n  throw new Error(address + ' has no matching Script')\n}\n\nmodule.exports = {\n  fromBase58Check: fromBase58Check,\n  fromBech32: fromBech32,\n  fromOutputScript: fromOutputScript,\n  toBase58Check: toBase58Check,\n  toBech32: toBech32,\n  toOutputScript: toOutputScript\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","fromBase58Check","address","payload","bs58check","decode","length","TypeError","version","readUInt8","hash","slice","fromBech32","result","bech32","data","fromWords","words","prefix","Buffer","from","bscript","networks","typeforce","types","payments","fromOutputScript","output","network","bitcoin","p2pkh","e","p2sh","p2wpkh","p2wsh","Error","toASM","toBase58Check","tuple","Hash160bit","UInt8","arguments","allocUnsafe","writeUInt8","copy","encode","toBech32","toWords","unshift","toOutputScript","pubKeyHash","scriptHash"]
}
