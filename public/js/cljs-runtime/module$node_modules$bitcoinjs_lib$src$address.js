shadow$provide.module$node_modules$bitcoinjs_lib$src$address=function(global,process,require,module,exports,shadow$shims){function fromBase58Check(address){var payload=bs58check.decode(address);if(21>payload.length)throw new TypeError(address+" is too short");if(21<payload.length)throw new TypeError(address+" is too long");address=payload.readUInt8(0);payload=payload.slice(1);return{version:address,hash:payload}}function fromBech32(address){address=bech32.decode(address);var data=bech32.fromWords(address.words.slice(1));
return{version:address.words[0],prefix:address.prefix,data:Buffer.from(data)}}var Buffer=require("module$node_modules$safe_buffer$index").Buffer,bech32=require("module$node_modules$bech32$index"),bs58check=require("module$node_modules$bs58check$index"),bscript=require("module$node_modules$bitcoinjs_lib$src$script"),networks=require("module$node_modules$bitcoinjs_lib$src$networks"),typeforce=require("module$node_modules$typeforce$index"),types=require("module$node_modules$bitcoinjs_lib$src$types"),
payments=require("module$node_modules$bitcoinjs_lib$src$payments$index");module.exports={fromBase58Check:fromBase58Check,fromBech32:fromBech32,fromOutputScript:function(output,network){network=network||networks.bitcoin;try{return payments.p2pkh({output:output,network:network}).address}catch(e){}try{return payments.p2sh({output:output,network:network}).address}catch(e$18){}try{return payments.p2wpkh({output:output,network:network}).address}catch(e$19){}try{return payments.p2wsh({output:output,network:network}).address}catch(e$20){}throw Error(bscript.toASM(output)+
" has no matching Address");},toBase58Check:function(hash,version){typeforce(types.tuple(types.Hash160bit,types.UInt8),arguments);var payload=Buffer.allocUnsafe(21);payload.writeUInt8(version,0);hash.copy(payload,1);return bs58check.encode(payload)},toBech32:function(data,version,prefix){data=bech32.toWords(data);data.unshift(version);return bech32.encode(prefix,data)},toOutputScript:function(address,network){network=network||networks.bitcoin;try{var decode=fromBase58Check(address)}catch(e){}if(decode){if(decode.version===
network.pubKeyHash)return payments.p2pkh({hash:decode.hash}).output;if(decode.version===network.scriptHash)return payments.p2sh({hash:decode.hash}).output}else{try{decode=fromBech32(address)}catch(e$21){}if(decode){if(decode.prefix!==network.bech32)throw Error(address+" has an invalid prefix");if(0===decode.version){if(20===decode.data.length)return payments.p2wpkh({hash:decode.data}).output;if(32===decode.data.length)return payments.p2wsh({hash:decode.data}).output}}}throw Error(address+" has no matching Script");
}}}
//# sourceMappingURL=module$node_modules$bitcoinjs_lib$src$address.js.map
