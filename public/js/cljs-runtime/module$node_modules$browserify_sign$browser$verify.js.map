{
"version":3,
"file":"module$node_modules$browserify_sign$browser$verify.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/browserify-sign/browser/verify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$browserify_sign$browser$verify\"] = function(global,process,require,module,exports,shadow$shims) {\n// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js\nvar BN = require('bn.js')\nvar EC = require('elliptic').ec\nvar parseKeys = require('parse-asn1')\nvar curves = require('./curves.json')\n\nfunction verify (sig, hash, key, signType, tag) {\n  var pub = parseKeys(key)\n  if (pub.type === 'ec') {\n    // rsa keys can be interpreted as ecdsa ones in openssl\n    if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n    return ecVerify(sig, hash, pub)\n  } else if (pub.type === 'dsa') {\n    if (signType !== 'dsa') throw new Error('wrong public key type')\n    return dsaVerify(sig, hash, pub)\n  } else {\n    if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type')\n  }\n  hash = Buffer.concat([tag, hash])\n  var len = pub.modulus.byteLength()\n  var pad = [ 1 ]\n  var padNum = 0\n  while (hash.length + pad.length + 2 < len) {\n    pad.push(0xff)\n    padNum++\n  }\n  pad.push(0x00)\n  var i = -1\n  while (++i < hash.length) {\n    pad.push(hash[i])\n  }\n  pad = new Buffer(pad)\n  var red = BN.mont(pub.modulus)\n  sig = new BN(sig).toRed(red)\n\n  sig = sig.redPow(new BN(pub.publicExponent))\n  sig = new Buffer(sig.fromRed().toArray())\n  var out = padNum < 8 ? 1 : 0\n  len = Math.min(sig.length, pad.length)\n  if (sig.length !== pad.length) out = 1\n\n  i = -1\n  while (++i < len) out |= sig[i] ^ pad[i]\n  return out === 0\n}\n\nfunction ecVerify (sig, hash, pub) {\n  var curveId = curves[pub.data.algorithm.curve.join('.')]\n  if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'))\n\n  var curve = new EC(curveId)\n  var pubkey = pub.data.subjectPrivateKey.data\n\n  return curve.verify(hash, sig, pubkey)\n}\n\nfunction dsaVerify (sig, hash, pub) {\n  var p = pub.data.p\n  var q = pub.data.q\n  var g = pub.data.g\n  var y = pub.data.pub_key\n  var unpacked = parseKeys.signature.decode(sig, 'der')\n  var s = unpacked.s\n  var r = unpacked.r\n  checkValue(s, q)\n  checkValue(r, q)\n  var montp = BN.mont(p)\n  var w = s.invm(q)\n  var v = g.toRed(montp)\n    .redPow(new BN(hash).mul(w).mod(q))\n    .fromRed()\n    .mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed())\n    .mod(p)\n    .mod(q)\n  return v.cmp(r) === 0\n}\n\nfunction checkValue (b, q) {\n  if (b.cmpn(0) <= 0) throw new Error('invalid sig')\n  if (b.cmp(q) >= q) throw new Error('invalid sig')\n}\n\nmodule.exports = verify\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","checkValue","b","q","cmpn","Error","cmp","BN","EC","ec","parseKeys","curves","verify","sig","hash","key","signType","tag","pub","type","curveId","data","algorithm","curve","join","subjectPrivateKey","p","g","y","pub_key","unpacked","signature","decode","s","r","montp","mont","w","invm","toRed","redPow","mul","mod","fromRed","v","Buffer","concat","len","modulus","byteLength","pad","padNum","length","push","i","red","publicExponent","toArray","out","Math","min"]
}
