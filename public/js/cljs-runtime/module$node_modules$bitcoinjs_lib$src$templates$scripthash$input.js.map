{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$templates$scripthash$input.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,iEAAA,CAAqF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAYlJC,QAASA,MAAM,CAACC,MAAD,CAASC,eAAT,CAA0B,CACjCC,MAAAA,CAASC,OAAAC,UAAA,CAAkBJ,MAAlB,CACf,IAAoB,CAApB,CAAIE,MAAAG,OAAJ,CAAuB,MAAO,CAAA,CAE9B,KAAMC,UAAYJ,MAAA,CAAOA,MAAAG,OAAP,CAAuB,CAAvB,CAClB,IAAI,CAACE,MAAAC,SAAA,CAAgBF,SAAhB,CAAL,CAAiC,MAAO,CAAA,CAExC,KAAMG,gBAAkBN,OAAAC,UAAA,CAAkBD,OAAAO,QAAA,CAAgBR,MAAAS,MAAA,CAAa,CAAb,CAAiB,EAAjB,CAAhB,CAAlB,CAOxB,OAAA,CANMC,SAMN,CAN2BT,OAAAC,UAAA,CAAkBE,SAAlB,CAM3B,GAAKH,OAAAU,WAAA,CAAmBJ,eAAnB,CAAL,CAGsB,CAAtB,GAAIP,MAAAG,OAAJ,CACSS,MAAAf,MAAA,CAAaa,SAAb,CADT;AAEIG,OAAAhB,MAAA,CAAca,SAAd,CAFJ,CAMII,KAAAC,MAAAlB,MAAA,CAAkBU,eAAlB,CAMJ,EALEO,KAAAE,OAAAnB,MAAA,CAAmBa,SAAnB,CAKF,EAHIO,IAAAF,MAAAlB,MAAA,CAAiBU,eAAjB,CAAkCR,eAAlC,CAGJ,EAFEkB,IAAAD,OAAAnB,MAAA,CAAkBa,SAAlB,CAEF,EAAIQ,IAAAH,MAAAlB,MAAA,CAAiBU,eAAjB,CAAJ,EACEW,IAAAF,OAAAnB,MAAA,CAAkBa,SAAlB,CADF,CACgD,CAAA,CADhD,CAGO,CAAA,CAlBP,CAAiD,CAAA,CAdV,CATzC,IAAML,OAASZ,OAAA,CAAQ,uCAAR,CAAAY,OAAf,CACMJ,QAAUR,OAAA,CAAQ,8CAAR,CADhB,CAGMwB,KAAOxB,OAAA,CAAQ,gEAAR,CAHb,CAIMyB,KAAOzB,OAAA,CAAQ,8DAAR,CAJb;AAKMqB,MAAQrB,OAAA,CAAQ,kEAAR,CALd,CAMMoB,QAAUpB,OAAA,CAAQ,0EAAR,CANhB,CAOMmB,OAASnB,OAAA,CAAQ,0EAAR,CAoCfI,MAAAsB,OAAA,CAAeC,QAAS,EAAG,CAAE,MAAO,kBAAT,CAE3B1B,OAAAC,QAAA,CAAiB,CAAEE,MAAAA,KAAF,CAhDiI;",
"sources":["node_modules/bitcoinjs-lib/src/templates/scripthash/input.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$templates$scripthash$input\"] = function(global,process,require,module,exports,shadow$shims) {\n// <scriptSig> {serialized scriptPubKey script}\n\nconst Buffer = require('safe-buffer').Buffer\nconst bscript = require('../../script')\n\nconst p2ms = require('../multisig/')\nconst p2pk = require('../pubkey/')\nconst p2pkh = require('../pubkeyhash/')\nconst p2wpkho = require('../witnesspubkeyhash/output')\nconst p2wsho = require('../witnessscripthash/output')\n\nfunction check (script, allowIncomplete) {\n  const chunks = bscript.decompile(script)\n  if (chunks.length < 1) return false\n\n  const lastChunk = chunks[chunks.length - 1]\n  if (!Buffer.isBuffer(lastChunk)) return false\n\n  const scriptSigChunks = bscript.decompile(bscript.compile(chunks.slice(0, -1)))\n  const redeemScriptChunks = bscript.decompile(lastChunk)\n\n  // is redeemScript a valid script?\n  if (!redeemScriptChunks) return false\n\n  // is redeemScriptSig push only?\n  if (!bscript.isPushOnly(scriptSigChunks)) return false\n\n  // is witness?\n  if (chunks.length === 1) {\n    return p2wsho.check(redeemScriptChunks) ||\n      p2wpkho.check(redeemScriptChunks)\n  }\n\n  // match types\n  if (p2pkh.input.check(scriptSigChunks) &&\n    p2pkh.output.check(redeemScriptChunks)) return true\n\n  if (p2ms.input.check(scriptSigChunks, allowIncomplete) &&\n    p2ms.output.check(redeemScriptChunks)) return true\n\n  if (p2pk.input.check(scriptSigChunks) &&\n    p2pk.output.check(redeemScriptChunks)) return true\n\n  return false\n}\ncheck.toJSON = function () { return 'scriptHash input' }\n\nmodule.exports = { check }\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","check","script","allowIncomplete","chunks","bscript","decompile","length","lastChunk","Buffer","isBuffer","scriptSigChunks","compile","slice","redeemScriptChunks","isPushOnly","p2wsho","p2wpkho","p2pkh","input","output","p2ms","p2pk","toJSON","check.toJSON"]
}
