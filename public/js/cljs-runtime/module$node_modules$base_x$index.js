shadow$provide.module$node_modules$base_x$index=function(global,process,require,module,exports,shadow$shims){var Buffer=require("module$node_modules$safe_buffer$index").Buffer;module.exports=function(ALPHABET){function decodeUnsafe(source){if("string"!==typeof source)throw new TypeError("Expected String");if(0===source.length)return Buffer.alloc(0);var psz=0;if(" "!==source[psz]){for(var zeroes=0,length=0;source[psz]===LEADER;)zeroes++,psz++;for(var size=(source.length-psz)*FACTOR+1>>>0,b256=new Uint8Array(size);source[psz];){var carry=
BASE_MAP[source.charCodeAt(psz)];if(255===carry)return;for(var i$12=0,it$13=size-1;(0!==carry||i$12<length)&&-1!==it$13;it$13--,i$12++)carry+=BASE*b256[it$13]>>>0,b256[it$13]=carry%256>>>0,carry=carry/256>>>0;if(0!==carry)throw Error("Non-zero carry");length=i$12;psz++}if(" "!==source[psz]){for(source=size-length;source!==size&&0===b256[source];)source++;psz=Buffer.allocUnsafe(zeroes+(size-source));for(psz.fill(0,0,zeroes);source!==size;)psz[zeroes++]=b256[source++];return psz}}}if(255<=ALPHABET.length)throw new TypeError("Alphabet too long");
var BASE_MAP=new Uint8Array(256);BASE_MAP.fill(255);for(var i=0;i<ALPHABET.length;i++){var x=ALPHABET.charAt(i),xc=x.charCodeAt(0);if(255!==BASE_MAP[xc])throw new TypeError(x+" is ambiguous");BASE_MAP[xc]=i}var BASE=ALPHABET.length,LEADER=ALPHABET.charAt(0),FACTOR=Math.log(BASE)/Math.log(256),iFACTOR=Math.log(256)/Math.log(BASE);return{encode:function(source){if(!Buffer.isBuffer(source))throw new TypeError("Expected Buffer");if(0===source.length)return"";for(var zeroes=0,length=0,pbegin=0,pend=source.length;pbegin!==
pend&&0===source[pbegin];)pbegin++,zeroes++;for(var size=(pend-pbegin)*iFACTOR+1>>>0,b58=new Uint8Array(size);pbegin!==pend;){for(var carry=source[pbegin],i$10=0,it$11=size-1;(0!==carry||i$10<length)&&-1!==it$11;it$11--,i$10++)carry+=256*b58[it$11]>>>0,b58[it$11]=carry%BASE>>>0,carry=carry/BASE>>>0;if(0!==carry)throw Error("Non-zero carry");length=i$10;pbegin++}for(source=size-length;source!==size&&0===b58[source];)source++;for(zeroes=LEADER.repeat(zeroes);source<size;++source)zeroes+=ALPHABET.charAt(b58[source]);
return zeroes},decodeUnsafe:decodeUnsafe,decode:function(string){if(string=decodeUnsafe(string))return string;throw Error("Non-base"+BASE+" character");}}}}
//# sourceMappingURL=module$node_modules$base_x$index.js.map
