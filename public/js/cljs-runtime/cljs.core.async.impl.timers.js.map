{"version":3,"sources":["cljs/core/async/impl/timers.cljs"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.timers\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.channels :as channels]\n            [cljs.core.async.impl.dispatch :as dispatch]))\n\n(def MAX_LEVEL 15) ;; 16 levels\n(def P (/ 1 2))\n\n(defn random-level\n  ([] (random-level 0))\n  ([level]\n    (if (and (< (.random js/Math) P)\n             (< level MAX_LEVEL))\n      (recur (inc level))\n      level)))\n\n(deftype SkipListNode [key ^:mutable val forward]\n  ISeqable\n  (-seq [coll]\n    (list key val))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (pr-sequential-writer writer pr-writer \"[\" \" \" \"]\" opts coll)))\n\n(defn skip-list-node\n  ([level] (skip-list-node nil nil level))\n  ([k v level]\n    (let [arr (make-array (inc level))]\n      (loop [i 0]\n        (when (< i (alength arr))\n          (aset arr i nil)\n          (recur (inc i))))\n      (SkipListNode. k v arr))))\n\n(defn least-greater-node\n  ([x k level] (least-greater-node x k level nil))\n  ([x k level update]\n    (if-not (neg? level)\n      (let [x (loop [x x]\n                (if-let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                  (if (< (.-key x') k)\n                    (recur x')\n                    x)\n                  x))]\n        (when-not (nil? update)\n          (aset update level x))\n        (recur x k (dec level) update))\n      x)))\n\n(deftype SkipList [header ^:mutable level]\n  Object\n  (put [coll k v]\n    (let [update (make-array MAX_LEVEL)\n          x (least-greater-node header k level update)\n          x (aget (.-forward x) 0)]\n      (if (and (not (nil? x)) (== (.-key x) k))\n        (set! (.-val x) v)\n        (let [new-level (random-level)]\n          (when (> new-level level)\n            (loop [i (inc level)]\n              (when (<= i (inc new-level))\n                (aset update i header)\n                (recur (inc i))))\n            (set! level new-level))\n          (let [x (skip-list-node k v (make-array new-level))]\n            (loop [i 0]\n              (when (<= i level)\n                (let [links (.-forward (aget update i))]\n                  (aset (.-forward x) i (aget links i))\n                  (aset links i x)))))))))\n\n  (remove [coll k]\n    (let [update (make-array MAX_LEVEL)\n          x (least-greater-node header k level update)\n          x (when-not (zero? (alength (.-forward x)))\n              (aget (.-forward x) 0))]\n      (when (and (not (nil? x)) (== (.-key x) k))\n        (loop [i 0]\n          (when (<= i level)\n            (let [links (.-forward (aget update i))]\n              (if (identical? x (when (< i (alength links))\n                                  (aget links i)))\n                (do\n                  (aset links i (aget (.-forward x) i))\n                  (recur (inc i)))\n                (recur (inc i))))))\n        (while (and (< 0 level (alength (.-forward header)))\n                    (nil? (aget (.-forward header) level)))\n          (set! level (dec level))))))\n\n  (ceilingEntry [coll k]\n    (loop [x header level level]\n      (if-not (neg? level)\n        (let [nx (loop [x x]\n                   (let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                     (when-not (nil? x')\n                       (if (>= (.-key x') k)\n                         x'\n                         (recur x')))))]\n          (if-not (nil? nx)\n            (recur nx (dec level))\n            (recur x (dec level))))\n        (when-not (identical? x header)\n          x))))\n  \n  (floorEntry [coll k]\n    (loop [x header level level]\n      (if-not (neg? level)\n        (let [nx (loop [x x]\n                   (let [x' (when (< level (alength (.-forward x)))\n                              (aget (.-forward x) level))]\n                     (if-not (nil? x')\n                       (if (> (.-key x') k)\n                         x\n                         (recur x'))\n                       (when (zero? level)\n                         x))))]\n          (if nx\n            (recur nx (dec level))\n            (recur x (dec level))))\n        (when-not (identical? x header)\n          x))))\n\n  ISeqable\n  (-seq [coll]\n    (letfn [(iter [node]\n              (lazy-seq\n                (when-not (nil? node)\n                  (cons [(.-key node) (.-val node)]\n                    (iter (aget (.-forward node) 0))))))]\n      (iter (aget (.-forward header) 0))))\n\n  IPrintWithWriter\n  (-pr-writer [coll writer opts]\n    (let [pr-pair (fn [keyval]\n                    (pr-sequential-writer writer pr-writer \"\" \" \" \"\" opts keyval))]\n      (pr-sequential-writer writer pr-pair \"{\" \", \" \"}\" opts coll))))\n\n(defn skip-list []\n  (SkipList. (skip-list-node 0) 0))\n\n(def timeouts-map (skip-list))\n\n(def TIMEOUT_RESOLUTION_MS 10)\n\n(defn timeout\n  \"returns a channel that will close after msecs\"\n  [msecs]\n  (let [timeout (+ (.valueOf (js/Date.)) msecs)\n        me (.ceilingEntry timeouts-map timeout)]\n    (or (when (and me (< (.-key me) (+ timeout TIMEOUT_RESOLUTION_MS)))\n          (.-val me))\n        (let [timeout-channel (channels/chan nil)]\n          (.put timeouts-map timeout timeout-channel)\n          (dispatch/queue-delay\n            (fn []\n              (.remove timeouts-map timeout)\n              (impl/close! timeout-channel))\n            msecs)\n          timeout-channel))))\n\n"],"mappings":"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","names":["cljs.core.async.impl.timers/MAX_LEVEL","cljs.core.async.impl.timers/P","G__18834","cljs.core.async.impl.timers/random-level","js/Error","cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$1","js/Math","level","cljs.core/-write","writer__4291__auto__","cljs.core.async.impl.timers/SkipListNode","cljs.core.async.impl.timers/->SkipListNode","key","val","forward","cljs.core/List","cljs.core/pr-sequential-writer","writer","cljs.core/pr-writer","opts","coll","G__18840","cljs.core.async.impl.timers/skip-list-node","cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$3","js/Array","i","arr","k","v","G__18843","cljs.core.async.impl.timers/least-greater-node","cljs.core.async.impl.timers.least_greater_node.cljs$core$IFn$_invoke$arity$4","x","temp__5455__auto__","x'","update","cljs.core.async.impl.timers/SkipList","cljs.core.async.impl.timers/->SkipList","header","cljs.core.async.impl.timers.random_level.cljs$core$IFn$_invoke$arity$0","new-level","links","nx","cljs.core/LazySeq","node","cljs.core/cons","iter","keyval","pr-pair","cljs.core.async.impl.timers/skip-list","cljs.core.async.impl.timers.skip_list_node.cljs$core$IFn$_invoke$arity$1","cljs.core.async.impl.timers/timeouts-map","cljs.core.async.impl.timers/TIMEOUT_RESOLUTION_MS","cljs.core.async.impl.timers/timeout","js/Date","msecs","timeout","or__4047__auto__","and__4036__auto__","me","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$1","timeout-channel","cljs.core.async.impl.dispatch/queue-delay","cljs.core.async.impl.protocols/close!"]}