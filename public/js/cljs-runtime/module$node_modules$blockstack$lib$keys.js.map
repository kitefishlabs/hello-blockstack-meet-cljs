{
"version":3,
"file":"module$node_modules$blockstack$lib$keys.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAezHC,QAASA,WAAU,CAACC,aAAD,CAAgB,CAC5BA,aAAL,GACEA,aADF,CACkB,EADlB,CAGA,OAAO,CAAC,CAAA,CAAGC,OAAAC,YAAJ,EAAyBF,aAAzB,CAJ0B,CAZnCG,MAAAC,eAAA,CAAsBP,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CQ,MAAO,CAAA,CADoC,CAA7C,CAGAR,QAAAE,WAAA,CAAqBA,UACrBF,QAAAS,iBAAA,CAeAA,QAAyB,EAAG,CAE1B,MAAOC,CADOC,IAAIC,aAAAC,OAAAC,WAAJH,CAAoC,CAAEI,IAAKb,UAAP,CAApCS,CACPD,YAAAM,SAAA,CAA4B,KAA5B,CAFmB,CAd5BhB,QAAAiB,mBAAA,CAmBAA,QAA2B,CAACC,SAAD,CAAY,CACjCC,SAAAA,CAAkBC,mBAAAC,KAAA,CAAYH,SAAZ;AAAuB,KAAvB,CAClBI,UAAAA,CAAmBV,aAAAW,OAAAC,QAAA,CAA6BL,SAA7B,CAEvB,OADcP,cAAAa,QAAAC,cAAAD,CAAoCH,SAApCG,CAAsD,CAAtDA,CAHuB,CAlBvCzB,QAAA2B,wBAAA,CAyBAA,QAAgC,CAACjB,UAAD,CAAa,CAE3C,MADcE,cAAAC,OAAAe,eAAAjB,CAAoCS,mBAAAC,KAAA,CAAYX,UAAZ,CAAwB,KAAxB,CAApCC,CACPO,UAAAF,SAAA,CAA2B,KAA3B,CAFoC,CAvB7C,KAAIZ,QAAUN,OAAA,CAAQ,6CAAR,CAAd,CAEIc,cAAgBd,OAAA,CAAQ,6CAAR,CAbqG;",
"sources":["node_modules/blockstack/lib/keys.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockstack$lib$keys\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEntropy = getEntropy;\nexports.makeECPrivateKey = makeECPrivateKey;\nexports.publicKeyToAddress = publicKeyToAddress;\nexports.getPublicKeyFromPrivate = getPublicKeyFromPrivate;\n\nvar _crypto = require('crypto');\n\nvar _bitcoinjsLib = require('bitcoinjs-lib');\n\nfunction getEntropy(numberOfBytes) {\n  if (!numberOfBytes) {\n    numberOfBytes = 32;\n  }\n  return (0, _crypto.randomBytes)(numberOfBytes);\n}\n\nfunction makeECPrivateKey() {\n  var keyPair = new _bitcoinjsLib.ECPair.makeRandom({ rng: getEntropy });\n  return keyPair.privateKey.toString('hex');\n}\n\nfunction publicKeyToAddress(publicKey) {\n  var publicKeyBuffer = Buffer.from(publicKey, 'hex');\n  var publicKeyHash160 = _bitcoinjsLib.crypto.hash160(publicKeyBuffer);\n  var address = _bitcoinjsLib.address.toBase58Check(publicKeyHash160, 0x00);\n  return address;\n}\n\nfunction getPublicKeyFromPrivate(privateKey) {\n  var keyPair = _bitcoinjsLib.ECPair.fromPrivateKey(Buffer.from(privateKey, 'hex'));\n  return keyPair.publicKey.toString('hex');\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","getEntropy","numberOfBytes","_crypto","randomBytes","Object","defineProperty","value","makeECPrivateKey","privateKey","keyPair","_bitcoinjsLib","ECPair","makeRandom","rng","toString","publicKeyToAddress","publicKey","publicKeyBuffer","Buffer","from","publicKeyHash160","crypto","hash160","address","toBase58Check","getPublicKeyFromPrivate","fromPrivateKey"]
}
