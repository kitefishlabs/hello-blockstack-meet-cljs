shadow$provide.module$node_modules$bigi$lib$convert=function(global,process,require,module,exports,shadow$shims){var assert=require("module$node_modules$assert$assert"),BigInteger=require("module$node_modules$bigi$lib$bigi");BigInteger.fromByteArrayUnsigned=function(byteArray){return byteArray[0]&128?new BigInteger([0].concat(byteArray)):new BigInteger(byteArray)};BigInteger.prototype.toByteArrayUnsigned=function(){var byteArray=this.toByteArray();return 0===byteArray[0]?byteArray.slice(1):byteArray};
BigInteger.fromDERInteger=function(byteArray){return new BigInteger(byteArray)};BigInteger.prototype.toDERInteger=BigInteger.prototype.toByteArray;BigInteger.fromBuffer=function(buffer){return buffer[0]&128?(buffer=Array.prototype.slice.call(buffer),new BigInteger([0].concat(buffer))):new BigInteger(buffer)};BigInteger.fromHex=function(hex){if(""===hex)return BigInteger.ZERO;assert.equal(hex,hex.match(/^[A-Fa-f0-9]+/),"Invalid hex string");assert.equal(hex.length%2,0,"Incomplete hex");return new BigInteger(hex,
16)};BigInteger.prototype.toBuffer=function(size){var byteArray=this.toByteArrayUnsigned(),zeros=[];for(size-=byteArray.length;zeros.length<size;)zeros.push(0);return new shadow$shims.Buffer(zeros.concat(byteArray))};BigInteger.prototype.toHex=function(size){return this.toBuffer(size).toString("hex")}}
//# sourceMappingURL=module$node_modules$bigi$lib$convert.js.map
