{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$eddsa$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/elliptic/lib/elliptic/eddsa/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$eddsa$index\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar hash = require('hash.js');\nvar elliptic = require('../../elliptic');\nvar utils = elliptic.utils;\nvar assert = utils.assert;\nvar parseBytes = utils.parseBytes;\nvar KeyPair = require('./key');\nvar Signature = require('./signature');\n\nfunction EDDSA(curve) {\n  assert(curve === 'ed25519', 'only tested with ed25519 so far');\n\n  if (!(this instanceof EDDSA))\n    return new EDDSA(curve);\n\n  var curve = elliptic.curves[curve].curve;\n  this.curve = curve;\n  this.g = curve.g;\n  this.g.precompute(curve.n.bitLength() + 1);\n\n  this.pointClass = curve.point().constructor;\n  this.encodingLength = Math.ceil(curve.n.bitLength() / 8);\n  this.hash = hash.sha512;\n}\n\nmodule.exports = EDDSA;\n\n/**\n* @param {Array|String} message - message bytes\n* @param {Array|String|KeyPair} secret - secret bytes or a keypair\n* @returns {Signature} - signature\n*/\nEDDSA.prototype.sign = function sign(message, secret) {\n  message = parseBytes(message);\n  var key = this.keyFromSecret(secret);\n  var r = this.hashInt(key.messagePrefix(), message);\n  var R = this.g.mul(r);\n  var Rencoded = this.encodePoint(R);\n  var s_ = this.hashInt(Rencoded, key.pubBytes(), message)\n               .mul(key.priv());\n  var S = r.add(s_).umod(this.curve.n);\n  return this.makeSignature({ R: R, S: S, Rencoded: Rencoded });\n};\n\n/**\n* @param {Array} message - message bytes\n* @param {Array|String|Signature} sig - sig bytes\n* @param {Array|String|Point|KeyPair} pub - public key\n* @returns {Boolean} - true if public key matches sig of message\n*/\nEDDSA.prototype.verify = function verify(message, sig, pub) {\n  message = parseBytes(message);\n  sig = this.makeSignature(sig);\n  var key = this.keyFromPublic(pub);\n  var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);\n  var SG = this.g.mul(sig.S());\n  var RplusAh = sig.R().add(key.pub().mul(h));\n  return RplusAh.eq(SG);\n};\n\nEDDSA.prototype.hashInt = function hashInt() {\n  var hash = this.hash();\n  for (var i = 0; i < arguments.length; i++)\n    hash.update(arguments[i]);\n  return utils.intFromLE(hash.digest()).umod(this.curve.n);\n};\n\nEDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {\n  return KeyPair.fromPublic(this, pub);\n};\n\nEDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {\n  return KeyPair.fromSecret(this, secret);\n};\n\nEDDSA.prototype.makeSignature = function makeSignature(sig) {\n  if (sig instanceof Signature)\n    return sig;\n  return new Signature(this, sig);\n};\n\n/**\n* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2\n*\n* EDDSA defines methods for encoding and decoding points and integers. These are\n* helper convenience methods, that pass along to utility functions implied\n* parameters.\n*\n*/\nEDDSA.prototype.encodePoint = function encodePoint(point) {\n  var enc = point.getY().toArray('le', this.encodingLength);\n  enc[this.encodingLength - 1] |= point.getX().isOdd() ? 0x80 : 0;\n  return enc;\n};\n\nEDDSA.prototype.decodePoint = function decodePoint(bytes) {\n  bytes = utils.parseBytes(bytes);\n\n  var lastIx = bytes.length - 1;\n  var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & ~0x80);\n  var xIsOdd = (bytes[lastIx] & 0x80) !== 0;\n\n  var y = utils.intFromLE(normed);\n  return this.curve.pointFromY(y, xIsOdd);\n};\n\nEDDSA.prototype.encodeInt = function encodeInt(num) {\n  return num.toArray('le', this.encodingLength);\n};\n\nEDDSA.prototype.decodeInt = function decodeInt(bytes) {\n  return utils.intFromLE(bytes);\n};\n\nEDDSA.prototype.isPoint = function isPoint(val) {\n  return val instanceof this.pointClass;\n};\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","EDDSA","curve","assert","elliptic","curves","g","precompute","n","bitLength","pointClass","point","constructor","encodingLength","Math","ceil","hash","sha512","utils","parseBytes","KeyPair","Signature","prototype","sign","EDDSA.prototype.sign","message","secret","key","keyFromSecret","r","hashInt","messagePrefix","R","mul","Rencoded","encodePoint","s_","pubBytes","priv","S","add","umod","makeSignature","verify","EDDSA.prototype.verify","sig","pub","keyFromPublic","h","SG","RplusAh","eq","EDDSA.prototype.hashInt","i","arguments","length","update","intFromLE","digest","EDDSA.prototype.keyFromPublic","fromPublic","EDDSA.prototype.keyFromSecret","fromSecret","EDDSA.prototype.makeSignature","EDDSA.prototype.encodePoint","enc","getY","toArray","getX","isOdd","decodePoint","EDDSA.prototype.decodePoint","bytes","lastIx","normed","slice","concat","xIsOdd","y","pointFromY","encodeInt","EDDSA.prototype.encodeInt","num","decodeInt","EDDSA.prototype.decodeInt","isPoint","EDDSA.prototype.isPoint","val"]
}
