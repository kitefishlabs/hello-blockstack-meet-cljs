{
"version":3,
"file":"module$node_modules$hmac_drbg$lib$hmac_drbg.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/hmac-drbg/lib/hmac-drbg.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$hmac_drbg$lib$hmac_drbg\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar hash = require('hash.js');\nvar utils = require('minimalistic-crypto-utils');\nvar assert = require('minimalistic-assert');\n\nfunction HmacDRBG(options) {\n  if (!(this instanceof HmacDRBG))\n    return new HmacDRBG(options);\n  this.hash = options.hash;\n  this.predResist = !!options.predResist;\n\n  this.outLen = this.hash.outSize;\n  this.minEntropy = options.minEntropy || this.hash.hmacStrength;\n\n  this._reseed = null;\n  this.reseedInterval = null;\n  this.K = null;\n  this.V = null;\n\n  var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');\n  var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');\n  var pers = utils.toArray(options.pers, options.persEnc || 'hex');\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n  this._init(entropy, nonce, pers);\n}\nmodule.exports = HmacDRBG;\n\nHmacDRBG.prototype._init = function init(entropy, nonce, pers) {\n  var seed = entropy.concat(nonce).concat(pers);\n\n  this.K = new Array(this.outLen / 8);\n  this.V = new Array(this.outLen / 8);\n  for (var i = 0; i < this.V.length; i++) {\n    this.K[i] = 0x00;\n    this.V[i] = 0x01;\n  }\n\n  this._update(seed);\n  this._reseed = 1;\n  this.reseedInterval = 0x1000000000000;  // 2^48\n};\n\nHmacDRBG.prototype._hmac = function hmac() {\n  return new hash.hmac(this.hash, this.K);\n};\n\nHmacDRBG.prototype._update = function update(seed) {\n  var kmac = this._hmac()\n                 .update(this.V)\n                 .update([ 0x00 ]);\n  if (seed)\n    kmac = kmac.update(seed);\n  this.K = kmac.digest();\n  this.V = this._hmac().update(this.V).digest();\n  if (!seed)\n    return;\n\n  this.K = this._hmac()\n               .update(this.V)\n               .update([ 0x01 ])\n               .update(seed)\n               .digest();\n  this.V = this._hmac().update(this.V).digest();\n};\n\nHmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {\n  // Optional entropy enc\n  if (typeof entropyEnc !== 'string') {\n    addEnc = add;\n    add = entropyEnc;\n    entropyEnc = null;\n  }\n\n  entropy = utils.toArray(entropy, entropyEnc);\n  add = utils.toArray(add, addEnc);\n\n  assert(entropy.length >= (this.minEntropy / 8),\n         'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');\n\n  this._update(entropy.concat(add || []));\n  this._reseed = 1;\n};\n\nHmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {\n  if (this._reseed > this.reseedInterval)\n    throw new Error('Reseed is required');\n\n  // Optional encoding\n  if (typeof enc !== 'string') {\n    addEnc = add;\n    add = enc;\n    enc = null;\n  }\n\n  // Optional additional data\n  if (add) {\n    add = utils.toArray(add, addEnc || 'hex');\n    this._update(add);\n  }\n\n  var temp = [];\n  while (temp.length < len) {\n    this.V = this._hmac().update(this.V).digest();\n    temp = temp.concat(this.V);\n  }\n\n  var res = temp.slice(0, len);\n  this._update(add);\n  this._reseed++;\n  return utils.encode(res, enc);\n};\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","HmacDRBG","options","hash","predResist","outLen","outSize","minEntropy","hmacStrength","V","K","reseedInterval","_reseed","entropy","utils","toArray","entropyEnc","nonce","nonceEnc","pers","persEnc","assert","length","_init","prototype","HmacDRBG.prototype._init","seed","concat","Array","i","_update","_hmac","HmacDRBG.prototype._hmac","hmac","HmacDRBG.prototype._update","kmac","update","digest","reseed","HmacDRBG.prototype.reseed","add","addEnc","generate","HmacDRBG.prototype.generate","len","enc","Error","temp","res","slice","encode"]
}
