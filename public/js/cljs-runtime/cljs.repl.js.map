{"version":3,"sources":["cljs/repl.cljs"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.repl\n  (:require-macros cljs.repl)\n  (:require [cljs.spec.alpha :as spec]))\n\n(defn print-doc [{n :ns nm :name :as m}]\n  (println \"-------------------------\")\n  (println (or (:spec m) (str (when-let [ns (:ns m)] (str ns \"/\")) (:name m))))\n  (when (:protocol m)\n    (println \"Protocol\"))\n  (cond\n    (:forms m) (doseq [f (:forms m)]\n                 (println \"  \" f))\n    (:arglists m) (let [arglists (:arglists m)]\n                    (if (or (:macro m)\n                         (:repl-special-function m))\n                     (prn arglists)\n                     (prn\n                       (if (= 'quote (first arglists))\n                         (second arglists)\n                         arglists)))))\n  (if (:special-form m)\n    (do\n      (println \"Special Form\")\n      (println \" \" (:doc m))\n      (if (contains? m :url)\n        (when (:url m)\n          (println (str \"\\n  Please see http://clojure.org/\" (:url m))))\n        (println (str \"\\n  Please see http://clojure.org/special_forms#\"\n                   (:name m)))))\n    (do\n      (when (:macro m)\n        (println \"Macro\"))\n      (when (:spec m)\n        (println \"Spec\"))\n      (when (:repl-special-function m)\n        (println \"REPL Special Function\"))\n      (println \" \" (:doc m))\n      (when (:protocol m)\n        (doseq [[name {:keys [doc arglists]}] (:methods m)]\n          (println)\n          (println \" \" name)\n          (println \" \" arglists)\n          (when doc\n            (println \" \" doc))))\n      (when n\n        (when-let [fnspec (spec/get-spec (symbol (str (ns-name n)) (name nm)))]\n          (print \"Spec\")\n          (doseq [role [:args :ret :fn]]\n            (when-let [spec (get fnspec role)]\n              (print (str \"\\n \" (name role) \":\") (spec/describe spec)))))))))\n"],"mappings":"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","names":["p__17087","map__17089","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.repl/print-doc","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic","or__4047__auto__","m","temp__5457__auto__","ns","cljs.core/seq","i__17098","count__17097","chunk__17096","seq__17095","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","cljs.core/next","f","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","arglists","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/second","cljs.core/contains?","i__17109","count__17108","chunk__17107","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__17114","map__17117","seq__17106","vec__17127","map__17130","cljs.core/println","name","doc","n","cljs.spec.alpha/get-spec","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","cljs.core/ns-name","cljs.core/name","nm","cljs.core.print.cljs$core$IFn$_invoke$arity$variadic","i__17144","count__17143","chunk__17142","seq__17141","fnspec","role","cljs.spec.alpha/describe","spec"]}