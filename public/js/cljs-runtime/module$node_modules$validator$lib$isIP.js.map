{
"version":3,
"file":"module$node_modules$validator$lib$isIP.js",
"lineCount":3,
"mappings":"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",
"sources":["node_modules/validator/lib/isIP.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$validator$lib$isIP\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isIP;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar ipv4Maybe = /^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$/;\nvar ipv6Block = /^[0-9A-F]{1,4}$/i;\n\nfunction isIP(str) {\n  var version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n\n  (0, _assertString2.default)(str);\n  version = String(version);\n  if (!version) {\n    return isIP(str, 4) || isIP(str, 6);\n  } else if (version === '4') {\n    if (!ipv4Maybe.test(str)) {\n      return false;\n    }\n    var parts = str.split('.').sort(function (a, b) {\n      return a - b;\n    });\n    return parts[3] <= 255;\n  } else if (version === '6') {\n    var blocks = str.split(':');\n    var foundOmissionBlock = false; // marker to indicate ::\n\n    // At least some OS accept the last 32 bits of an IPv6 address\n    // (i.e. 2 of the blocks) in IPv4 notation, and RFC 3493 says\n    // that '::ffff:a.b.c.d' is valid for IPv4-mapped IPv6 addresses,\n    // and '::a.b.c.d' is deprecated, but also valid.\n    var foundIPv4TransitionBlock = isIP(blocks[blocks.length - 1], 4);\n    var expectedNumberOfBlocks = foundIPv4TransitionBlock ? 7 : 8;\n\n    if (blocks.length > expectedNumberOfBlocks) {\n      return false;\n    }\n    // initial or final ::\n    if (str === '::') {\n      return true;\n    } else if (str.substr(0, 2) === '::') {\n      blocks.shift();\n      blocks.shift();\n      foundOmissionBlock = true;\n    } else if (str.substr(str.length - 2) === '::') {\n      blocks.pop();\n      blocks.pop();\n      foundOmissionBlock = true;\n    }\n\n    for (var i = 0; i < blocks.length; ++i) {\n      // test for a :: which can not be at the string start/end\n      // since those cases have been handled above\n      if (blocks[i] === '' && i > 0 && i < blocks.length - 1) {\n        if (foundOmissionBlock) {\n          return false; // multiple :: in address\n        }\n        foundOmissionBlock = true;\n      } else if (foundIPv4TransitionBlock && i === blocks.length - 1) {\n        // it has been checked before that the last\n        // block is a valid IPv4 address\n      } else if (!ipv6Block.test(blocks[i])) {\n        return false;\n      }\n    }\n    if (foundOmissionBlock) {\n      return blocks.length >= 1;\n    }\n    return blocks.length === expectedNumberOfBlocks;\n  }\n  return false;\n}\nmodule.exports = exports['default'];\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","isIP","str","version","arguments","length","undefined","_assertString2","default","String","ipv4Maybe","test","split","sort","parts","a","b","blocks","foundOmissionBlock","foundIPv4TransitionBlock","expectedNumberOfBlocks","substr","shift","pop","i","ipv6Block","Object","defineProperty","value","_assertString","__esModule"]
}
