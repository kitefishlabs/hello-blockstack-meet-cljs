{
"version":3,
"file":"module$node_modules$triplesec$lib$sha3.js",
"lineCount":12,
"mappings":"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",
"sources":["node_modules/triplesec/lib/sha3.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$triplesec$lib$sha3\"] = function(global,process,require,module,exports,shadow$shims) {\n// Generated by IcedCoffeeScript 108.0.8\n(function() {\n  var Global, Hasher, SHA3, WordArray, X64Word, X64WordArray, glbl, _ref,\n    __hasProp = {}.hasOwnProperty,\n    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };\n\n  _ref = require('./wordarray'), WordArray = _ref.WordArray, X64Word = _ref.X64Word, X64WordArray = _ref.X64WordArray;\n\n  Hasher = require('./algbase').Hasher;\n\n  Global = (function() {\n    function Global() {\n      this.RHO_OFFSETS = [];\n      this.PI_INDEXES = [];\n      this.ROUND_CONSTANTS = [];\n      this.T = [];\n      this.compute_rho_offsets();\n      this.compute_pi_indexes();\n      this.compute_round_constants();\n      this.make_reusables();\n    }\n\n    Global.prototype.compute_rho_offsets = function() {\n      var newX, newY, t, x, y, _i, _results;\n      x = 1;\n      y = 0;\n      _results = [];\n      for (t = _i = 0; _i < 24; t = ++_i) {\n        this.RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;\n        newX = y % 5;\n        newY = (2 * x + 3 * y) % 5;\n        x = newX;\n        _results.push(y = newY);\n      }\n      return _results;\n    };\n\n    Global.prototype.compute_pi_indexes = function() {\n      var x, y, _i, _results;\n      _results = [];\n      for (x = _i = 0; _i < 5; x = ++_i) {\n        _results.push((function() {\n          var _j, _results1;\n          _results1 = [];\n          for (y = _j = 0; _j < 5; y = ++_j) {\n            _results1.push(this.PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5);\n          }\n          return _results1;\n        }).call(this));\n      }\n      return _results;\n    };\n\n    Global.prototype.compute_round_constants = function() {\n      var LFSR, bitPosition, i, j, roundConstantLsw, roundConstantMsw, _i, _j, _results;\n      LFSR = 0x01;\n      _results = [];\n      for (i = _i = 0; _i < 24; i = ++_i) {\n        roundConstantMsw = 0;\n        roundConstantLsw = 0;\n        for (j = _j = 0; _j < 7; j = ++_j) {\n          if (LFSR & 0x01) {\n            bitPosition = (1 << j) - 1;\n            if (bitPosition < 32) {\n              roundConstantLsw ^= 1 << bitPosition;\n            } else {\n              roundConstantMsw ^= 1 << (bitPosition - 32);\n            }\n          }\n          if (LFSR & 0x80) {\n            LFSR = (LFSR << 1) ^ 0x71;\n          } else {\n            LFSR <<= 1;\n          }\n        }\n        _results.push(this.ROUND_CONSTANTS[i] = new X64Word(roundConstantMsw, roundConstantLsw));\n      }\n      return _results;\n    };\n\n    Global.prototype.make_reusables = function() {\n      var i;\n      return this.T = (function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; _i < 25; i = ++_i) {\n          _results.push(new X64Word(0, 0));\n        }\n        return _results;\n      })();\n    };\n\n    return Global;\n\n  })();\n\n  glbl = new Global();\n\n  exports.SHA3 = SHA3 = (function(_super) {\n    __extends(SHA3, _super);\n\n    function SHA3() {\n      return SHA3.__super__.constructor.apply(this, arguments);\n    }\n\n    SHA3.outputLength = 512;\n\n    SHA3.prototype.outputLength = SHA3.outputLength;\n\n    SHA3.blockSize = (1600 - 2 * SHA3.outputLength) / 32;\n\n    SHA3.prototype.blockSize = SHA3.blockSize;\n\n    SHA3.output_size = SHA3.outputLength / 8;\n\n    SHA3.prototype.output_size = SHA3.output_size;\n\n    SHA3.prototype._doReset = function() {\n      var i;\n      return this._state = (function() {\n        var _i, _results;\n        _results = [];\n        for (i = _i = 0; _i < 25; i = ++_i) {\n          _results.push(new X64Word(0, 0));\n        }\n        return _results;\n      })();\n    };\n\n    SHA3.prototype._doProcessBlock = function(M, offset) {\n      var G, M2i, M2i1, T0, TLane, TPiLane, Tx, Tx1, Tx1Lane, Tx1Lsw, Tx1Msw, Tx2Lane, Tx4, i, lane, laneIndex, laneLsw, laneMsw, nBlockSizeLanes, rhoOffset, round, roundConstant, state, state0, tLsw, tMsw, x, y, _i, _j, _k, _l, _m, _n, _o, _p, _q, _results;\n      G = glbl;\n      state = this._state;\n      nBlockSizeLanes = this.blockSize / 2;\n      for (i = _i = 0; 0 <= nBlockSizeLanes ? _i < nBlockSizeLanes : _i > nBlockSizeLanes; i = 0 <= nBlockSizeLanes ? ++_i : --_i) {\n        M2i = M[offset + 2 * i];\n        M2i1 = M[offset + 2 * i + 1];\n        M2i = (((M2i << 8) | (M2i >>> 24)) & 0x00ff00ff) | (((M2i << 24) | (M2i >>> 8)) & 0xff00ff00);\n        M2i1 = (((M2i1 << 8) | (M2i1 >>> 24)) & 0x00ff00ff) | (((M2i1 << 24) | (M2i1 >>> 8)) & 0xff00ff00);\n        lane = state[i];\n        lane.high ^= M2i1;\n        lane.low ^= M2i;\n      }\n      _results = [];\n      for (round = _j = 0; _j < 24; round = ++_j) {\n        for (x = _k = 0; _k < 5; x = ++_k) {\n          tMsw = tLsw = 0;\n          for (y = _l = 0; _l < 5; y = ++_l) {\n            lane = state[x + 5 * y];\n            tMsw ^= lane.high;\n            tLsw ^= lane.low;\n          }\n          Tx = G.T[x];\n          Tx.high = tMsw;\n          Tx.low = tLsw;\n        }\n        for (x = _m = 0; _m < 5; x = ++_m) {\n          Tx4 = G.T[(x + 4) % 5];\n          Tx1 = G.T[(x + 1) % 5];\n          Tx1Msw = Tx1.high;\n          Tx1Lsw = Tx1.low;\n          tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));\n          tLsw = Tx4.low ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));\n          for (y = _n = 0; _n < 5; y = ++_n) {\n            lane = state[x + 5 * y];\n            lane.high ^= tMsw;\n            lane.low ^= tLsw;\n          }\n        }\n        for (laneIndex = _o = 1; _o < 25; laneIndex = ++_o) {\n          lane = state[laneIndex];\n          laneMsw = lane.high;\n          laneLsw = lane.low;\n          rhoOffset = G.RHO_OFFSETS[laneIndex];\n          if (rhoOffset < 32) {\n            tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));\n            tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));\n          } else {\n            tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));\n            tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));\n          }\n          TPiLane = G.T[G.PI_INDEXES[laneIndex]];\n          TPiLane.high = tMsw;\n          TPiLane.low = tLsw;\n        }\n        T0 = G.T[0];\n        state0 = state[0];\n        T0.high = state0.high;\n        T0.low = state0.low;\n        for (x = _p = 0; _p < 5; x = ++_p) {\n          for (y = _q = 0; _q < 5; y = ++_q) {\n            laneIndex = x + 5 * y;\n            lane = state[laneIndex];\n            TLane = G.T[laneIndex];\n            Tx1Lane = G.T[((x + 1) % 5) + 5 * y];\n            Tx2Lane = G.T[((x + 2) % 5) + 5 * y];\n            lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);\n            lane.low = TLane.low ^ (~Tx1Lane.low & Tx2Lane.low);\n          }\n        }\n        lane = state[0];\n        roundConstant = G.ROUND_CONSTANTS[round];\n        lane.high ^= roundConstant.high;\n        _results.push(lane.low ^= roundConstant.low);\n      }\n      return _results;\n    };\n\n    SHA3.prototype._doFinalize = function() {\n      var blockSizeBits, data, dataWords, hashWords, i, lane, laneLsw, laneMsw, nBitsLeft, nBitsTotal, outputLengthBytes, outputLengthLanes, state, _i;\n      data = this._data;\n      dataWords = data.words;\n      nBitsTotal = this._nDataBytes * 8;\n      nBitsLeft = data.sigBytes * 8;\n      blockSizeBits = this.blockSize * 32;\n      dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);\n      dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;\n      data.sigBytes = dataWords.length * 4;\n      this._process();\n      state = this._state;\n      outputLengthBytes = this.outputLength / 8;\n      outputLengthLanes = outputLengthBytes / 8;\n      hashWords = [];\n      for (i = _i = 0; 0 <= outputLengthLanes ? _i < outputLengthLanes : _i > outputLengthLanes; i = 0 <= outputLengthLanes ? ++_i : --_i) {\n        lane = state[i];\n        laneMsw = lane.high;\n        laneLsw = lane.low;\n        laneMsw = (((laneMsw << 8) | (laneMsw >>> 24)) & 0x00ff00ff) | (((laneMsw << 24) | (laneMsw >>> 8)) & 0xff00ff00);\n        laneLsw = (((laneLsw << 8) | (laneLsw >>> 24)) & 0x00ff00ff) | (((laneLsw << 24) | (laneLsw >>> 8)) & 0xff00ff00);\n        hashWords.push(laneLsw);\n        hashWords.push(laneMsw);\n      }\n      return new WordArray(hashWords, outputLengthBytes);\n    };\n\n    SHA3.prototype.copy_to = function(obj) {\n      var s;\n      SHA3.__super__.copy_to.call(this, obj);\n      return obj._state = (function() {\n        var _i, _len, _ref1, _results;\n        _ref1 = this._state;\n        _results = [];\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          s = _ref1[_i];\n          _results.push(s.clone());\n        }\n        return _results;\n      }).call(this);\n    };\n\n    SHA3.prototype.scrub = function() {};\n\n    SHA3.prototype.clone = function() {\n      var out;\n      out = new SHA3();\n      this.copy_to(out);\n      return out;\n    };\n\n    return SHA3;\n\n  })(Hasher);\n\n  exports.transform = function(x) {\n    var out;\n    out = (new SHA3).finalize(x);\n    x.scrub();\n    return out;\n  };\n\n}).call(this);\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","SHA3","__hasProp","hasOwnProperty","__extends","child","parent","ctor","constructor","key","call","prototype","__super__","_ref","WordArray","X64Word","Hasher","glbl","Global","RHO_OFFSETS","PI_INDEXES","ROUND_CONSTANTS","T","compute_rho_offsets","compute_pi_indexes","compute_round_constants","make_reusables","Global.prototype.compute_rho_offsets","newX","_i","x","y","_results","t","newY","push","Global.prototype.compute_pi_indexes","_j","_results1","Global.prototype.compute_round_constants","bitPosition","i","roundConstantLsw","roundConstantMsw","LFSR","j","Global.prototype.make_reusables","_super","apply","arguments","outputLength","blockSize","output_size","_doReset","SHA3.prototype._doReset","_state","_doProcessBlock","SHA3.prototype._doProcessBlock","M","offset","T0","TLane","Tx1Lane","Tx1Lsw","Tx2Lane","state","nBlockSizeLanes","M2i","M2i1","lane","high","low","round","_k","_l","tMsw","tLsw","Tx","_m","Tx4","Tx1","Tx1Msw","_n","laneIndex","_o","laneMsw","laneLsw","rhoOffset","TPiLane","state0","_p","_q","roundConstant","_doFinalize","SHA3.prototype._doFinalize","data","_data","dataWords","words","nBitsLeft","sigBytes","blockSizeBits","Math","ceil","length","_process","outputLengthBytes","outputLengthLanes","hashWords","copy_to","SHA3.prototype.copy_to","obj","_len","_ref1","s","clone","scrub","SHA3.prototype.scrub","SHA3.prototype.clone","out","transform","exports.transform","finalize"]
}
