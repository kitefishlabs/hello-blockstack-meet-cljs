{"version":3,"sources":["cljs/stacktrace.cljc"],"sourcesContent":[";; Copyright (c) Rich Hickey. All rights reserved.\n;; The use and distribution terms for this software are covered by the\n;; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;; which can be found in the file epl-v10.html at the root of this distribution.\n;; By using this software in any fashion, you are agreeing to be bound by\n;; the terms of this license.\n;; You must not remove this notice, or any other, from this software.\n\n(ns cljs.stacktrace\n  (:require #?@(:clj  [[cljs.util :as util]\n                       [clojure.java.io :as io]]\n                :cljs [[goog.string :as gstring]])\n            [clojure.string :as string])\n  #?(:clj (:import [java.util.regex Pattern]\n                   [java.io File])))\n\n(defmulti parse-stacktrace\n  \"Parse a JavaScript stacktrace string into a canonical data form. The\n  arguments:\n\n  repl-env - the repl environment, an optional map with :host and :port keys\n             if the stacktrace includes url, not file references\n  st       - the original stacktrace string to parse\n  err      - an error map. :ua-product key defines the type of stacktrace parser\n             to use, for example :chrome\n  opts     - additional options. :output-dir maybe given in this argument if\n             :host and :port do not apply, for example, a file path\n\n  The canonical stacktrace representation can easily be mapped to a\n  ClojureScript one see mapped-stacktrace and mapped-stacktrace-str\"\n  (fn [repl-env st err opts] (:ua-product err)))\n\n(defn parse-int [s]\n  #?(:clj  (Long/parseLong s)\n     :cljs (js/parseInt s 10)))\n\n(defn starts-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.startsWith s0 s1)\n     :cljs (gstring/startsWith s0 s1)))\n\n(defn ends-with?\n  #?(:cljs {:tag boolean})\n  [^String s0 s1]\n  #?(:clj  (.endsWith s0 s1)\n     :cljs (gstring/endsWith s0 s1)))\n\n(defn string->regex [s]\n  #?(:clj  (Pattern/compile s)\n     :cljs (js/RegExp. s)))\n\n(defn output-directory [opts]\n  #?(:clj  (util/output-directory opts)\n     :cljs (or (:output-dir opts) \"out\")))\n\n(defmethod parse-stacktrace :default\n  [repl-env st err opts] st)\n\n(defn parse-file-line-column [flc]\n  (if-not (re-find #\":\" flc)\n    [flc nil nil]\n    (let [xs (string/split flc #\":\")\n          [pre [line column]]\n          (reduce\n            (fn [[pre post] [x i]]\n              (if (<= i 2)\n                [pre (conj post x)]\n                [(conj pre x) post]))\n            [[] []] (map vector xs (range (count xs) 0 -1)))\n          file (string/join \":\" pre)]\n      [(cond-> file\n         (starts-with? file \"(\") (string/replace \"(\" \"\"))\n       (parse-int\n         (cond-> line\n           (ends-with? line \")\") (string/replace \")\" \"\")))\n       (parse-int\n         (cond-> column\n           (ends-with? column \")\") (string/replace \")\" \"\")))])))\n\n(defn parse-file\n  \"Given a browser file url convert it into a relative path that can be used\n   to locate the original source.\"\n  [{:keys [host host-port port] :as repl-env} file {:keys [asset-path] :as opts}]\n  (let [urlpat (if host\n                 (string->regex\n                   (str \"http://\" host \":\" (or host-port port) \"/\"))\n                 \"\")\n        match  (if host\n                 (re-find urlpat file)\n                 (contains? opts :output-dir))]\n    (if match\n      (-> file\n        (string/replace urlpat \"\")\n        (string/replace\n          (string->regex\n            ;; if :asset-path specified drop leading slash\n            (str \"^\" (or (and asset-path (string/replace asset-path #\"^/\" \"\"))\n                         (output-directory opts)) \"/\"))\n          \"\"))\n      (if-let [asset-root (:asset-root opts)]\n        (string/replace file asset-root \"\")\n        (throw\n          (ex-info (str \"Could not relativize URL \" file)\n            {:type :parse-stacktrace\n             :reason :relativize-url}))))))\n\n;; -----------------------------------------------------------------------------\n;; Chrome Stacktrace\n\n(defn chrome-st-el->frame\n  [repl-env st-el opts]\n  (let [xs (-> st-el\n             (string/replace #\"\\s+at\\s+\" \"\")\n             (string/split #\"\\s+\"))\n        [function flc] (if (== 1 (count xs))\n                         [nil (first xs)]\n                         [(first xs) (last xs)])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/replace function #\"Object\\.\" \"\")\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/replace function #\"Object\\.\" \"\")\n         :line nil\n         :column nil}))))\n\n(comment\n  (chrome-st-el->frame {:host \"localhost\" :port 9000}\n    \"\\tat cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\" {})\n  )\n\n(defmethod parse-stacktrace :chrome\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"    at eval\")))\n    (map #(chrome-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5356:34)\n    at http://localhost:9000/out/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/out/cljs/core.js:16972:3)\n    at http://localhost:9000/out/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/out/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/out/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/out/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    nil)\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4258:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/js/cljs/core.js:4288:19)\n    at cljs$core$ffirst (http://localhost:9000/js/cljs/core.js:5356:34)\n    at http://localhost:9000/js/cljs/core.js:16971:89\n    at cljs.core.map.cljs$core$map__2 (http://localhost:9000/js/cljs/core.js:16972:3)\n    at http://localhost:9000/js/cljs/core.js:10981:129\n    at cljs.core.LazySeq.sval (http://localhost:9000/js/cljs/core.js:10982:3)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (http://localhost:9000/js/cljs/core.js:11073:10)\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/js/cljs/core.js:4239:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (http://localhost:9000/js/cljs/core.js:28706:14)\"\n    {:ua-product :chrome}\n    {:asset-path \"/js\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (http://localhost:9000/out/cljs/core.js:4259:8)\n    at Object.cljs$core$first [as first] (http://localhost:9000/out/cljs/core.js:4289:19)\n    at cljs$core$ffirst (http://localhost:9000/out/cljs/core.js:5357:18)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:1:106)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:9:3)\n    at eval (eval at <anonymous> (http://localhost:9000/out/clojure/browser/repl.js:23:272), <anonymous>:14:4)\n    at http://localhost:9000/out/clojure/browser/repl.js:23:267\n    at clojure$browser$repl$evaluate_javascript (http://localhost:9000/out/clojure/browser/repl.js:26:4)\n    at Object.callback (http://localhost:9000/out/clojure/browser/repl.js:121:169)\n    at goog.messaging.AbstractChannel.deliver (http://localhost:9000/out/goog/messaging/abstractchannel.js:142:13)\"\n    {:ua-product :chrome}\n    nil)\n\n  ;; Node.js example\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3999:8)\n    at Object.cljs$core$first [as first] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:4018:19)\n    at cljs$core$ffirst (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:5161:34)\n    at /home/my/cool/project/.cljs_bootstrap/cljs/core.js:16006:88\n    at cljs.core.map.cljs$core$IFn$_invoke$arity$2 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:16007:3)\n    at cljs.core.LazySeq.sval (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10244:109)\n    at cljs.core.LazySeq.cljs$core$ISeqable$_seq$arity$1 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:10335:10)\n    at Object.cljs$core$seq [as seq] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:3980:13)\n    at Object.cljs$core$pr_sequential_writer [as pr_sequential_writer] (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28084:14)\n    at cljs.core.LazySeq.cljs$core$IPrintWithWriter$_pr_writer$arity$3 (/home/my/cool/project/.cljs_bootstrap/cljs/core.js:28812:18)\"\n    {:ua-product :chrome}\n    {:output-dir \"/home/my/cool/project/.cljs_bootstrap\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Safari Stacktrace\n\n(defn safari-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (string/trim function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (string/trim function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\" {})\n\n  (safari-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/js/cljs/core.js:4259:17\" {:asset-path \"js\"})\n  )\n\n(defmethod parse-stacktrace :safari\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(not (starts-with? % \"eval code\")))\n    (remove string/blank?)\n    (map #(safari-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {}\n    \"cljs$core$seq@out/cljs/core.js:3999:17\n    cljs$core$first@out/cljs/core.js:4018:22\n    cljs$core$ffirst@out/cljs/core.js:5161:39\n    global code\"\n    {:ua-product :safari}\n    {:output-dir \"out\"})\n\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4259:17\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4289:22\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5357:39\nhttp://localhost:9000/out/cljs/core.js:16972:92\nhttp://localhost:9000/out/cljs/core.js:16973:3\nhttp://localhost:9000/out/cljs/core.js:10982:133\nsval@http://localhost:9000/out/cljs/core.js:10983:3\ncljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11074:14\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4240:44\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28707:17\ncljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29386:38\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28912:57\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29011:32\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29015:20\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29078:24\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29092:48\ncljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29130:34\ncljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29139:39\neval code\neval@[native code]\nhttp://localhost:9000/out/clojure/browser/repl.js:23:271\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:26:4\nhttp://localhost:9000/out/clojure/browser/repl.js:121:173\ndeliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:21\nxpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:19\nmessageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:23\nfireListener@http://localhost:9000/out/goog/events/events.js:741:25\nhandleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:34\nhttp://localhost:9000/out/goog/events/events.js:276:42\"\n    {:ua-product :safari}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Firefox Stacktrace\n\n(defn firefox-clean-function [f]\n  (as-> f f\n    (cond\n      (string/blank? f) nil\n      (not= (.indexOf f \"</\") -1)\n      (let [idx (.indexOf f \"</\")]\n        (.substring f (+ idx 2)))\n      :else f)\n    (-> f\n      (string/replace #\"<\" \"\")\n      (string/replace #?(:clj #\"\\/\" :cljs (js/RegExp. \"\\\\/\")) \"\"))))\n\n(defn firefox-st-el->frame\n  [repl-env st-el opts]\n  (let [[function flc] (if (re-find #\"@\" st-el)\n                         (string/split st-el #\"@\")\n                         [nil st-el])\n        [file line column] (parse-file-line-column flc)]\n    (if (and file function line column)\n      {:file (parse-file repl-env file opts)\n       :function (firefox-clean-function function)\n       :line line\n       :column column}\n      (when-not (string/blank? function)\n        {:file nil\n         :function (firefox-clean-function function)\n         :line nil\n         :column nil}))))\n\n(comment\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\" {})\n\n  (firefox-st-el->frame {:host \"localhost\" :port 9000}\n    \"cljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\" {})\n  )\n\n(defmethod parse-stacktrace :firefox\n  [repl-env st err opts]\n  (->> st\n    string/split-lines\n    (drop-while #(starts-with? % \"Error\"))\n    (take-while #(= (.indexOf % \"> eval\") -1))\n    (remove string/blank?)\n    (map #(firefox-st-el->frame repl-env % opts))\n    (remove nil?)\n    vec))\n\n(comment\n  (parse-stacktrace {:host \"localhost\" :port 9000}\n    \"cljs$core$seq@http://localhost:9000/out/cljs/core.js:4258:8\ncljs$core$first@http://localhost:9000/out/cljs/core.js:4288:9\ncljs$core$ffirst@http://localhost:9000/out/cljs/core.js:5356:24\ncljs.core.map</cljs$core$map__2/</<@http://localhost:9000/out/cljs/core.js:16971:87\ncljs.core.map</cljs$core$map__2/<@http://localhost:9000/out/cljs/core.js:16970:1\ncljs.core.LazySeq.prototype.sval/self__.s<@http://localhost:9000/out/cljs/core.js:10981:119\ncljs.core.LazySeq.prototype.sval@http://localhost:9000/out/cljs/core.js:10981:13\ncljs.core.LazySeq.prototype.cljs$core$ISeqable$_seq$arity$1@http://localhost:9000/out/cljs/core.js:11073:1\ncljs$core$seq@http://localhost:9000/out/cljs/core.js:4239:8\ncljs$core$pr_sequential_writer@http://localhost:9000/out/cljs/core.js:28706:4\ncljs.core.LazySeq.prototype.cljs$core$IPrintWithWriter$_pr_writer$arity$3@http://localhost:9000/out/cljs/core.js:29385:8\ncljs$core$pr_writer_impl@http://localhost:9000/out/cljs/core.js:28911:8\ncljs$core$pr_writer@http://localhost:9000/out/cljs/core.js:29010:8\ncljs$core$pr_seq_writer@http://localhost:9000/out/cljs/core.js:29014:1\ncljs$core$pr_sb_with_opts@http://localhost:9000/out/cljs/core.js:29077:1\ncljs$core$pr_str_with_opts@http://localhost:9000/out/cljs/core.js:29091:23\ncljs.core.pr_str</cljs$core$pr_str__delegate@http://localhost:9000/out/cljs/core.js:29129:8\ncljs.core.pr_str</cljs$core$pr_str@http://localhost:9000/out/cljs/core.js:29138:8\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:25\n@http://localhost:9000/out/clojure/browser/repl.js line 23 > eval:1:2\nclojure$browser$repl$evaluate_javascript/result<@http://localhost:9000/out/clojure/browser/repl.js:23:267\nclojure$browser$repl$evaluate_javascript@http://localhost:9000/out/clojure/browser/repl.js:23:15\nclojure$browser$repl$connect/</<@http://localhost:9000/out/clojure/browser/repl.js:121:128\ngoog.messaging.AbstractChannel.prototype.deliver@http://localhost:9000/out/goog/messaging/abstractchannel.js:142:5\ngoog.net.xpc.CrossPageChannel.prototype.xpcDeliver@http://localhost:9000/out/goog/net/xpc/crosspagechannel.js:733:7\ngoog.net.xpc.NativeMessagingTransport.messageReceived_@http://localhost:9000/out/goog/net/xpc/nativemessagingtransport.js:321:1\ngoog.events.fireListener@http://localhost:9000/out/goog/events/events.js:741:10\ngoog.events.handleBrowserEvent_@http://localhost:9000/out/goog/events/events.js:862:1\ngoog.events.getProxy/f<@http://localhost:9000/out/goog/events/events.js:276:16\"\n    {:ua-product :firefox}\n    nil)\n  )\n\n;; -----------------------------------------------------------------------------\n;; Rhino Stacktrace\n\n(defmethod parse-stacktrace :rhino\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [[file-side line-fn-side] (string/split frame-str #\":\")\n                   file                      (string/replace file-side #\"\\s+at\\s+\" \"\")\n                   [line function]           (string/split line-fn-side #\"\\s+\")]\n               {:file     (string/replace file\n                            (str output-dir\n                              #?(:clj File/separator :cljs \"/\"))\n                            \"\")\n                :function (when function\n                            (-> function\n                              (string/replace \"(\" \"\")\n                              (string/replace \")\" \"\")))\n                :line     (when (and line (not (string/blank? line)))\n                            (parse-int line))\n                :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"\\tat .cljs_rhino_repl/goog/../cljs/core.js:4215 (seq)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:4245 (first)\n     \\tat .cljs_rhino_repl/goog/../cljs/core.js:5295 (ffirst)\n     \\tat <cljs repl>:1\n     \\tat <cljs repl>:1\"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n\n  (parse-stacktrace {}\n    \"org.mozilla.javascript.JavaScriptException: Error: 1 is not ISeqable (.cljs_rhino_repl/goog/../cljs/core.js#3998)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3998 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:4017 (cljs$core$first)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:5160 (cljs$core$ffirst)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16005\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:16004\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10243\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:10334\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:3979 (cljs$core$seq)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28083 (cljs$core$pr_sequential_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28811\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28267 (cljs$core$pr_writer_impl)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28349 (cljs$core$pr_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28353 (cljs$core$pr_seq_writer)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28416 (cljs$core$pr_sb_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28430 (cljs$core$pr_str_with_opts)\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28524\n   \\tat .cljs_rhino_repl/goog/../cljs/core.js:28520 (cljs$core$pr_str)\n   at <cljs repl>:1\n   \"\n    {:ua-product :rhino}\n    {:output-dir \".cljs_rhino_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Nashorn Stacktrace\n\n(defmethod parse-stacktrace :nashorn\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (== -1 (.indexOf frame-str \"\\tat\")))\n              (let [frame-str               (string/replace frame-str #\"\\s+at\\s+\" \"\")\n                    [function file-and-line] (string/split frame-str #\"\\s+\")\n                    [file-part line-part]    (string/split file-and-line #\":\")]\n                {:file     (string/replace (.substring file-part 1)\n                             (str output-dir\n                               #?(:clj File/separator :cljs \"/\"))\n                             \"\")\n                 :function function\n                 :line     (when (and line-part (not (string/blank? line-part)))\n                             (parse-int\n                               (.substring line-part 0\n                                 (dec (count line-part)))))\n                 :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n;; -----------------------------------------------------------------------------\n;; Graal.JS Stacktrace\n\n(defmethod parse-stacktrace :graaljs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(process-frame [frame-str]\n            (when-not (string/blank? frame-str)\n              (let [[function file-and-line] (string/split frame-str #\"\\(\")\n                    [file-part line-part]    (string/split file-and-line #\":\")]\n                {:file     (string/replace file-part\n                             (str output-dir\n                               #?(:clj File/separator :cljs \"/\"))\n                             \"\")\n                 :function function\n                 :line     (when (and line-part (not (string/blank? line-part)))\n                             (parse-int\n                               (.substring line-part 0\n                                 (dec (count line-part)))))\n                 :column   0})))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3998)\n    \\tat cljs$core$first (.cljs_nashorn_repl/goog/../cljs/core.js:4017)\n    \\tat cljs$core$ffirst (.cljs_nashorn_repl/goog/../cljs/core.js:5160)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16005)\n    \\tat <anonymous> (.cljs_nashorn_repl/goog/../cljs/core.js:16004)\n    \\tat sval (.cljs_nashorn_repl/goog/../cljs/core.js:10243)\n    \\tat cljs$core$ISeqable$_seq$arity$1-6 (.cljs_nashorn_repl/goog/../cljs/core.js:10334)\n    \\tat cljs$core$seq (.cljs_nashorn_repl/goog/../cljs/core.js:3979)\n    \\tat cljs$core$pr_sequential_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28083)\n    \\tat cljs$core$IPrintWithWriter$_pr_writer$arity$3-5 (.cljs_nashorn_repl/goog/../cljs/core.js:28811)\n    \\tat cljs$core$pr_writer_impl (.cljs_nashorn_repl/goog/../cljs/core.js:28267)\n    \\tat cljs$core$pr_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28349)\n    \\tat cljs$core$pr_seq_writer (.cljs_nashorn_repl/goog/../cljs/core.js:28353)\n    \\tat cljs$core$pr_sb_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28416)\n    \\tat cljs$core$pr_str_with_opts (.cljs_nashorn_repl/goog/../cljs/core.js:28430)\n    \\tat cljs$core$IFn$_invoke$arity$variadic-71 (.cljs_nashorn_repl/goog/../cljs/core.js:28524)\n    \\tat cljs$core$pr_str (.cljs_nashorn_repl/goog/../cljs/core.js:28520)\n    \\tat <anonymous> (<eval>:1)\n    \\tat <program> (<eval>:1)\\n\"\n    {:ua-product :nashorn}\n    {:output-dir \".cljs_nashorn_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Node.js Stacktrace\n\n(defmethod parse-stacktrace :nodejs\n  [repl-env st err {:keys [output-dir] :as opts}]\n  (letfn [(parse-source-loc-info [x]\n            (when (and x (not (string/blank? x)))\n              (parse-int x)))\n          (process-frame [frame-str]\n            (when-not (or (string/blank? frame-str)\n                          (nil? (re-find #\"^\\s+at\" frame-str)))\n              (let [frame-str (string/replace frame-str #\"\\s+at\\s+\" \"\")]\n                (when-not (string/starts-with? frame-str \"repl:\")\n                  (let [parts (string/split frame-str #\"\\s+\")\n                        [function file&line] (if (== 2 (count parts))\n                                                   [(first parts)\n                                                    (subs (second parts) 1\n                                                      (dec (count (second parts))))]\n                                                   [nil (first parts)])\n                        [file-part line-part col-part] (string/split file&line #\":\")]\n                    {:file     (if function\n                                 (cond-> file-part\n                                   output-dir\n                                   (string/replace\n                                     (str output-dir\n                                       #?(:clj File/separator :cljs \"/\"))\n                                     \"\"))\n                                 file-part)\n                     :function function\n                     :line     (parse-source-loc-info line-part)\n                     :column   (parse-source-loc-info col-part)})))))]\n    (->> (string/split st #\"\\n\")\n      (map process-frame)\n      (remove nil?)\n      vec)))\n\n(comment\n  (parse-stacktrace {}\n    \"Error: 1 is not ISeqable\n    at cljs$core$seq (.cljs_node_repl/cljs/core.cljs:1118:20)\n    at repl:1:65\n    at repl:9:4\n    at repl:17:3\n    at repl:22:4\n    at Object.exports.runInThisContext (vm.js:54:17)\n    at Domain.<anonymous> ([stdin]:41:34)\n    at Domain.run (domain.js:228:14)\n    at Socket.<anonymous> ([stdin]:40:25)\n    at emitOne (events.js:77:13)\"\n\n    {:ua-product :nodejs}\n    {:output-dir \".cljs_node_repl\"})\n  )\n\n;; -----------------------------------------------------------------------------\n;; Stacktrace Mapping\n\n(defn remove-ext [file]\n  (-> file\n    (string/replace #\"\\.js$\" \"\")\n    (string/replace #\"\\.cljs$\" \"\")\n    (string/replace #\"\\.cljc$\" \"\")\n    (string/replace #\"\\.clj$\" \"\")))\n\n(defn mapped-line-column-call\n  \"Given a cljs.source-map source map data structure map a generated line\n   and column back to the original line, column, and function called.\"\n  [sms file line column]\n  (let [source-map (get sms (symbol (string/replace (remove-ext file) \"/\" \".\")))]\n    ;; source maps are 0 indexed for columns\n    ;; multiple segments may exist at column\n    ;; the last segment seems most accurate\n    (letfn [(get-best-column [columns column]\n             (last (or (get columns\n                         (last (filter #(<= % (dec column))\n                                 (sort (keys columns)))))\n                     (second (first columns)))))\n           (adjust [mapped]\n             (vec (map #(%1 %2) [inc inc identity] mapped)))]\n     (let [default [line column nil]]\n       ;; source maps are 0 indexed for lines\n       (if-let [columns (get source-map (dec line))]\n         (adjust (map (get-best-column columns column) [:line :col :name]))\n         default)))))\n\n(defn mapped-frame\n  \"Given opts and a canonicalized JavaScript stacktrace frame, return the\n  ClojureScript frame.\"\n  [{:keys [function file line column]} sms opts]\n  (let [no-source-file?      (if-not file true (starts-with? file \"<\"))\n        [line' column' call] (if no-source-file?\n                               [line column nil]\n                               (mapped-line-column-call sms file line column))\n        file'                (when-not no-source-file?\n                               (if (ends-with? file \".js\")\n                                 (str (subs file 0 (- (count file) 3)) \".cljs\")\n                                 file))]\n    {:function function\n     :call     call\n     :file     (if no-source-file?\n                 (str \"NO_SOURCE_FILE\" (when file (str \" \" file)))\n                 file')\n     :line     line'\n     :column   column'}))\n\n(defn mapped-stacktrace\n  \"Given a vector representing the canonicalized JavaScript stacktrace\n   return the ClojureScript stacktrace. The canonical stacktrace must be\n   in the form:\n\n    [{:file <string>\n      :function <string>\n      :line <integer>\n      :column <integer>}*]\n\n   :file must be a URL path (without protocol) relative to :output-dir or a\n   identifier delimited by angle brackets. The returned mapped stacktrace will\n   also contain :url entries to the original sources if it can be determined\n   from the classpath.\"\n  ([stacktrace sms]\n   (mapped-stacktrace stacktrace sms nil))\n  ([stacktrace sms opts]\n   (letfn [(call->function [x]\n             (if (:call x)\n               (hash-map :function (:call x))\n               {}))\n           (call-merge [function call]\n             (merge-with\n               (fn [munged-fn-name unmunged-call-name]\n                 (if (= munged-fn-name\n                        (string/replace (munge unmunged-call-name) \".\" \"$\"))\n                   unmunged-call-name\n                   munged-fn-name))\n               function call))]\n     (let [mapped-frames (map (memoize #(mapped-frame % sms opts)) stacktrace)]\n       ;; take each non-nil :call and optionally merge it into :function one-level\n       ;; up to avoid replacing with local symbols, we only replace munged name if\n       ;; we can munge call symbol back to it\n       (vec (map call-merge\n              (map #(dissoc % :call) mapped-frames)\n              (concat (rest (map call->function mapped-frames)) [{}])))))))\n\n(defn mapped-stacktrace-str\n  \"Given a vector representing the canonicalized JavaScript stacktrace and a map\n  of library names to decoded source maps, print the ClojureScript stacktrace .\n  See mapped-stacktrace.\"\n  ([stacktrace sms]\n   (mapped-stacktrace-str stacktrace sms nil))\n  ([stacktrace sms opts]\n   (with-out-str\n     (doseq [{:keys [function file line column]}\n             (mapped-stacktrace stacktrace sms opts)]\n       (println \"\\t\"\n         (str (when function (str function \" \"))\n              \"(\" file (when line (str \":\" line))\n                       (when column (str \":\" column)) \")\"))))))\n\n(comment\n  (require '[cljs.closure :as cljsc]\n           '[clojure.data.json :as json]\n           '[cljs.source-map :as sm]\n           '[clojure.pprint :as pp])\n\n  (cljsc/build \"samples/hello/src\"\n    {:optimizations :none\n     :output-dir \"samples/hello/out\"\n     :output-to \"samples/hello/out/hello.js\"\n     :source-map true})\n\n  (def sms\n    {'hello.core\n     (sm/decode\n       (json/read-str\n         (slurp \"samples/hello/out/hello/core.js.map\")\n         :key-fn keyword))})\n\n  (pp/pprint sms)\n\n  ;; maps to :line 5 :column 24\n  (mapped-stacktrace\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n\n  (mapped-stacktrace-str\n    [{:file \"hello/core.js\"\n      :function \"first\"\n      :line 6\n      :column 0}]\n    sms {:output-dir \"samples/hello/out\"})\n  )\n"],"mappings":";;;;AAgBA,AAAA,AAAAA,AAAAC,AAAAC;AAAA;AAAA,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,AAAA,AAAAC,AAAA,AAAUU;AAAV,AAAA,AAAAV,AAAA;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAA,AAAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAAA,AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAAC,AAAA,AAAA,AAcE;AAAK,AAAS,AAAG,AAAI;AAArB,AAA2B,AAAA,AAAaO;;AAd1C,AAAAN,AAAAC,AAAAC,AAAAC,AAAAC;;;AAgBA,AAAA,AAAMG,AAAW;AAAjB,AAEW,AAAA,AAACC,AAAYC;;AAExB,AAAA,AAAMC,AAEK,AAAG;AAFd,AAIW,AAACC,AAAmBC,AAAGC;;AAElC,AAAA,AAAMC,AAEK,AAAG;AAFd,AAIW,AAACC,AAAiBH,AAAGC;;AAEhC,AAAA,AAAMG,AAAe;AAArB,AAEW,AAAAC,AAAYR;;AAEvB,AAAA,AAAMS,AAAkB;AAAxB,AAEW,AAAA,AAAI,AAAA,AAAaE;AAAjB,AAAA,AAAAD;AAAAA;;AAAA;;;AAEX,AAAAd,AAAA,AAAA,AACG,AAAS,AAAG,AAAI;AADnB,AACyBgB;;AAEzB,AAAA,AAAMC,AAAwB;AAA9B,AACE,AAAA,AAAAC,AAAQ,AAAA,AAACC,AAAaC;AAAtB,AAAA,AAAA,AACGA;;AACD,AAAM,AAAG,AAAA,AAACI,AAAaJ;AAAvB,AAEM,AAACK,AACC;AAAA,AAAA;AAAA,AAAA,AAAA,AAAAC;AAAA,AAAAL,AAAAM,AAAA,AAAA,AAAM;AAAN,AAAAN,AAAAM,AAAA,AAAA,AAAU;AAAV,AAAAC;AAAA,AAAAP,AAAAQ,AAAA,AAAA,AAAiB;AAAjB,AAAAR,AAAAQ,AAAA,AAAA,AAAmB;AAAnB,AACE,AAAI,AAAA,AAAIC;AAAR,AACGC,AAAI,AAACC,AAAKC,AAAKC;;AADlB,AAEG,AAACF,AAAKD,AAAIG,AAAGD;;;AAJpB,AAAA,AAAA,AAKU,AAACE,AAAIC,AAAOC,AAAG,AAAA,AAAA,AAACC,AAAM,AAACC,AAAMF;AAP7C,AAAAhB,AAAAC,AAAA,AAAA,AACO;AADP,AAAA,AAAAD,AAAAC,AAAA,AAAA;AAAA,AAAAD,AAAAE,AAAA,AAAA,AACY;AADZ,AAAAF,AAAAE,AAAA,AAAA,AACiB;AAOX,AAAK,AAAA,AAACiB,AAAgBT;AAR5B,AAAA,AASG,AAAA,AAAQW;AAAR,AAAA,AACE,AAAA,AAACrC,AAAaqC;AAAU,AAAAD,AAAA,AAAA,AAACE;;AAD3BF;;AAEA,AAACvC,AACC,AAAA,AAAQ2C;AAAR,AAAA,AACE,AAAA,AAACpC,AAAWoC;AAAU,AAAAD,AAAA,AAAA,AAACD;;AADzBC;;AAEF,AAAC1C,AACC,AAAA,AAAQ6C;AAAR,AAAA,AACE,AAAA,AAACtC,AAAWsC;AAAY,AAAAD,AAAA,AAAA,AAACH;;AAD3BG;;;;;AAGT;;;;AAAA,AAAA,AAAA,AAAMU,AAGwC;AAH9C,AAAA,AAAA,AAAAR;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAGoC;AAHpC,AAAAI,AAAAJ,AAAA,AAGW;AAHX,AAAAI,AAAAJ,AAAA,AAGgB;AAHhB,AAAAI,AAAAJ,AAAA,AAG0B;AAH1B,AAAAK;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAL,AAAA,AAAAK,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAAC,AAAAG,AAAAA;AAAAA,AAG2E;AAH3E,AAAAF,AAAAE,AAAA,AAG2D;AAH3D,AAIE,AAAM,AAAO,AAAIE,AACF,AAAC9C,AACC,AAAA,AAAA,AAAe8C,AAAS,AAAA,AAAIC;AAAJ,AAAA,AAAA5C;AAAAA;;AAAc6C;;AAF1C,AAEI;AAEX,AAAO,AAAIF,AACF,AAACtC,AAAQyC,AAAOlB,AAChB,AAAA,AAACmB,AAAU9C;AAN1B,AAOE,AAAI+C;AACEpB,AACF,AAAA,AAACC,AAAeiB,AAChB,AAACjB,AACC,AAAChC,AAEC,AAAA,AAAS,AAAA,AAAI,AAAA,AAAKqD;AAAL,AAAA,AAAAD;AAAgB,AAAA,AAAA,AAACpB,AAAeqB;;AAAhCD;;;AAAJ,AAAA,AAAAjD;AAAAA;;AACI,AAACD,AAAiBE;;AAJnC,AAGI;;AAGN,AAAA,AAAoB,AAAA,AAAaA;AAAjC,AAAA,AAAAkD;AAAA,AAAAA,AAAS;AAAT,AACE,AAAA,AAACtB,AAAeD,AAAKwB;;AACrB,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAQ,AAAA,AAAiCzB;;;;AAOpD,AAAA,AAAM0B,AACH,AAAS,AAAM;AADlB,AAEE,AAAM,AAAOG,AACF,AAAA,AAAA,AAAC5B,AACD,AAAA,AAACnB;AAFZ,AAGqB,AAAA,AAAA,AAAA,AAAI,AAAA,AAAM,AAACe,AAAMF,AACV,AAACmC,AAAMnC,AACX,AAACmC,AAAMnC,AAAI,AAACoC,AAAKpC;AALzC,AAAAhB,AAAAgD,AAAA,AAAA,AAGO;AAHP,AAAAhD,AAAAgD,AAAA,AAAA,AAGgB;AAHhB,AAMyB,AAACpD,AAAuBG;AANjD,AAAAC,AAAAiD,AAAA,AAAA,AAMO;AANP,AAAAjD,AAAAiD,AAAA,AAAA,AAMY;AANZ,AAAAjD,AAAAiD,AAAA,AAAA,AAMiB;AANjB,AAOE,AAAI,AAAA,AAAK5B;AAAL,AAAA,AAAAqB;AAAA,AAAA,AAAUW;AAAV,AAAA,AAAAX;AAAA,AAAA,AAAmBlB;AAAnB,AAAA,AAAAkB;AAAwBhB;;AAAxBgB;;;AAAAA;;;AAAAA;;;AAAJ,AAAA,AAAA,AAAA,AAAA,AACS,AAACP,AAAWmB,AAASjC,AAAK3B,AACtB,AAAA,AAAA,AAAC4B,AAAe+B,AACpB7B,AACEE;;AACT,AAAU,AAAC6B,AAAcF;AAAzB;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEa,AAAA,AAAA,AAAC/B,AAAe+B;;;;AAInC,AAKA,AAAA1E,AAAA,AAAA,AACG,AAAS,AAAG,AAAI;AADnB,AAEE,AAIE,AAAA,AAAA,AAACkF,AACD,AAACE,AAAOC,AACRC;AAFA,AAAM,AAAAH,AAACf,AAAoBO,AAAW5D;AADtC,AAAA,AAAA,AAACiE;AAAD,AAAa,AAAK,AAAAC,AAAA,AAAC5E;AADnB,AAAA,AAAA,AAACyE;AAAD,AAAa,AAAAC,AAAA,AAAC1E;AAFXW,AACH6D,AACA;;AAMJ,AAkEA,AAAA,AAAMU,AACH,AAAS,AAAM;AADlB,AAEE,AAAA,AAAqB,AAAA,AAAA,AAAI,AAAA,AAACpE,AAAaoD,AAChB,AAAA,AAAC/C,AAAa+C,AACTA;AAF5B,AAAAlD,AAAAmE,AAAA,AAAA,AAAO;AAAP,AAAAnE,AAAAmE,AAAA,AAAA,AAAgB;AAAhB,AAGyB,AAACvE,AAAuBG;AAHjD,AAAAC,AAAAoE,AAAA,AAAA,AAGO;AAHP,AAAApE,AAAAoE,AAAA,AAAA,AAGY;AAHZ,AAAApE,AAAAoE,AAAA,AAAA,AAGiB;AAHjB,AAIE,AAAI,AAAA,AAAK/C;AAAL,AAAA,AAAAqB;AAAA,AAAA,AAAUW;AAAV,AAAA,AAAAX;AAAA,AAAA,AAAmBlB;AAAnB,AAAA,AAAAkB;AAAwBhB;;AAAxBgB;;;AAAAA;;;AAAAA;;;AAAJ,AAAA,AAAA,AAAA,AAAA,AACS,AAACP,AAAWmB,AAASjC,AAAK3B,AACtB,AAAC2E,AAAYhB,AACjB7B,AACEE;;AACT,AAAU,AAAC6B,AAAcF;AAAzB;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEa,AAACgB,AAAYhB;;;;AAIhC,AAQA,AAAA1E,AAAA,AAAA,AACG,AAAS,AAAG,AAAI;AADnB,AAEE,AAKE,AAAA,AAAA,AAACkF,AACD,AAACE,AAAOC,AACRC;AAFA,AAAM,AAAAO,AAACN,AAAoBZ,AAAW5D;AAFtC,AAAA,AAAA,AAACiE,AACD,AAACI,AAAOR;AADR,AAAa,AAAK,AAAAgB,AAAA,AAACvF;AADnB,AAAA,AAAA,AAACyE;AAAD,AAAa,AAAAa,AAAA,AAACtF;AAFXW,AACH6D,AACA;;AAOJ,AA8CA,AAAA,AAAMiB,AAAwB;AAA9B,AACE,AAAMC,AAAE;AAAA,AACN,AAAA,AAAA,AACE,AAACnB,AAAcmB,AACf,AAAA,AAACC,AAAK,AAAA,AAAUD,AAChB,AAAM,AAAI,AAAA,AAAUA;AAApB,AACE,AAAYA,AAAE,AAAA,AAAGE;AAJrB,AAKQF;;AANV,AAOMA,AACF,AAAA,AAAA,AAACpD,AACD,AAAA,AAACA,AAAmC,AAAA/B,AAAA;;AAE1C,AAAA,AAAMsF,AACH,AAAS,AAAM;AADlB,AAEE,AAAA,AAAqB,AAAA,AAAA,AAAI,AAAA,AAAC/E,AAAaoD,AAChB,AAAA,AAAC/C,AAAa+C,AACTA;AAF5B,AAAAlD,AAAA8E,AAAA,AAAA,AAAO;AAAP,AAAA9E,AAAA8E,AAAA,AAAA,AAAgB;AAAhB,AAGyB,AAAClF,AAAuBG;AAHjD,AAAAC,AAAA+E,AAAA,AAAA,AAGO;AAHP,AAAA/E,AAAA+E,AAAA,AAAA,AAGY;AAHZ,AAAA/E,AAAA+E,AAAA,AAAA,AAGiB;AAHjB,AAIE,AAAI,AAAA,AAAK1D;AAAL,AAAA,AAAAqB;AAAA,AAAA,AAAUW;AAAV,AAAA,AAAAX;AAAA,AAAA,AAAmBlB;AAAnB,AAAA,AAAAkB;AAAwBhB;;AAAxBgB;;;AAAAA;;;AAAAA;;;AAAJ,AAAA,AAAA,AAAA,AAAA,AACS,AAACP,AAAWmB,AAASjC,AAAK3B,AACtB,AAAC+E,AAAuBpB,AAC5B7B,AACEE;;AACT,AAAU,AAAC6B,AAAcF;AAAzB;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEa,AAACoB,AAAuBpB;;;;AAI3C,AAiBA,AAAA1E,AAAA,AAAA,AACG,AAAS,AAAG,AAAI;AADnB,AAEE,AAKE,AAAA,AAAA,AAACkF,AACD,AAACE,AAAOC,AACRC;AAFA,AAAM,AAAAkB,AAACN,AAAqBvB,AAAW5D;AAFvC,AAAA,AAAA,AAACiE,AACD,AAACI,AAAOR;AADR,AAAa,AAAA,AAAC0B,AAAE,AAAAC,AAAA;AADhB,AAAA,AAAA,AAACzB;AAAD,AAAa,AAAAuB,AAAA,AAAChG;AAFXW,AACH6D,AACA;;AAOJ,AAsCA,AAAA7E,AAAA,AAAA,AAAA,AACG,AAAS,AAAG;AADf,AAAA,AAAA,AAAAyG;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxD,AAAA,AAAAwD,AAAA,AAAA,AAAA,AAAA,AAAAvD,AAAAC,AAAAsD,AAAAA;AAAAA,AAC2C;AAD3C,AAAArD,AAAAqD,AAAA,AAC2B;AAD3B,AAEE,AAAA;AAAwB;AAAxB,AACU,AAAU,AAAI,AAAC9B,AAAc+B,AACf,AAAA,AAAO,AAAA,AAAUA;AAD/B;;AAAA,AAEE,AAAA,AAA+B,AAAA,AAACnF,AAAamF;AAA7C,AAAAtF,AAAAuF,AAAA,AAAA,AAAO;AAAP,AAAAvF,AAAAuF,AAAA,AAAA,AAAiB;AACZ,AAA0B,AAAA,AAAA,AAACjE,AAAemE;AAD/C,AAE+B,AAAA,AAACtF,AAAauF;AAF7C,AAAA1F,AAAAwF,AAAA,AAAA,AAEM;AAFN,AAAAxF,AAAAwF,AAAA,AAAA,AAEW;AAFX,AAAA,AAAA,AAAA,AAAA,AAGY,AAAA,AAAClE,AAAeD,AACd,AAAA,AAAKsE,AAGP,AAAA,AAAA,AAAMtC,AACAA,AACF,AAAA,AAAA,AAAC/B,AACD,AAAA,AAAA,AAACA,AACL,AAAM,AAAA,AAAKE;AAAL,AAAA,AAAAkB;AAAU,AAAK,AAACa,AAAc/B;;AAA9BkB;;AAXlB,AAAA,AAWY,AAAA,AACE,AAAC7D,AAAU2C;;;;AAfrC,AAiBE,AAAK,AAAA,AAACrB,AAAaR,AACjB,AAACkE,AAAI+B,AACL,AAAC7B,AAAOC,AACRC;;AAEN,AAsCA,AAAAtF,AAAA,AAAA,AAAA,AACG,AAAS,AAAG;AADf,AAAA,AAAA,AAAAkH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjE,AAAA,AAAAiE,AAAA,AAAA,AAAA,AAAA,AAAAhE,AAAAC,AAAA+D,AAAAA;AAAAA,AAC2C;AAD3C,AAAA9D,AAAA8D,AAAA,AAC2B;AAD3B,AAEE,AAAA;AAAwB;AAAxB,AACU,AAAU,AAAI,AAACvC,AAAc+B,AACf,AAAA,AAAO,AAAA,AAAUA;AAD/B;;AAAA,AAEE,AAAM,AAAwB,AAAA,AAAA,AAAChE,AAAegE;AAA9C,AAC+B,AAAA,AAACnF,AAAamF;AAD7C,AAAAtF,AAAA+F,AAAA,AAAA,AACO;AADP,AAAA/F,AAAA+F,AAAA,AAAA,AACgB;AADhB,AAE+B,AAAA,AAAC5F,AAAa8F;AAF7C,AAAAjG,AAAAgG,AAAA,AAAA,AAEO;AAFP,AAAAhG,AAAAgG,AAAA,AAAA,AAEiB;AAFjB,AAAA,AAAA,AAAA,AAAA,AAGa,AAAA,AAAC1E,AAAe,AAAA,AAAY4E,AAC1B,AAAA,AAAKP,AAGPtC,AACA,AAAM,AAAA,AAAK8C;AAAL,AAAA,AAAAzD;AAAe,AAAK,AAACa,AAAc4C;;AAAnCzD;;AARnB,AAAA,AAQa,AAAA,AACE,AAAC7D,AACC,AAAA,AAAYsH,AACV,AAAA,AAAK,AAACjF,AAAMiF;;;;AAd3C,AAgBE,AAAK,AAAA,AAAChG,AAAaR,AACjB,AAACkE,AAAI+B,AACL,AAAC7B,AAAOC,AACRC;;AAKN,AAAAtF,AAAA,AAAA,AAAA,AACG,AAAS,AAAG;AADf,AAAA,AAAA,AAAAyH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxE,AAAA,AAAAwE,AAAA,AAAA,AAAA,AAAA,AAAAvE,AAAAC,AAAAsE,AAAAA;AAAAA,AAC2C;AAD3C,AAAArE,AAAAqE,AAAA,AAC2B;AAD3B,AAEE,AAAA;AAAwB;AAAxB,AACU,AAAU,AAAC9C,AAAc+B;AAAzB;;AAAA,AACE,AAAA,AAA+B,AAAA,AAACnF,AAAamF;AAA7C,AAAAtF,AAAAsG,AAAA,AAAA,AAAO;AAAP,AAAAtG,AAAAsG,AAAA,AAAA,AAAgB;AAAhB,AAC+B,AAAA,AAACnG,AAAa8F;AAD7C,AAAAjG,AAAAuG,AAAA,AAAA,AACO;AADP,AAAAvG,AAAAuG,AAAA,AAAA,AACiB;AADjB,AAAA,AAAA,AAAA,AAAA,AAEa,AAAA,AAACjF,AAAe4E,AACd,AAAA,AAAKP,AAGPtC,AACA,AAAM,AAAA,AAAK8C;AAAL,AAAA,AAAAzD;AAAe,AAAK,AAACa,AAAc4C;;AAAnCzD;;AAPnB,AAAA,AAOa,AAAA,AACE,AAAC7D,AACC,AAAA,AAAYsH,AACV,AAAA,AAAK,AAACjF,AAAMiF;;;;AAZ3C,AAcE,AAAK,AAAA,AAAChG,AAAaR,AACjB,AAACkE,AAAI+B,AACL,AAAC7B,AAAOC,AACRC;;AAEN,AA6BA,AAAAtF,AAAA,AAAA,AAAA,AACG,AAAS,AAAG;AADf,AAAA,AAAA,AAAA6H;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5E,AAAA,AAAA4E,AAAA,AAAA,AAAA,AAAA,AAAA3E,AAAAC,AAAA0E,AAAAA;AAAAA,AAC2C;AAD3C,AAAAzE,AAAAyE,AAAA,AAC2B;AAD3B,AAEE,AAAA;AAAgC;AAAhC,AACU,AAAM,AAAA,AAAK5F;AAAL,AAAA,AAAA6B;AAAO,AAAK,AAACa,AAAc1C;;AAA3B6B;;;AAAN,AACE,AAAC7D,AAAUgC;;AADb;;;;AADV;AAGwB;AAHxB,AAIU,AAAU,AAAI,AAAC0C,AAAc+B,AACf,AAAA,AAAM,AAAA,AAACxF,AAAkBwF;AADvC;;AAAA,AAEE,AAAM,AAAU,AAAA,AAAA,AAAChE,AAAegE;AAAhC,AACE,AAAU,AAAA,AAACoB,AAAoBpB;AAA/B;;AAAA,AACE,AAAM,AAAM,AAAA,AAACnF,AAAamF;AAA1B,AAC2B,AAAA,AAAA,AAAA,AAAI,AAAA,AAAM,AAACpE,AAAM2F,AACV,AAAC1D,AAAM0D,AACP,AAAA,AAACC,AAAK,AAACC,AAAOF,AACZ,AAAA,AAAK,AAAC3F,AAAM,AAAC6F,AAAOF,AAClB,AAAC1D,AAAM0D;AAL7C,AAAA7G,AAAA2G,AAAA,AAAA,AACO;AADP,AAAA3G,AAAA2G,AAAA,AAAA,AACgB;AADhB,AAMqC,AAAA,AAACxG,AAAa6G;AANnD,AAAAhH,AAAA4G,AAAA,AAAA,AAMO;AANP,AAAA5G,AAAA4G,AAAA,AAAA,AAMiB;AANjB,AAAA5G,AAAA4G,AAAA,AAAA,AAM2B;AAN3B,AAAA,AAAA,AAOa,AAAIvD,AACF,AAAA,AAAQ6C;AAAR,AAAA,AACEP;AACA,AAAAsB,AAAA,AAAC3F,AACC,AAAA,AAAKqE;;AAHTsB;;AARf,AAAA,AAAA,AAcef,AACF7C,AACA,AAAC6D,AAAsBf,AACvB,AAACe,AAAsBC;;;;;AAzBpD,AA0BE,AAAK,AAAA,AAAChH,AAAaR,AACjB,AAACkE,AAAI+B,AACL,AAAC7B,AAAOC,AACRC;;AAEN,AAqBA,AAAA,AAAMmD,AAAY;AAAlB,AACM/F,AACF,AAAA,AAAA,AAACC,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA,AACD,AAAA,AAAA,AAACA;;AAEL;;;;AAAA,AAAM+F,AAGH,AAAI,AAAK,AAAK;AAHjB,AAIE,AAAM,AAAW,AAACrF,AAAIsF,AAAI,AAACC,AAAO,AAAA,AAAA,AAACjG,AAAe,AAAC8F,AAAW/F;AAA9D,AAIE,AAAA;AAA0B,AAAQ;AAAlC,AACS,AAAC+B,AAAK,AAAA,AAAI,AAACpB,AAAIwF,AACH,AAACpE,AAAK,AAAA,AAACqE;AAAD;AAAA,AAAS,AAAAC,AAAM,AAAA,AAAKhG;;AAClB,AAACiG,AAAK,AAACC,AAAKJ;AAF1B,AAAA,AAAA/H;AAAAA;;AAGE,AAACsH,AAAO,AAAC5D,AAAMqE;;;;;AAJhC;AAKgB;AALhB,AAMS,AAACvD,AAAI,AAAA,AAACnD;AAAD,AAAA;AAAA,AAAM,AAAA+G,AAAAA,AAAAC,AAAAD,AAAAC;;AAAN,AAAeC,AAAIA,AAAIC,AAAUC;;;AAN/C,AAOC,AAAA,AAAA,AAAM,AAASzG,AAAKE;AAApB,AAEE,AAAA,AAAiB,AAACM,AAAIkG,AAAW,AAAA,AAAK1G;AAAtC,AAAA,AAAAoB;AAAA,AAAAA,AAAS;AAAT,AACE,AAACuF,AAAO,AAAA,AAAA,AAAA,AAAA,AAACtE,AAAI,AAACuE,AAAgBZ,AAAQ9F;;AACtC2G;;;AAET;;;;AAAA,AAAA,AAAMG,AAGiC,AAAI;AAH3C,AAAA,AAAA,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1G,AAAA,AAAA0G,AAAA,AAAA,AAAA,AAAA,AAAAzG,AAAAC,AAAAwG,AAAAA;AAAA,AAAAvG,AAAAuG,AAAA,AAGW;AAHX,AAAAvG,AAAAuG,AAAA,AAGoB;AAHpB,AAAAvG,AAAAuG,AAAA,AAGyB;AAHzB,AAAAvG,AAAAuG,AAAA,AAG8B;AAH9B,AAIE,AAAM,AAAqB,AAAA,AAAA1I,AAAA,AAAQwB,AAAU,AAAA,AAACrC,AAAaqC;AAA3D,AAC2B,AAAA,AAAA,AAAIqH,AACDlH,AAAKE,AACN,AAAC2F,AAAwBC,AAAIjG,AAAKG,AAAKE;AAHpE,AAAA1B,AAAAyI,AAAA,AAAA,AACO;AADP,AAAAzI,AAAAyI,AAAA,AAAA,AACa;AADb,AAAAzI,AAAAyI,AAAA,AAAA,AACqB;AAGf,AAAqB,AAAA,AAAA,AAAUC,AACR,AAAI,AAAA,AAACtJ,AAAWiC,AACd,AAAA,AAAK,AAAA,AAACyF,AAAKzF,AAAO,AAAA,AAAG,AAACH,AAAMG,AAC5BA;AAP/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAQagC,AACAsF,AACA,AAAID,AACF,AAAA,AAAsB,AAAA,AAAA,AAAMrH,AAAK,AAAA,AAASA,AAC1CuH,AACFC,AACAC;;AAEf,AAAA;;;;;;;;;;;;;;;AAAA,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD,AAcF,AAAW;AAdf,AAeG,AAAA,AAACE,AAAkBC,AAAW7B;;;AAfjC,AAAA,AAAA,AAAM0B,AAgBF,AAAW,AAAI;AAhBnB,AAiBG,AAAA,AAAyB;AAAzB,AACU,AAAI,AAAA,AAAOnI;AACT,AAAAuI,AAAA,AAAA,AAAA,AAAoB,AAAA,AAAOvI;;AAD7B;;;AADV,AAIqB,AAAS;AAJ9B,AAKU,AAACwI,AACC,AAAK,AAAe;AAApB,AACE,AAAI,AAACpE,AAAEqE,AACA,AAAA,AAAA,AAAChI,AAAe,AAACiI,AAAMC;AAC5BA;;AACAF;;AACJjG,AAASsF;;AAXrB,AAYE,AAAM,AAAc,AAAC9E,AAAI,AAAA,AAAA,AAAC4F;AAAD,AAAU,AAAAC,AAAClB,AAAelB,AAAI5H;AAAOyJ;AAA9D,AAIE,AAAClF,AAAI,AAACnD,AAAI6I,AACH,AAAA,AAAC9F;AAAD;AAAA,AAAM,AAAA+F,AAAA,AAACC;;AAAgBC,AACvB,AAAA,AAAA,AAACC,AAAO,AAACC,AAAK,AAACnG,AAAIoG,AAAeH;;;AAnChD,AAAA,AAAA,AAAMd;;AAAN,AAqCA,AAAA;;;;;AAAA,AAAA,AAAMmB;AAAN,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAD;AAAA;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAlB,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMkB,AAIF,AAAW;AAJf,AAKG,AAAA,AAACC,AAAsBjB,AAAW7B;;;AALrC,AAAA,AAAA,AAAM6C,AAMF,AAAW,AAAI;AANnB,AAOG,AAAA,AAAA,AAAAE;AAAA,AAAA,AAAA,AAAAC;AAAA,AAAAC;AAAA,AAAA;AAAA,AAAA;AAAA;AAAA,AAAA,AAAAC,AAAAC;;;AAAA,AAAA,AAAAH,AAAAI;;AAAA,AAAAH,AAAAI;;AAAA,AAAA,AACE,AAAA,AAAA,AAAAG,AACQ,AAAC5B,AAAkBC,AAAW7B,AAAI5H;AAD1C,AAAA;AAAA,AAAA;AAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAqL,AAAAC;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArJ,AAAA,AAAAqJ,AAAA,AAAA,AAAA,AAAA,AAAApJ,AAAAC,AAAAmJ,AAAAA;AAAA,AAAAlJ,AAAAkJ,AAAA,AAAgB;AAAhB,AAAAlJ,AAAAkJ,AAAA,AAAyB;AAAzB,AAAAlJ,AAAAkJ,AAAA,AAA8B;AAA9B,AAAAlJ,AAAAkJ,AAAA,AAAmC;AAAnC,AAAA,AAEE,AAAA,AAACS,AACC,AAAA,AAAA,AAAK,AAAA,AAAA,AAAMtI,AAAS,AAAA,AAAKA,AAChBhC,AAAK,AAAA,AAAA,AAAMG,AAAK,AAAA,AAASA,AACpB,AAAA,AAAA,AAAME,AAAO,AAAA,AAASA;;AALxC;AAAA,AAAAyJ;AAAAF;AAAAD;AAAA,AAAAD,AAAA;;;;;;;AAAA,AAAA,AAAA,AAAAD,AAAAK;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAAK;AAAA,AAAAtK,AAAAsK;AAAA;;;;;;;AAAA,AAAA,AAAA,AAAArI,AAAAgI;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5J,AAAA,AAAA4J,AAAA,AAAA,AAAA,AAAA,AAAA3J,AAAAC,AAAA0J,AAAAA;AAAA,AAAAzJ,AAAAyJ,AAAA,AAAgB;AAAhB,AAAAzJ,AAAAyJ,AAAA,AAAyB;AAAzB,AAAAzJ,AAAAyJ,AAAA,AAA8B;AAA9B,AAAAzJ,AAAAyJ,AAAA,AAAmC;AAAnC,AAAA,AAEE,AAAA,AAACE,AACC,AAAA,AAAA,AAAK,AAAA,AAAA,AAAMtI,AAAS,AAAA,AAAKA,AAChBhC,AAAK,AAAA,AAAA,AAAMG,AAAK,AAAA,AAASA,AACpB,AAAA,AAAA,AAAME,AAAO,AAAA,AAASA;;AALxC;AAAA,AAAA,AAAAgK,AAAAP;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;AADF,AAAA,AAAAZ,AAAAK;;AAAA,AAAAN,AAAAO;;AAAA,AAAAL;;;AAPH,AAAA,AAAA,AAAML;;AAAN,AAeA","names":["js/cljs","js/cljs.stacktrace","js/cljs.stacktrace.parse-stacktrace","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__11385","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","hierarchy__4528__auto__","method-table__4524__auto__","prefer-table__4525__auto__","method-cache__4526__auto__","cached-hierarchy__4527__auto__","cljs.stacktrace/parse-stacktrace","err","cljs.stacktrace/parse-int","js/parseInt","s","cljs.stacktrace/starts-with?","goog.string/startsWith","s0","s1","cljs.stacktrace/ends-with?","goog.string/endsWith","cljs.stacktrace/string->regex","js/RegExp","cljs.stacktrace/output-directory","or__4047__auto__","opts","st","cljs.stacktrace/parse-file-line-column","cljs.core/not","cljs.core/re-find","flc","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__11393","vec__11396","clojure.string.split.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__11399","vec__11401","p__11400","vec__11404","i","pre","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","post","x","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","xs","cljs.core.range.cljs$core$IFn$_invoke$arity$3","cljs.core/count","clojure.string.join.cljs$core$IFn$_invoke$arity$2","G__11407","file","clojure.string/replace","G__11408","line","G__11410","column","p__11416","map__11418","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__11417","map__11420","cljs.stacktrace/parse-file","host","host-port","port","urlpat","cljs.core/contains?","match","and__4036__auto__","asset-path","temp__5455__auto__","asset-root","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.stacktrace/chrome-st-el->frame","vec__11428","vec__11431","st-el","cljs.core/first","cljs.core/last","function","repl-env","clojure.string/blank?","clojure.string/split-lines","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","p1__11436#","cljs.core.take_while.cljs$core$IFn$_invoke$arity$2","p1__11438#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__11439#","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/nil?","cljs.core/vec","cljs.stacktrace/safari-st-el->frame","vec__11441","vec__11444","clojure.string/trim","p1__11449#","p1__11450#","p1__11451#","cljs.stacktrace/firefox-clean-function","f","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","idx","cljs.stacktrace/firefox-st-el->frame","vec__11472","vec__11475","p1__11488#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p1__11489#","p1__11490#","p__11496","map__11497","frame-str","vec__11527","vec__11530","file-side","line-fn-side","output-dir","process-frame","p__11544","map__11545","vec__11556","vec__11559","file-and-line","file-part","line-part","p__11566","map__11567","vec__11577","vec__11580","p__11584","map__11585","clojure.string/starts-with?","vec__11608","vec__11611","parts","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core/second","file&line","G__11614","parse-source-loc-info","col-part","cljs.stacktrace/remove-ext","cljs.stacktrace/mapped-line-column-call","sms","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","columns","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p1__11618#","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/keys","p1__11619#","p2__11620#","cljs.core/inc","cljs.core/identity","mapped","source-map","adjust","get-best-column","default","p__11650","map__11651","cljs.stacktrace/mapped-frame","vec__11658","no-source-file?","call","file'","line'","column'","G__11675","cljs.stacktrace/mapped-stacktrace","js/Error","cljs.stacktrace.mapped_stacktrace.cljs$core$IFn$_invoke$arity$3","stacktrace","cljs.core/PersistentHashMap","cljs.core.merge_with.cljs$core$IFn$_invoke$arity$variadic","munged-fn-name","cljs.core/munge","unmunged-call-name","cljs.core/memoize","p1__11669#","call-merge","p1__11670#","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","mapped-frames","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/rest","call->function","G__11701","cljs.stacktrace/mapped-stacktrace-str","cljs.stacktrace.mapped_stacktrace_str.cljs$core$IFn$_invoke$arity$3","goog.string/StringBuffer","cljs.core/*print-newline*","cljs.core/*print-fn*","sb__4572__auto__","x__4573__auto__","*print-newline*-temp-val__11707","*print-fn*-temp-val__11708","*print-fn*-orig-val__11706","*print-newline*-orig-val__11705","cljs.core/seq","i__11715","count__11714","chunk__11713","map__11716","seq__11712","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","map__11721","cljs.core/next","cljs.core.println.cljs$core$IFn$_invoke$arity$variadic"]}