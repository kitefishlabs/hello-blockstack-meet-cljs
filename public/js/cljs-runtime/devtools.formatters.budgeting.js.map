{"version":3,"sources":["devtools/formatters/budgeting.cljs"],"sourcesContent":["(ns devtools.formatters.budgeting\n  (:require-macros [devtools.oops :refer [oget oset ocall]])\n  (:require [devtools.formatters.templating :refer [render-markup]]\n            [devtools.formatters.state :refer [get-depth-budget set-depth-budget]]\n            [devtools.formatters.helpers :refer [pref]]\n            [devtools.formatters.markup :refer [<header-expander>]]))\n\n; This functionality provides a workaround to issue #22 (https://github.com/binaryage/cljs-devtools/issues/22).\n; The idea is to track hierarchy depth for json-ml(s) we are generating.\n; If we are about to cross the depth limit hardcoded in WebKit,\n; instead we render simple expandable placeholders which resume full rendering in their bodies (when expanded by user).\n; Note that this technique has some quirks, it may break styling in some pathological cases.\n\n; we need to reserve some depth levels for our expander symbol markup\n(def header-expander-depth-cost 2)\n\n; -- tracking over-budget values  -------------------------------------------------------------------------------------------\n\n; note: phantomjs does not have WeakSet, so we have to emulate it when testing\n(def over-budget-values (if (exists? js/WeakSet) (js/WeakSet.) (volatile! #{})))\n\n(defn add-over-budget-value! [value]\n  (if (volatile? over-budget-values)\n    (vreset! over-budget-values (conj @over-budget-values value))\n    (ocall over-budget-values \"add\" value)))\n\n(defn delete-over-budget-value! [value]\n  (if (volatile? over-budget-values)\n    (vreset! over-budget-values (disj @over-budget-values value))\n    (ocall over-budget-values \"delete\" value)))\n\n(defn has-over-budget-value? [value]\n  (if (volatile? over-budget-values)\n    (contains? @over-budget-values value)\n    (ocall over-budget-values \"has\" value)))\n\n; -- depth budget accounting ------------------------------------------------------------------------------------------------\n\n(defn object-reference? [json-ml]\n  (= (first json-ml) \"object\"))\n\n(defn determine-depth [json-ml]\n  (if (array? json-ml)\n    (inc (apply max (map determine-depth json-ml)))\n    0))\n\n(defn has-any-object-reference? [json-ml]\n  (if (array? json-ml)\n    (if (object-reference? json-ml)\n      true\n      (some has-any-object-reference? json-ml))))\n\n(defn transfer-remaining-depth-budget! [object-reference depth-budget]\n  {:pre [(not (neg? depth-budget))]}\n  (let [data (second object-reference)\n        _ (assert (object? data))\n        config (oget data \"config\")]\n    (oset data [\"config\"] (set-depth-budget config depth-budget))))\n\n(defn distribute-budget! [json-ml depth-budget]\n  {:pre [(not (neg? depth-budget))]}\n  (if (array? json-ml)\n    (let [new-depth-budget (dec depth-budget)]\n      (if (object-reference? json-ml)\n        (transfer-remaining-depth-budget! json-ml new-depth-budget)\n        (doseq [item json-ml]\n          (distribute-budget! item new-depth-budget)))))\n  json-ml)\n\n; -- api --------------------------------------------------------------------------------------------------------------------\n\n(defn was-over-budget?! [value]\n  (when (has-over-budget-value? value)\n    (delete-over-budget-value! value)\n    true))\n\n(defn alter-json-ml-to-fit-in-remaining-budget! [value json-ml]\n  (if-let [initial-hierarchy-depth-budget (pref :initial-hierarchy-depth-budget)]                                             ; this is hardcoded in InjectedScriptSource.js in WebKit, look for maxCustomPreviewRecursionDepth\n    (let [remaining-depth-budget (or (get-depth-budget) (dec initial-hierarchy-depth-budget))\n          depth (determine-depth json-ml)\n          final? (not (has-any-object-reference? json-ml))\n          needed-depth (if final? depth (+ depth header-expander-depth-cost))]\n      (if (>= remaining-depth-budget needed-depth)\n        (distribute-budget! json-ml remaining-depth-budget)\n        (let [expander-ml (render-markup (<header-expander> value))]\n          (add-over-budget-value! value)                                                                                      ; we need to record over-budget values to for later was-over-budget?! check, see has-body* in formatters.core\n          expander-ml)))\n    json-ml))\n"],"mappings":";;;;;;AAcA,AAAA,AAAKA;AAKL,AAAKC,AAAmB,AAAI,AAAAC,AAAqB,AAAAA,AAAc,AAAA,AAACC;AAEhE,AAAA,AAAMC,AAAwB;AAA9B,AACE,AAAI,AAACC,AAAUJ;AACb,AAACK,AAAQL,AAAmB,AAAA,AAAAM,AAACC,AAAMP,AAAmBQ;;AACtD,AAAA,AAAOR;AAAP,AAAA,AAAA,AAAAS,AAAA,AAAAA,AAAgCD;;;AAEpC,AAAA,AAAME,AAA2B;AAAjC,AACE,AAAI,AAACN,AAAUJ;AACb,AAACK,AAAQL,AAAmB,AAAA,AAAAM,AAACK,AAAMX,AAAmBQ;;AACtD,AAAA,AAAOR;AAAP,AAAA,AAAA,AAAAS,AAAA,AAAAA,AAAmCD;;;AAEvC,AAAA,AAAMI,AAAwB;AAA9B,AACE,AAAI,AAACR,AAAUJ;AACb,AAAA,AAAAM,AAACO,AAAWb,AAAmBQ;;AAC/B,AAAA,AAAOR;AAAP,AAAA,AAAA,AAAAS,AAAA,AAAAA,AAAgCD;;;AAIpC,AAAA,AAAMM,AAAmB;AAAzB,AACE,AAAA,AAACC,AAAE,AAACC,AAAMC;;AAEZ,AAAA,AAAMC,AAAiB;AAAvB,AACE,AAAI,AAACC,AAAOF;AACV,AAAA,AAAK,AAACG,AAAMC,AAAI,AAACC,AAAIJ,AAAgBD;;AADvC;;;AAIF,AAAA,AAAMM,AAA2B;AAAjC,AACE,AAAI,AAACJ,AAAOF;AACV,AAAI,AAACH,AAAkBG;AAAvB;;AAEE,AAACO,AAAKD,AAA0BN;;;AAHpC;;;AAKF,AAAA,AAAMS,AAAkC,AAAiB;AAAzD,AAAA,AACS,AAAK,AAAA,AAAMC;AADpB;AAAA,AAAA,AAAA,AAAAF,AAAA;;;AAEE,AAAM,AAAK,AAACG,AAAOC;AACb,AAAE,AAAA,AAAA,AAAA,AAAA,AAAAJ,AAAA,AAAQ,AAACK,AAAQC;AACnB,AAAO,AAAA,AAAMA;AAFnB,AAGE,AAAA,AAAMA;AAAN,AAAAC;AAAA,AAAA,AAAAC;AAAA;AAAA,AAAA,AAAA,AAAAR,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAO,AAAA,AAAA;;;AAAA,AAAAC,AAAA,AAAsB,AAACC,AAAiBC,AAAOR;;AAA/CK;;AAEJ,AAAA,AAAMI,AAAoB,AAAQ;AAAlC,AAAA,AACS,AAAK,AAAA,AAAMT;AADpB;AAAA,AAAA,AAAA,AAAAF,AAAA;;;AAEE,AAAI,AAACN,AAAOF;AACV,AAAM,AAAiB,AAAA,AAAKU;AAA5B,AACE,AAAI,AAACb,AAAkBG;AACrB,AAACS,AAAiCT,AAAQoB;;AAC1C,AAAA,AAAA,AAAAC,AAAarB;AAAb,AAAA;AAAA,AAAA;AAAA,AAAA;;AAAA,AAAA,AAAA,AAAA,AAAAsB,AAAAC;AAAA,AAAA,AAAAC,AAAAF,AAAQ;AAAR,AAAA,AACE,AAACH,AAAAA,AAAAA,AAAmBc,AAAAA,AAAKb,AAAAA;;AAD3B;AAAA,AAAAK;AAAAD;AAAAD;AAAA,AAAAD,AAAA;;;;;;;AAAA,AAAA,AAAA,AAAAD,AAAAI;AAAA,AAAA,AAAAC;AAAA,AAAA,AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAG,AAAAH;AAAA,AAAA,AAAA,AAAAI,AAAAJ;AAAAK;AAAA,AAAAC,AAAAD;AAAA;;;;;;;AAAA,AAAA,AAAA/B,AAAA0B,AAAQ;AAAR,AAAA,AACE,AAACN,AAAAA,AAAAA,AAAmBc,AAAAA,AAAKb,AAAAA;;AAD3B;AAAA,AAAA,AAAAY,AAAAP;AAAA;AAAA;AAAA;;;;;;;;AAAA;;;;;;AAJN;;AAMAzB;;AAIF,AAAA,AAAMkC,AAAmB;AAAzB,AACE,AAAM,AAACvC,AAAuBJ;AAA9B,AACE,AAACE,AAA0BF;;AAD7B;;AAAA;;;AAIF,AAAA,AAAM4C,AAA2C,AAAM;AAAvD,AACE,AAAA,AAAwC,AAAA,AAACE;AAAzC,AAAA,AAAAD;AAAA,AAAAA,AAAS;AAAT,AACE,AAAM,AAAuB,AAAA,AAAI,AAACG;AAAL,AAAA,AAAAD;AAAAA;;AAAuB,AAAA,AAAKE;;;AACnD,AAAM,AAACvC,AAAgBD;AACvB,AAAO,AAACyC,AAAI,AAACnC,AAA0BN;AACvC,AAAa,AAAI0C,AAAOC,AAAM,AAAGA,AAAM7D;AAH7C,AAIE,AAAI,AAAI8D,AAAuBC;AAC7B,AAAC1B,AAAmBnB,AAAQ4C;;AAC5B,AAAM,AAAY,AAACE,AAAc,AAACC,AAAkBxD;AAApD,AACE,AAACL,AAAuBK;;AACxByD;;;AACNhD","names":["devtools.formatters.budgeting/header-expander-depth-cost","devtools.formatters.budgeting/over-budget-values","js/WeakSet","cljs.core/volatile!","devtools.formatters.budgeting/add-over-budget-value!","cljs.core/volatile?","cljs.core/vreset!","cljs.core/deref","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","value","o__12052__auto__","devtools.formatters.budgeting/delete-over-budget-value!","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","devtools.formatters.budgeting/has-over-budget-value?","cljs.core/contains?","devtools.formatters.budgeting/object-reference?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/first","json-ml","devtools.formatters.budgeting/determine-depth","cljs.core/array?","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core.map.cljs$core$IFn$_invoke$arity$2","devtools.formatters.budgeting/has-any-object-reference?","cljs.core/some","js/Error","devtools.formatters.budgeting/transfer-remaining-depth-budget!","depth-budget","cljs.core/second","object-reference","cljs.core/object?","data","G__14754","target__12068__auto__","devtools.formatters.state/set-depth-budget","config","devtools.formatters.budgeting/distribute-budget!","new-depth-budget","cljs.core/seq","i__14761","count__14760","chunk__14759","seq__14758","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/next","item","devtools.formatters.budgeting/was-over-budget?!","devtools.formatters.budgeting/alter-json-ml-to-fit-in-remaining-budget!","temp__5455__auto__","devtools.formatters.helpers/pref","or__4047__auto__","devtools.formatters.state/get-depth-budget","initial-hierarchy-depth-budget","cljs.core/not","final?","depth","remaining-depth-budget","needed-depth","devtools.formatters.templating/render-markup","devtools.formatters.markup/<header-expander>","expander-ml"]}