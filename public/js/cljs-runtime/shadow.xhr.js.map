{"version":3,"sources":["shadow/xhr.cljs"],"sourcesContent":["(ns shadow.xhr\n  \"FIXME: rewrite to using promises, since closure is deprecating result\"\n  (:require [goog.result :as gresult]\n            goog.result.SimpleResult\n            [goog.labs.net.xhr :as gxhr]\n            [cljs.reader :as cr]\n            [goog.uri.utils :as gutils]\n            [goog.json :as gjson]\n            [shadow.object :as so]\n            [shadow.dom :as dom]\n            [cljs.core.async :as async]\n            [clojure.string :as str]\n            [shadow.util :as util :refer (log)]\n            ))\n\n(defn result-chain [res handler]\n  (gresult/chain res handler))\n\n(defn result-combine [& results]\n  (apply gresult/combine results))\n\n(defn result-wait-on-success [res callback]\n  (gresult/waitOnSuccess res callback))\n\n(defn result-success? [res]\n  (= js/goog.result.Result.State.SUCCESS (.getState res)))\n\n(defn result-value [res]\n  (.getValue res))\n\n(defn result-immediate [value]\n  (gresult/successfulResult value))\n\n(defn result-error [res callback]\n  (gresult/waitOnError res callback))\n\n;; FIXME: this whole module is a mess ...\n\n(defn- edn-transform [body]\n  (cr/read-string body))\n\n(defn- json-transform [body]\n  (js->clj (.parse js/JSON body)))\n\n(def goog-keys {:timeout \"timeoutMs\"\n                :with-credentials \"withCredentials\"\n                :headers \"headers\"\n                :mime-type \"mimeType\"\n                })\n\n(defn make-request-options [options]\n  (let [obj (js-obj)]\n    (doseq [[k v] options]\n      (aset obj (get goog-keys k) (clj->js v)))\n    obj\n    ))\n\n(def content-transforms\n  (atom\n    {\"text/edn\" edn-transform\n     \"application/edn\" edn-transform\n     \"application/json\" json-transform\n     \"text/html\" identity\n     \"text/plain\" identity}))\n\n(defn register-transform [content-type transform-fn]\n  (swap! content-transforms assoc content-type transform-fn))\n\n(defn auto-transform [req]\n  (let [content-type (let [ct (str/lower-case (.getResponseHeader req \"Content-Type\"))\n                           sep (.indexOf ct \";\")]\n                       (if (not= -1 sep)\n                         (.substring ct 0 sep)\n                         ct))\n        transform-fn (get @content-transforms content-type)]\n    (if (nil? transform-fn)\n      (throw (ex-info \"unsupported content-type\" {:req req :content-type content-type}))\n      (transform-fn (.-responseText req)))))\n\n(defn make-url [url params]\n  (gutils/appendParamsFromMap url (clj->js params)))\n\n(defn transform-request-body [data]\n  (cond\n    (string? data)\n    [\"text/plain; charset=utf-8\" data]\n    (satisfies? IPrintWithWriter data)\n    [\"text/edn; charset=utf-8\" (pr-str data)]\n    :default\n    [\"application/octet-stream\" data]\n    ))\n\n(defn as-url [input]\n  (cond\n    (string? input)\n    input\n\n    (and (vector? input)\n         (= 2 (count input))\n         (string? (first input))\n         (map? (second input)))\n    (let [[url params] input]\n      (make-url url params))\n\n    :else\n    (throw (ex-info \"doesnt look like an url\" {:input input}))\n    ))\n\n(defn e->data [e]\n  e)\n\n(defn event-handler [req events event-type]\n  (fn [e]\n    (cond\n      (map? events)\n      (when-let [c (get events event-type)]\n        (async/put! c [req (e->data e)]))\n\n      (not (nil? events))\n      (async/put! events [event-type req (e->data e)])\n\n      :else\n      nil)))\n\n(defn request-ok? [status]\n  (= 200 status))\n\n(defn request-error? [status]\n  (>= status 400))\n\n(defn chan\n  \"creates a channel and performs xhr request like (chan :GET \\\"/something\\\")\n\n   accepts url as string or [url params]\n\n   this channel will receive one message [status body req] on load\n   loadend will close the result channel, so you will get nil results on request errors/timeouts\n\n   use options hash to pass in extra channels\n\n   (chan :POST \\\"/something\\\" some-data {:events chan-or-map\n                                         :upload chan-or-map})\n\n   when given a chan that channels receives messages in form of [event-type event-data req]\n   when given a map a channel is expected for each eventtype and will receive [event-data req]\n   {:timeout some-chan}, if no channel for a given event is present, no message is sent\n\n   event types are :loadstart :progress :abort :error :timeout :loadend :load (see xhr spec)\n   only exception is that status >= 500 does not return a result and produces an error event instead\"\n\n  ([method url]\n   (chan method url nil {}))\n  ([method url data]\n   (chan method url data {}))\n  ([method url data {:keys [events\n                            upload\n                            body-only]\n                     :as options}]\n   (let [req (js/XMLHttpRequest.)\n         body? (not= :GET method)\n         [content-type body] (if body?\n                               (transform-request-body data)\n                               [nil nil])\n         result-chan (async/chan 1)]\n\n     (when (and body? upload)\n       (dom/on (.-upload req) :loadstart (event-handler req upload :loadstart))\n       (dom/on (.-upload req) :progress (event-handler req upload :progress))\n       (dom/on (.-upload req) :abort (event-handler req upload :abort))\n       (dom/on (.-upload req) :error (event-handler req upload :error))\n       (dom/on (.-upload req) :timeout (event-handler req upload :timeout))\n       (dom/on (.-upload req) :loadend (event-handler req upload :loadend))\n       (dom/on (.-upload req) :load (event-handler req upload :loadend)))\n\n     (dom/on req :loadstart (event-handler req events :loadstart))\n     (dom/on req :progress (event-handler req events :progress))\n     (dom/on req :abort (event-handler req events :abort))\n     (dom/on req :timeout (event-handler req events :timeout))\n\n     (dom/on req :loadend (let [callback (event-handler req events :loadend)]\n                            (fn [e]\n                              (callback e)\n                              (async/close! result-chan))))\n\n     (let [error-handler (event-handler req events :error)]\n       (dom/on req :error error-handler)\n\n       (dom/on req :load (let [callback (event-handler req events :load)]\n                           (fn [e]\n                             (let [status (.-status req)\n                                   body\n                                   (if-let [transform (:transform options)]\n                                     (transform (.-responseText req) req)\n                                     (auto-transform req))]\n                               (if (request-error? status)\n                                 (error-handler e)\n                                 (do (callback e)\n                                     (if body-only\n                                       (async/put! result-chan body)\n                                       (async/put! result-chan [status body req])))))))))\n\n     (.open req (name method) (as-url url) true)\n\n     ;; must set after open\n     ;; FIXME: bad for CORS! but who uses http auth for anything serious?\n     (set! (.-responseType req) \"text\")\n     (set! (.-withCredentials req) (not (false? (:with-credentials options))))\n\n     (when body?\n       (.setRequestHeader req \"Content-Type\" content-type))\n\n     (if body?\n       (.send req body)\n       (.send req))\n\n     result-chan\n     )))\n\n(defn request\n  ([method url]\n   (request method url nil {}))\n  ([method url data]\n   (request method url data {}))\n  ([method url data options]\n   (when (and (not (contains? #{:GET :DELETE} method)) (nil? data))\n     (throw (ex-info \"request needs data\" {:method method :url url :data data :options options})))\n\n   (let [body? (not (or (= :GET method) (nil? data)))\n         [content-type body] (transform-request-body data)\n         req (gxhr/send (name method)\n               (if (and (= :GET method) data)\n                 (make-url url data)\n                 url)\n               (when body?\n                 body)\n               (make-request-options\n                 (if body?\n                   (assoc-in options [:headers \"Content-Type\"] content-type)\n                   options))\n               )\n         req (js/goog.result.SimpleResult.fromPromise req)\n         ]\n     (gresult/transform req auto-transform))))\n\n(defn upload [url file & events]\n  (let [xhr (js/XMLHttpRequest.)]\n    (doseq [[ev-id ev-handler] (partition 2 events)\n            :let [target (if (= :progress ev-id) (aget xhr \"upload\") xhr)]]\n      (.addEventListener target (name ev-id) ev-handler))\n    (doto xhr\n      (.open \"PUT\" url)\n      (.send file))))\n"],"mappings":"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","names":["shadow.xhr/result-chain","goog.result/chain","res","handler","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","shadow.xhr/result-combine","argseq__4648__auto__","self__4629__auto__","cljs.core/seq","seq21870","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","goog.result/combine","results","shadow.xhr/result-wait-on-success","goog.result/waitOnSuccess","callback","shadow.xhr/result-success?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","js/goog.result.Result.State.SUCCESS","shadow.xhr/result-value","shadow.xhr/result-immediate","goog.result/successfulResult","value","shadow.xhr/result-error","goog.result/waitOnError","shadow.xhr/edn-transform","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","body","shadow.xhr/json-transform","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","js/JSON","shadow.xhr/goog-keys","shadow.xhr/make-request-options","i__21878","count__21877","chunk__21876","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__21879","seq__21875","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","vec__21887","cljs.core/next","options","obj","cljs.core.get.cljs$core$IFn$_invoke$arity$2","k","cljs.core/clj->js","v","shadow.xhr/content-transforms","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/identity","shadow.xhr/register-transform","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","content-type","transform-fn","shadow.xhr/auto-transform","clojure.string/lower-case","req","ct","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","sep","cljs.core/deref","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__21891","shadow.xhr/make-url","G__21892","G__21893","goog.uri.utils/appendParamsFromMap","url","params","shadow.xhr/transform-request-body","data","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","shadow.xhr/as-url","input","cljs.core/vector?","cljs.core/map?","cljs.core/second","vec__21907","shadow.xhr/e->data","e","shadow.xhr/event-handler","events","event-type","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","c","shadow.xhr/request-ok?","status","shadow.xhr/request-error?","G__21948","shadow.xhr/chan","js/Error","p__21950","map__21953","cljs.core/hash-map","shadow.xhr.chan.cljs$core$IFn$_invoke$arity$4","method","vec__21960","js/XMLHttpRequest","body?","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","and__4036__auto__","upload","shadow.dom.on.cljs$core$IFn$_invoke$arity$3","cljs.core.async/close!","result-chan","error-handler","temp__5455__auto__","G__21966","G__21967","transform","body-only","cljs.core/name","G__21973","shadow.xhr/request","shadow.xhr.request.cljs$core$IFn$_invoke$arity$4","cljs.core/contains?","vec__21980","G__21987","G__21988","G__21989","G__21990","goog.labs.net.xhr/send","cljs.core/assoc-in","js/goog.result.SimpleResult.fromPromise","goog.result/transform","shadow.xhr/upload","seq21996","self__4628__auto__","G__21997","G__21998","i__22014","count__22013","chunk__22012","vec__22018","seq__22010","vec__22021","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","ev-id","xhr","target","ev-handler","G__22024","file"]}