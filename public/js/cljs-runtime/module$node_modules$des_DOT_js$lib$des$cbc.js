shadow$provide.module$node_modules$des_DOT_js$lib$des$cbc=function(global,process,require,module,exports,shadow$shims){function CBCState(iv){assert.equal(iv.length,8,"Invalid IV length");this.iv=Array(8);for(var i=0;i<this.iv.length;i++)this.iv[i]=iv[i]}var assert=require("module$node_modules$minimalistic_assert$index"),inherits=require("module$node_modules$inherits$inherits_browser"),proto={};exports.instantiate=function(Base){function CBC(options){Base.call(this,options);this._cbcInit()}inherits(CBC,
Base);for(var keys=Object.keys(proto),i=0;i<keys.length;i++){var key=keys[i];CBC.prototype[key]=proto[key]}CBC.create=function(options){return new CBC(options)};return CBC};proto._cbcInit=function(){this._cbcState=new CBCState(this.options.iv)};proto._update=function(inp,inOff,out,outOff){var superProto=this.constructor.super_.prototype,iv=this._cbcState.iv;if("encrypt"===this.type){for(var i=0;i<this.blockSize;i++)iv[i]^=inp[inOff+i];superProto._update.call(this,iv,0,out,outOff);for(i=0;i<this.blockSize;i++)iv[i]=
out[outOff+i]}else{superProto._update.call(this,inp,inOff,out,outOff);for(i=0;i<this.blockSize;i++)out[outOff+i]^=iv[i];for(i=0;i<this.blockSize;i++)iv[i]=inp[inOff+i]}}}
//# sourceMappingURL=module$node_modules$des_DOT_js$lib$des$cbc.js.map
