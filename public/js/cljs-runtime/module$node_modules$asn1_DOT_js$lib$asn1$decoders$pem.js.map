{
"version":3,
"file":"module$node_modules$asn1_DOT_js$lib$asn1$decoders$pem.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,sDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAMvIC,QAASA,WAAU,CAACC,MAAD,CAAS,CAC1BC,UAAAC,KAAA,CAAgB,IAAhB,CAAsBF,MAAtB,CACA,KAAAG,IAAA,CAAW,KAFe,CALxBC,MAAAA,CAAWT,OAAA,CAAQ,+CAAR,CACf,KAAIU,OAASV,OAAA,CAAQ,kCAAR,CAAAU,OAAb,CAEIJ,WAAaN,OAAA,CAAQ,uDAAR,CAMjBS,OAAA,CAASL,UAAT,CAAqBE,UAArB,CACAL,OAAAC,QAAA,CAAiBE,UAEjBA,WAAAO,UAAAC,OAAA,CAA8BC,QAAe,CAACC,IAAD;AAAOC,OAAP,CAAgB,CACvDC,IAAAA,CAAQF,IAAAG,SAAA,EAAAC,MAAA,CAAsB,UAAtB,CAOZ,KALA,IAAIC,MAAQJ,OAAAI,MAAAC,YAAA,EAAZ,CAEIC,GAAK,iCAFT,CAGIC,MAAS,EAHb,CAIIC,IAAO,EAJX,CAKSC,EAAI,CAAb,CAAgBA,CAAhB,CAAoBR,IAAAS,OAApB,CAAkCD,CAAA,EAAlC,CAAuC,CACrC,IAAIE,MAAQV,IAAA,CAAMQ,CAAN,CAAAE,MAAA,CAAeL,EAAf,CACZ,IAAc,IAAd,GAAIK,KAAJ,EAGIA,KAAA,CAAM,CAAN,CAHJ,GAGiBP,KAHjB,CAMA,GAAe,EAAf,GAAIG,KAAJ,CAAkB,CAChB,GAAiB,OAAjB,GAAII,KAAA,CAAM,CAAN,CAAJ,CACE,KACFJ,MAAA,CAAQE,CAHQ,CAAlB,IAIO,CACL,GAAiB,KAAjB,GAAIE,KAAA,CAAM,CAAN,CAAJ,CACE,KACFH,IAAA,CAAMC,CACN,MAJK,CAZ8B,CAmBvC,GAAe,EAAf,GAAIF,KAAJ,EAA6B,EAA7B,GAAoBC,GAApB,CACE,KAAUI,MAAJ,CAAU,6BAAV,CAA0CR,KAA1C,CAAN,CAEES,IAAAA,CAASZ,IAAAa,MAAA,CAAYP,KAAZ,CAAoB,CAApB,CAAuBC,GAAvB,CAAAO,KAAA,CAAiC,EAAjC,CAEbF,KAAAG,QAAA,CAAe,mBAAf,CAAoC,EAApC,CAEIC,KAAAA,CAAQ,IAAItB,MAAJ,CAAWkB,IAAX,CAAmB,QAAnB,CACZ;MAAOtB,WAAAK,UAAAC,OAAAL,KAAA,CAAiC,IAAjC,CAAuCyB,IAAvC,CAA8CjB,OAA9C,CAnCoD,CAb0E;",
"sources":["node_modules/asn1_DOT_js/lib/asn1/decoders/pem.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$asn1_DOT_js$lib$asn1$decoders$pem\"] = function(global,process,require,module,exports,shadow$shims) {\nvar inherits = require('inherits');\nvar Buffer = require('buffer').Buffer;\n\nvar DERDecoder = require('./der');\n\nfunction PEMDecoder(entity) {\n  DERDecoder.call(this, entity);\n  this.enc = 'pem';\n};\ninherits(PEMDecoder, DERDecoder);\nmodule.exports = PEMDecoder;\n\nPEMDecoder.prototype.decode = function decode(data, options) {\n  var lines = data.toString().split(/[\\r\\n]+/g);\n\n  var label = options.label.toUpperCase();\n\n  var re = /^-----(BEGIN|END) ([^-]+)-----$/;\n  var start = -1;\n  var end = -1;\n  for (var i = 0; i < lines.length; i++) {\n    var match = lines[i].match(re);\n    if (match === null)\n      continue;\n\n    if (match[2] !== label)\n      continue;\n\n    if (start === -1) {\n      if (match[1] !== 'BEGIN')\n        break;\n      start = i;\n    } else {\n      if (match[1] !== 'END')\n        break;\n      end = i;\n      break;\n    }\n  }\n  if (start === -1 || end === -1)\n    throw new Error('PEM section not found for: ' + label);\n\n  var base64 = lines.slice(start + 1, end).join('');\n  // Remove excessive symbols\n  base64.replace(/[^a-z0-9\\+\\/=]+/gi, '');\n\n  var input = new Buffer(base64, 'base64');\n  return DERDecoder.prototype.decode.call(this, input, options);\n};\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","PEMDecoder","entity","DERDecoder","call","enc","inherits","Buffer","prototype","decode","PEMDecoder.prototype.decode","data","options","lines","toString","split","label","toUpperCase","re","start","end","i","length","match","Error","base64","slice","join","replace","input"]
}
