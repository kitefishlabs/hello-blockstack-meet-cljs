{"version":3,"sources":["devtools/formatters/core.cljs"],"sourcesContent":["(ns devtools.formatters.core\n  (:require-macros [devtools.oops :refer [safe-call]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [IFormat]]\n            [devtools.reporter :as reporter]\n            [devtools.formatters.templating :refer [surrogate? render-markup get-surrogate-body]]\n            [devtools.formatters.helpers :refer [cljs-value?]]\n            [devtools.formatters.state :refer [prevent-recursion? *current-state* get-default-state update-current-state!\n                                               reset-depth-limits]]\n            [devtools.formatters.markup :refer [<header> <surrogate-header> <surrogate-body>]]\n            [devtools.formatters.budgeting :refer [was-over-budget?! alter-json-ml-to-fit-in-remaining-budget!]]))\n\n; -- RAW API ----------------------------------------------------------------------------------------------------------------\n\n(defn want-value?* [value]\n  (and (not (prevent-recursion?))\n       (or (cljs-value? value) (surrogate? value))))\n\n(defn header* [value]\n  (let [json-ml (cond\n                  (surrogate? value) (render-markup (<surrogate-header> value))\n                  (safe-call satisfies? false IDevtoolsFormat value) (devtools.format/-header value)\n                  (safe-call satisfies? false IFormat value) (devtools.protocols/-header value)\n                  :else (render-markup (<header> value)))]\n    (alter-json-ml-to-fit-in-remaining-budget! value json-ml)))                                                               ; see issue #22\n\n(defn has-body* [value]\n  ; note: body is emulated using surrogate references\n  (if (was-over-budget?! value)                                                                                               ; see issue #22\n    false                                                                                                                     ; see alter-json-ml-to-fit-in-remaining-budget!, in case we didn't fit into budget, a header-expander placeholder with body was added in place\n    (boolean\n      (cond\n        (surrogate? value) (some? (get-surrogate-body value))\n        (safe-call satisfies? false IDevtoolsFormat value) (devtools.format/-has-body value)\n        (safe-call satisfies? false IFormat value) (devtools.protocols/-has-body value)\n        :else false))))\n\n(defn body* [value]\n  (update-current-state! reset-depth-limits)\n  (cond\n    (surrogate? value) (render-markup (<surrogate-body> value))\n    (safe-call satisfies? false IDevtoolsFormat value) (devtools.format/-body value)\n    (safe-call satisfies? false IFormat value) (devtools.protocols/-body value)))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n; config-aware RAW API, see state management documentation state.cljs\n\n(defn config-wrapper [raw-fn]\n  (fn [value config]\n    (binding [*current-state* (or config (get-default-state))]\n      (raw-fn value))))\n\n(def want-value? (config-wrapper want-value?*))\n(def header (config-wrapper header*))\n(def has-body (config-wrapper has-body*))\n(def body (config-wrapper body*))\n\n; -- API CALLS --------------------------------------------------------------------------------------------------------------\n\n(defn wrap-with-exception-guard [f]\n  (fn [& args]\n    (try\n      (apply f args)\n      (catch :default e\n        (reporter/report-internal-error! e \"an exception was raised during value formatting\")\n        nil))))\n\n(defn build-api-call [raw-fn pre-handler-key post-handler-key]\n  \"Wraps raw API call in a function which calls pre-handler and post-handler.\n\n   pre-handler gets a chance to pre-process value before it is passed to cljs-devtools\n   post-handler gets a chance to post-process value returned by cljs-devtools.\"\n  (let [handler (fn [value config]\n                  (let [pre-handler (or (pref pre-handler-key) identity)\n                        post-handler (or (pref post-handler-key) identity)\n                        preprocessed-value (pre-handler value)\n                        result (if (want-value? preprocessed-value config)\n                                 (raw-fn preprocessed-value config))]\n                    (post-handler result)))]\n    (wrap-with-exception-guard handler)))\n\n(def header-api-call (build-api-call header :header-pre-handler :header-post-handler))\n(def has-body-api-call (build-api-call has-body :has-body-pre-handler :has-body-post-handler))\n(def body-api-call (build-api-call body :body-pre-handler :body-post-handler))\n"],"mappings":"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","names":["devtools.formatters.core/want-value?*","and__4036__auto__","cljs.core/not","devtools.formatters.state/prevent-recursion?","or__4047__auto__","devtools.formatters.helpers/cljs-value?","value","devtools.formatters.templating/surrogate?","devtools.formatters.core/header*","devtools.formatters.templating/render-markup","devtools.formatters.markup/<surrogate-header>","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","e14804","devtools.format/IDevtoolsFormat","devtools.format/-header","e14806","devtools.protocols/IFormat","devtools.protocols/-header","devtools.formatters.markup/<header>","devtools.formatters.budgeting/alter-json-ml-to-fit-in-remaining-budget!","json-ml","devtools.formatters.core/has-body*","devtools.formatters.budgeting/was-over-budget?!","cljs.core/boolean","devtools.formatters.templating/get-surrogate-body","e14809","devtools.format/-has-body","e14813","devtools.protocols/-has-body","devtools.formatters.core/body*","devtools.formatters.state/update-current-state!","devtools.formatters.state/reset-depth-limits","devtools.formatters.markup/<surrogate-body>","e14815","devtools.format/-body","e14818","devtools.protocols/-body","devtools.formatters.core/config-wrapper","*current-state*-temp-val__14821","*current-state*-orig-val__14820","devtools.formatters.state/*current-state*","config","devtools.formatters.state/get-default-state","raw-fn","devtools.formatters.core/want-value?","devtools.formatters.core/header","devtools.formatters.core/has-body","devtools.formatters.core/body","devtools.formatters.core/wrap-with-exception-guard","e14825","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","f","args","devtools.reporter.report_internal_error_BANG_.cljs$core$IFn$_invoke$arity$variadic","e","devtools.formatters.core/build-api-call","devtools.prefs/pref","pre-handler-key","cljs.core/identity","post-handler-key","pre-handler","preprocessed-value","post-handler","result","handler","devtools.formatters.core/header-api-call","devtools.formatters.core/has-body-api-call","devtools.formatters.core/body-api-call"]}