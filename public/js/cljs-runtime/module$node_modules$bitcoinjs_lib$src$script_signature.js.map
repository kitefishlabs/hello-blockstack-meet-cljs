{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$script_signature.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uDAAA,CAA2E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAOxIC,QAASA,MAAM,CAACC,CAAD,CAAI,CAEjB,IADA,IAAIC,EAAI,CACR,CAAgB,CAAhB,GAAOD,CAAA,CAAEC,CAAF,CAAP,CAAA,CAAmB,EAAEA,CACrB,IAAIA,CAAJ,GAAUD,CAAAE,OAAV,CAAoB,MAAOC,KAC3BH,EAAA,CAAIA,CAAAI,MAAA,CAAQH,CAAR,CACJ,OAAID,EAAA,CAAE,CAAF,CAAJ,CAAW,GAAX,CAAwBK,MAAAC,OAAA,CAAc,CAACH,IAAD,CAAOH,CAAP,CAAd,CAAyB,CAAzB,CAA6BA,CAAAE,OAA7B,CAAxB,CACOF,CANU,CASnBO,QAASA,QAAQ,CAACP,CAAD,CAAI,CACN,CAAb,GAAIA,CAAA,CAAE,CAAF,CAAJ,GAAmBA,CAAnB,CAAuBA,CAAAI,MAAA,CAAQ,CAAR,CAAvB,CACA,KAAMI,OAASH,MAAAI,MAAA,CAAa,EAAb,CAAiB,CAAjB,CAEfT,EAAAU,KAAA,CAAOF,MAAP,CADeG,IAAAC,IAAAC,CAAS,CAATA,CAAY,EAAZA,CAAiBb,CAAAE,OAAjBW,CACf,CACA,OAAOL,OALY,CAfrB,IAAMM,MAAQnB,OAAA,CAAQ,iCAAR,CAAd,CACMU,OAASV,OAAA,CAAQ,uCAAR,CAAAU,OADf;AAEMU,UAAYpB,OAAA,CAAQ,qCAAR,CAFlB,CAGMqB,MAAQrB,OAAA,CAAQ,6CAAR,CAHd,CAKMQ,KAAOE,MAAAI,MAAA,CAAa,CAAb,CAAgB,CAAhB,CAuDbb,OAAAC,QAAA,CAAiB,CACfoB,OArCFA,QAAgB,CAACT,MAAD,CAAS,CACvB,IAAMU,SAAWV,MAAAW,UAAA,CAAiBX,MAAAN,OAAjB,CAAiC,CAAjC,CAAjB,CACMkB,YAAcF,QAAdE,CAAyB,IAC/B,IAAmB,CAAnB,EAAIA,WAAJ,EAAuC,CAAvC,EAAwBA,WAAxB,CAA0C,KAAUC,MAAJ,CAAU,mBAAV,CAAgCH,QAAhC,CAAN,CAEpCD,WAAAA,CAASH,KAAAG,OAAA,CAAaT,MAAAJ,MAAA,CAAa,CAAb,CAAiB,EAAjB,CAAb,CACTkB,OAAAA,CAAIf,OAAA,CAAQU,WAAAK,EAAR,CACJC,YAAAA,CAAIhB,OAAA,CAAQU,WAAAM,EAAR,CAEV,OAAO,CACLC,UAAWnB,MAAAC,OAAA,CAAc,CAACgB,MAAD,CAAIC,WAAJ,CAAd,CAAsB,EAAtB,CADN,CAELL,SAAUA,QAFL,CATgB,CAoCR;AAEfO,OAvBFA,QAAgB,CAACD,SAAD,CAAYN,QAAZ,CAAsB,CACpCH,SAAA,CAAU,CACRS,UAAWR,KAAAU,QAAA,CAAc,EAAd,CADH,CAERR,SAAUF,KAAAW,MAFF,CAAV,CAGG,CAAEH,UAAAA,SAAF,CAAaN,SAAAA,QAAb,CAHH,CAKA,KAAME,YAAcF,QAAdE,CAAyB,IAC/B,IAAmB,CAAnB,EAAIA,WAAJ,EAAuC,CAAvC,EAAwBA,WAAxB,CAA0C,KAAUC,MAAJ,CAAU,mBAAV,CAAgCH,QAAhC,CAAN,CAEpCU,WAAAA,CAAiBvB,MAAAwB,YAAA,CAAmB,CAAnB,CACvBD,YAAAE,WAAA,CAA0BZ,QAA1B,CAAoC,CAApC,CAEMI,SAAAA,CAAIvB,KAAA,CAAMyB,SAAApB,MAAA,CAAgB,CAAhB,CAAmB,EAAnB,CAAN,CACJmB,UAAAA,CAAIxB,KAAA,CAAMyB,SAAApB,MAAA,CAAgB,EAAhB,CAAoB,EAApB,CAAN,CAEV,OAAOC,OAAAC,OAAA,CAAc,CACnBQ,KAAAW,OAAA,CAAaH,QAAb,CAAgBC,SAAhB,CADmB,CAEnBK,WAFmB,CAAd,CAf6B,CAqBrB,CA7DuH;",
"sources":["node_modules/bitcoinjs-lib/src/script_signature.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$script_signature\"] = function(global,process,require,module,exports,shadow$shims) {\nconst bip66 = require('bip66')\nconst Buffer = require('safe-buffer').Buffer\nconst typeforce = require('typeforce')\nconst types = require('./types')\n\nconst ZERO = Buffer.alloc(1, 0)\nfunction toDER (x) {\n  let i = 0\n  while (x[i] === 0) ++i\n  if (i === x.length) return ZERO\n  x = x.slice(i)\n  if (x[0] & 0x80) return Buffer.concat([ZERO, x], 1 + x.length)\n  return x\n}\n\nfunction fromDER (x) {\n  if (x[0] === 0x00) x = x.slice(1)\n  const buffer = Buffer.alloc(32, 0)\n  const bstart = Math.max(0, 32 - x.length)\n  x.copy(buffer, bstart)\n  return buffer\n}\n\n// BIP62: 1 byte hashType flag (only 0x01, 0x02, 0x03, 0x81, 0x82 and 0x83 are allowed)\nfunction decode (buffer) {\n  const hashType = buffer.readUInt8(buffer.length - 1)\n  const hashTypeMod = hashType & ~0x80\n  if (hashTypeMod <= 0 || hashTypeMod >= 4) throw new Error('Invalid hashType ' + hashType)\n\n  const decode = bip66.decode(buffer.slice(0, -1))\n  const r = fromDER(decode.r)\n  const s = fromDER(decode.s)\n\n  return {\n    signature: Buffer.concat([r, s], 64),\n    hashType: hashType\n  }\n}\n\nfunction encode (signature, hashType) {\n  typeforce({\n    signature: types.BufferN(64),\n    hashType: types.UInt8\n  }, { signature, hashType })\n\n  const hashTypeMod = hashType & ~0x80\n  if (hashTypeMod <= 0 || hashTypeMod >= 4) throw new Error('Invalid hashType ' + hashType)\n\n  const hashTypeBuffer = Buffer.allocUnsafe(1)\n  hashTypeBuffer.writeUInt8(hashType, 0)\n\n  const r = toDER(signature.slice(0, 32))\n  const s = toDER(signature.slice(32, 64))\n\n  return Buffer.concat([\n    bip66.encode(r, s),\n    hashTypeBuffer\n  ])\n}\n\nmodule.exports = {\n  decode: decode,\n  encode: encode\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","toDER","x","i","length","ZERO","slice","Buffer","concat","fromDER","buffer","alloc","copy","Math","max","bstart","bip66","typeforce","types","decode","hashType","readUInt8","hashTypeMod","Error","r","s","signature","encode","BufferN","UInt8","hashTypeBuffer","allocUnsafe","writeUInt8"]
}
