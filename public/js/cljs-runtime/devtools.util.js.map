{"version":3,"sources":["devtools/util.cljs"],"sourcesContent":["(ns devtools.util\n  (:require-macros [devtools.oops :refer [oget ocall oset unchecked-aget unchecked-aset]]\n                   [devtools.compiler :refer [check-compiler-options!]])\n  (:require [goog.userAgent :as ua]\n            [clojure.data :as data]\n            [devtools.version :refer [get-current-version]]\n            [devtools.context :as context]\n            [cljs.pprint :as cljs-pprint]\n            [devtools.prefs :as prefs]))\n\n; cljs.pprint does not play well in advanced mode :optimizations, see https://github.com/binaryage/cljs-devtools/issues/37\n(check-compiler-options!)\n\n(def lib-info-style \"color:black;font-weight:bold;\")\n(def reset-style \"color:black\")\n(def advanced-build-explanation-url\n  \"https://github.com/binaryage/cljs-devtools/blob/master/docs/faq.md#why-custom-formatters-do-not-work-for-advanced-builds\")\n\n(def ^:dynamic *custom-formatters-active* false)\n(def ^:dynamic *console-open* false)\n(def ^:dynamic *custom-formatters-warning-reported* false)\n\n; -- general helpers --------------------------------------------------------------------------------------------------------\n\n(defn pprint-str [& args]\n  (with-out-str\n    (binding [*print-level* 300]\n      (apply cljs-pprint/pprint args))))\n\n; -- version helpers --------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic make-version-info []\n  (str (get-current-version)))\n\n(defn ^:dynamic make-lib-info []\n  (str \"CLJS DevTools \" (make-version-info)))\n\n(defn get-lib-info []\n  (make-lib-info))\n\n; -- node.js support --------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-node-info [root]\n  (try\n    (let [process (oget root \"process\")\n          version (oget process \"version\")\n          platform (oget process \"platform\")]\n      (if (and version platform)\n        {:version  version\n         :platform platform}))\n    (catch :default _\n      nil)))\n\n(defn ^:dynamic get-node-description [node-info]\n  (str (or (:platform node-info) \"?\") \"/\" (or (:version node-info) \"?\")))\n\n(defn ^:dynamic in-node-context? []\n  (some? (get-node-info (context/get-root))))\n\n; -- javascript context utils -----------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-js-context-description []\n  (if-let [node-info (get-node-info (context/get-root))]\n    (str \"node/\" (get-node-description node-info))\n    (let [user-agent (ua/getUserAgentString)]\n      (if (empty? user-agent)\n        \"<unknown context>\"\n        user-agent))))\n\n; -- message formatters -----------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic unknown-feature-msg [feature known-features lib-info]\n  (str \"No such feature \" feature \" is currently available in \" lib-info \". \"\n       \"The list of supported features is \" (pr-str known-features) \".\"))\n\n(defn ^:dynamic feature-not-available-msg [feature]\n  (str \"Feature \" feature \" cannot be installed. \"\n       \"Unsupported Javascript context: \" (get-js-context-description) \".\"))\n\n(defn ^:dynamic custom-formatters-not-active-msg []\n  (str \"CLJS DevTools: some custom formatters were not rendered.\\n\"\n       \"https://github.com/binaryage/cljs-devtools/blob/master/docs/faq.md#why-some-custom-formatters-were-not-rendered\"))\n\n; -- devtools formatters access ---------------------------------------------------------------------------------------------\n\n(def formatter-key \"devtoolsFormatters\")\n\n(defn get-formatters-safe []\n  (let [formatters (unchecked-aget (context/get-root) formatter-key)]\n    (if (array? formatters)                                                                                                   ; TODO: maybe issue a warning if formatters are anything else than array or nil\n      formatters\n      #js [])))\n\n(defn set-formatters-safe! [new-formatters]\n  {:pre [(or (nil? new-formatters) (array? new-formatters))]}\n  (unchecked-aset (context/get-root) formatter-key (if (empty? new-formatters) nil new-formatters)))\n\n(defn print-config-overrides-if-requested! [msg]\n  (when (prefs/pref :print-config-overrides)\n    (let [diff (second (data/diff @prefs/default-config (prefs/get-prefs)))]\n      (if-not (empty? diff)\n        (.info (context/get-console) msg (pprint-str diff))))))\n\n; -- custom formatters detection --------------------------------------------------------------------------------------------\n\n(deftype CustomFormattersDetector [])\n\n; https://github.com/binaryage/cljs-devtools/issues/16\n(defn make-detector []\n  (let [detector (CustomFormattersDetector.)]\n    (unchecked-aset detector \"header\" (fn [_object _config]\n                                        (set! *custom-formatters-active* true)\n                                        nil))\n    (unchecked-aset detector \"hasBody\" (constantly false))\n    (unchecked-aset detector \"body\" (constantly nil))\n    detector))\n\n(defn install-detector! [detector]\n  (let [formatters (get-formatters-safe)]\n    (.push formatters detector)\n    (set-formatters-safe! formatters)))\n\n(defn uninstall-detector! [detector]\n  ; play it safe here, this method is called asynchronously\n  ; in theory someone else could have installed additional custom formatters\n  ; we have to be careful removing only ours formatters\n  (let [current-formatters (unchecked-aget (context/get-root) formatter-key)]\n    (if (array? current-formatters)\n      (let [new-formatters (.filter current-formatters #(not (= detector %)))]\n        (set-formatters-safe! new-formatters)))))\n\n(defn check-custom-formatters-active! []\n  (if (and *console-open* (not *custom-formatters-active*))\n    (when-not *custom-formatters-warning-reported*\n      (set! *custom-formatters-warning-reported* true)\n      (.warn (context/get-console) (custom-formatters-not-active-msg)))))\n\n(defn uninstall-detector-and-check-custom-formatters-active! [detector]\n  (uninstall-detector! detector)\n  (check-custom-formatters-active!))\n\n; a variation of http://stackoverflow.com/a/30638226/84283\n(defn make-detection-printer []\n  (let [f (fn [])]\n    (oset f [\"toString\"] (fn []\n                           (set! *console-open* true)\n                           (js/setTimeout check-custom-formatters-active! 0)                                                  ; console is being opened, schedule another check\n                           \"\"))\n    f))\n\n(defn wrap-with-custom-formatter-detection! [f]\n  (if-not (prefs/pref :dont-detect-custom-formatters)\n    (let [detector (make-detector)]\n      ; this is a tricky business here\n      ; we cannot ask DevTools if custom formatters are available and/or enabled\n      ; we abuse the fact that we are printing info banner upon cljs-devtools installation anyways\n      ; we install a special CustomFormattersDetector formatter which just records calls to it\n      ; but does not format anything, it skips the opportunity to format the output so it has no visual effect\n      ; this way we are able to detect if custom formatters are active and record it in *custom-formatters-active*\n      ; but this technique does not work when printing happens when DevTools console is closed\n      ; we have to add another system for detection of when console opens and re-detect custom formatters with opened console\n      (install-detector! detector)\n      (f \"%c%s\" \"color:transparent\" (make-detection-printer))\n      ; note that custom formatters are applied asynchronously\n      ; we have to uninstall our detector a bit later\n      (js/setTimeout (partial uninstall-detector-and-check-custom-formatters-active! detector) 0))\n    (f)))\n\n; -- banner -----------------------------------------------------------------------------------------------------------------\n\n(defn feature-for-display [installed-features feature]\n  (let [color (if (some #{feature} installed-features) \"color:#0000ff\" \"color:#ccc\")]\n    [\"%c%s\" [color (str feature)]]))\n\n(defn feature-list-display [installed-features feature-groups]\n  (let [labels (map (partial feature-for-display installed-features) (:all feature-groups))\n        * (fn [accum val]\n            [(str (first accum) \" \" (first val))\n             (concat (second accum) (second val))])]\n    (reduce * (first labels) (rest labels))))\n\n(defn display-banner! [installed-features feature-groups fmt & params]\n  (let [[fmt-str fmt-params] (feature-list-display installed-features feature-groups)]\n    (wrap-with-custom-formatter-detection! (fn [add-fmt & add-args]\n                                             (let [items (concat [(str fmt \" \" fmt-str add-fmt)] params fmt-params add-args)\n                                                   console (context/get-console)]\n                                               (.apply (.-info console) console (into-array items)))))))\n\n(defn display-banner-if-needed! [features-to-install feature-groups]\n  (if-not (prefs/pref :dont-display-banner)\n    (do\n      (let [banner (str \"Installing %c%s%c and enabling features\")]\n        (display-banner! features-to-install feature-groups banner lib-info-style (get-lib-info) reset-style)))\n    ; detection cannot be performed if we are not allowed to print something to console => assume active\n    (set! *custom-formatters-active* true)))\n\n; -- unknown features -------------------------------------------------------------------------------------------------------\n\n(defn report-unknown-features! [features known-features]\n  (let [lib-info (get-lib-info)]\n    (doseq [feature features]\n      (if-not (some #{feature} known-features)\n        (.warn (context/get-console) (unknown-feature-msg feature known-features lib-info))))))\n\n(defn is-known-feature? [known-features feature]\n  (boolean (some #{feature} known-features)))\n\n(defn convert-legacy-feature [feature]\n  (case feature\n    :custom-formatters :formatters\n    :sanity-hints :hints\n    feature))\n\n(defn convert-legacy-features [features]\n  (map convert-legacy-feature features))\n\n(defn sanititze-features! [features feature-groups]\n  (let [known-features (:all feature-groups)\n        features (convert-legacy-features features)]                                                                          ; new feature names were introduced in v0.8\n    (report-unknown-features! features known-features)\n    (filter (partial is-known-feature? known-features) features)))\n\n(defn resolve-features! [features-desc feature-groups]\n  (let [features (cond\n                   (and (keyword? features-desc) (features-desc feature-groups)) (features-desc feature-groups)\n                   (nil? features-desc) (:default feature-groups)\n                   (seqable? features-desc) features-desc\n                   :else [features-desc])]\n    (sanititze-features! features feature-groups)))\n\n; -- advanced mode check ----------------------------------------------------------------------------------------------------\n\n(defn under-advanced-build? []\n  (if-not (prefs/pref :disable-advanced-mode-check)\n    (nil? (oget (context/get-root) \"devtools\" \"version\"))))                                                                   ; we rely on the fact that under advanced mode the namespace will be renamed\n\n(defn display-advanced-build-warning-if-needed! []\n  (if-not (prefs/pref :dont-display-advanced-build-warning)\n    (let [banner (str \"%cNOT%c installing %c%s%c under advanced build. See \" advanced-build-explanation-url \".\")]\n      (.warn (context/get-console) banner \"font-weight:bold\" reset-style lib-info-style (get-lib-info) reset-style))))\n\n; -- installer --------------------------------------------------------------------------------------------------------------\n\n(defn install-feature! [feature features-to-install available-fn install-fn]\n  (if (some #{feature} features-to-install)\n    (if (or (prefs/pref :bypass-availability-checks) (available-fn feature))\n      (install-fn)\n      (.warn (context/get-console) (feature-not-available-msg feature)))))\n"],"mappings":"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","names":["devtools.util/lib-info-style","devtools.util/reset-style","devtools.util/advanced-build-explanation-url","devtools.util/*custom-formatters-active*","devtools.util/*console-open*","devtools.util/*custom-formatters-warning-reported*","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","devtools.util/pprint-str","argseq__4648__auto__","self__4629__auto__","cljs.core/seq","seq14042","goog.string/StringBuffer","cljs.core/*print-newline*","cljs.core/*print-fn*","sb__4572__auto__","x__4573__auto__","*print-newline*-temp-val__14049","*print-fn*-temp-val__14050","*print-fn*-orig-val__14048","*print-newline*-orig-val__14047","*print-level*-temp-val__14053","*print-level*-orig-val__14052","cljs.core/*print-level*","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.pprint/pprint","args","devtools.util/make-version-info","devtools.util/make-lib-info","devtools.util/get-lib-info","devtools.util/get-node-info","e14061","root","process","and__4036__auto__","version","platform","devtools.util/get-node-description","or__4047__auto__","node-info","devtools.util/in-node-context?","devtools.context/get-root","devtools.util/get-js-context-description","temp__5455__auto__","goog.userAgent/getUserAgentString","cljs.core/empty?","user-agent","devtools.util/unknown-feature-msg","feature","lib-info","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","known-features","devtools.util/feature-not-available-msg","devtools.util/custom-formatters-not-active-msg","devtools.util/formatter-key","devtools.util/get-formatters-safe","cljs.core/array?","formatters","js/Error","devtools.util/set-formatters-safe!","new-formatters","devtools.util/print-config-overrides-if-requested!","devtools.prefs/pref","cljs.core/second","cljs.core/deref","clojure.data/diff","devtools.prefs/default-config","devtools.prefs/get-prefs","diff","devtools.context/get-console","msg","devtools.util.pprint_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/-write","writer__4291__auto__","devtools.util/CustomFormattersDetector","devtools.util/->CustomFormattersDetector","devtools.util/make-detector","detector","cljs.core/constantly","devtools.util/install-detector!","devtools.util/uninstall-detector!","current-formatters","p1__14099#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","devtools.util/check-custom-formatters-active!","devtools.util/uninstall-detector-and-check-custom-formatters-active!","devtools.util/make-detection-printer","G__14103","target__12068__auto__","f","js/setTimeout","devtools.util/wrap-with-custom-formatter-detection!","cljs.core/not","G__14111","G__14112","G__14113","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.util/feature-for-display","cljs.core/some","installed-features","color","devtools.util/feature-list-display","cljs.core.map.cljs$core$IFn$_invoke$arity$2","feature-groups","cljs.core/first","accum","val","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","*","labels","cljs.core/rest","devtools.util/display-banner!","seq14120","cljs.core/next","self__4628__auto__","G__14122","G__14123","G__14124","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__14126","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","fmt","fmt-str","add-fmt","params","fmt-params","add-args","console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","items","devtools.util/display-banner-if-needed!","devtools.util.display_banner_BANG_.cljs$core$IFn$_invoke$arity$variadic","features-to-install","banner","devtools.util/report-unknown-features!","i__14137","count__14136","chunk__14135","seq__14134","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","features","devtools.util/is-known-feature?","cljs.core/boolean","devtools.util/convert-legacy-feature","G__14141","cljs.core/Keyword","devtools.util/convert-legacy-features","devtools.util/sanititze-features!","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","devtools.util/resolve-features!","features-desc","cljs.core/seqable?","devtools.util/under-advanced-build?","o14147","devtools.util/display-advanced-build-warning-if-needed!","devtools.util/install-feature!","available-fn","install-fn"]}