{"version":3,"sources":["shadow/cljs/devtools/client/browser.cljs"],"sourcesContent":["(ns shadow.cljs.devtools.client.browser\n  (:require\n    [cljs.reader :as reader]\n    [clojure.string :as str]\n    [goog.dom :as gdom]\n    [goog.userAgent.product :as product]\n    [goog.Uri]\n    [goog.net.XhrIo :as xhr]\n    [shadow.cljs.devtools.client.env :as env]\n    [shadow.cljs.devtools.client.console]\n    [shadow.cljs.devtools.client.hud :as hud]\n    ))\n\n(defonce active-modules-ref\n  (volatile! #{}))\n\n(defonce repl-ns-ref (atom nil))\n\n(defn module-loaded [name]\n  (vswap! active-modules-ref conj (keyword name)))\n\n(defonce socket-ref (volatile! nil))\n\n(defn devtools-msg [msg & args]\n  (.apply (.-log js/console) nil (into-array (into [(str \"%cshadow-cljs: \" msg) \"color: blue;\"] args))))\n\n(defn ws-msg [msg]\n  (if-let [s @socket-ref]\n    (.send s (pr-str msg))\n    (js/console.warn \"WEBSOCKET NOT CONNECTED\" (pr-str msg))))\n\n(defonce scripts-to-load (atom []))\n\n(def loaded? js/goog.isProvided_)\n\n(defn goog-is-loaded? [name]\n  (js/$CLJS.SHADOW_ENV.isLoaded name))\n\n(def goog-base-rc\n  [:shadow.build.classpath/resource \"goog/base.js\"])\n\n(defn src-is-loaded? [{:keys [resource-id output-name] :as src}]\n  ;; FIXME: don't like this special case handling, but goog/base.js will always be loaded\n  ;; but not as a separate file\n  (or (= goog-base-rc resource-id)\n      (goog-is-loaded? output-name)))\n\n(defn module-is-active? [module]\n  (contains? @active-modules-ref module))\n\n(defn script-eval [code]\n  (js/goog.globalEval code))\n\n(defn do-js-load [sources]\n  (doseq [{:keys [resource-id output-name resource-name js] :as src} sources]\n    ;; should really stop using this and rather maintain our own record\n    ;; but without this hot-reload will reload shadow-js files with each cycle\n    ;; since they don't set it\n    (js/$CLJS.SHADOW_ENV.setLoaded output-name)\n\n    (devtools-msg \"load JS\" resource-name)\n    (env/before-load-src src)\n    (script-eval (str js \"\\n//# sourceURL=\" resource-name))))\n\n(defn do-js-reload [msg sources complete-fn failure-fn]\n  (env/do-js-reload\n    (assoc msg\n      :log-missing-fn\n      (fn [fn-sym]\n        (devtools-msg (str \"can't find fn \" fn-sym)))\n      :log-call-async\n      (fn [fn-sym]\n        (devtools-msg (str \"call async \" fn-sym)))\n      :log-call\n      (fn [fn-sym]\n        (devtools-msg (str \"call \" fn-sym))))\n    #(do-js-load sources)\n    complete-fn\n    failure-fn))\n\n(defn do-js-requires\n  \"when (require '[\\\"some-str\\\" :as x]) is done at the REPL we need to manually call the shadow.js.require for it\n   since the file only adds the shadow$provide. only need to do this for shadow-js.\"\n  [js-requires]\n  (doseq [js-ns js-requires]\n    (let [require-str (str \"var \" js-ns \" = shadow.js.require(\\\"\" js-ns \"\\\");\")]\n      (script-eval require-str))))\n\n(defn load-sources [sources callback]\n  (if (empty? sources)\n    (callback [])\n    (xhr/send\n      (env/files-url)\n      (fn [res]\n        (this-as ^goog req\n          (let [content\n                (-> req\n                    (.getResponseText)\n                    (reader/read-string))]\n            (callback content)\n            )))\n      \"POST\"\n      (pr-str {:client :browser\n               :sources (into [] (map :resource-id) sources)})\n      #js {\"content-type\" \"application/edn; charset=utf-8\"})))\n\n(defn handle-build-complete [{:keys [info reload-info] :as msg}]\n  (let [{:keys [sources compiled]}\n        info\n\n        warnings\n        (->> (for [{:keys [resource-name warnings] :as src} sources\n                   :when (not (:from-jar src))\n                   warning warnings]\n               (assoc warning :resource-name resource-name))\n             (distinct)\n             (into []))]\n\n    (doseq [{:keys [msg line column resource-name] :as w} warnings]\n      (js/console.warn (str \"BUILD-WARNING in \" resource-name \" at [\" line \":\" column \"]\\n\\t\" msg)))\n\n    (if-not env/autoload\n      (hud/load-end-success)\n      ;; load all files for current build:\n      ;; of modules that are active\n      ;; and are either not loaded yet\n      ;; or specifically marked for reload\n      (when (or (empty? warnings) env/ignore-warnings)\n        (let [sources-to-get\n              (->> sources\n                   (filter\n                     (fn [{:keys [module] :as rc}]\n                       (or (= \"js\" env/module-format)\n                           (module-is-active? module))))\n                   ;; don't reload namespaces that have ^:dev/never-reload meta\n                   (remove (fn [{:keys [ns]}]\n                             (contains? (:never-load reload-info) ns)))\n                   (filter\n                     (fn [{:keys [ns resource-id] :as src}]\n                       (or (contains? (:always-load reload-info) ns)\n                           (not (src-is-loaded? src))\n                           (and (contains? compiled resource-id)\n                                ;; never reload files from jar\n                                ;; they can't be hot-swapped so the only way they get re-compiled\n                                ;; is if they have warnings, which we can't to anything about\n                                (not (:from-jar src))))))\n                   (into []))]\n\n          (if-not (seq sources-to-get)\n            (hud/load-end-success)\n            (do (when-not (seq (get-in msg [:reload-info :after-load]))\n                  (devtools-msg \"reloading code but no :after-load hooks are configured!\"\n                    \"https://shadow-cljs.github.io/docs/UsersGuide.html#_lifecycle_hooks\"))\n                (load-sources sources-to-get #(do-js-reload msg % hud/load-end-success hud/load-failure)))\n            ))))))\n\n;; capture this once because the path may change via pushState\n(def ^goog page-load-uri\n  (when js/goog.global.document\n    (goog.Uri/parse js/document.location.href)))\n\n(defn match-paths [old new]\n  (if (= \"file\" (.getScheme page-load-uri))\n    ;; new is always an absolute path, strip first /\n    ;; FIXME: assuming that old is always relative\n    (let [rel-new (subs new 1)]\n      (and (= old rel-new) rel-new))\n    ;; special handling for browsers including relative css\n    (let [^goog node-uri (goog.Uri/parse old)\n          node-uri-resolved (.resolve page-load-uri node-uri)\n          node-abs (.getPath ^goog node-uri-resolved)]\n\n      (and (or (= (.hasSameDomainAs page-load-uri node-uri))\n               (not (.hasDomain node-uri)))\n           (= node-abs new)\n           new))))\n\n(defn handle-asset-watch [{:keys [updates] :as msg}]\n  (doseq [path updates\n          ;; FIXME: could support images?\n          :when (str/ends-with? path \"css\")]\n    (doseq [node (array-seq (js/document.querySelectorAll \"link[rel=\\\"stylesheet\\\"]\"))\n            :let [path-match (match-paths (.getAttribute node \"href\") path)]\n            :when path-match]\n\n      (let [new-link\n            (doto (.cloneNode node true)\n              (.setAttribute \"href\" (str path-match \"?r=\" (rand))))]\n\n        (devtools-msg \"load CSS\" path-match)\n        (gdom/insertSiblingAfter new-link node)\n        (gdom/removeNode node)\n        ))))\n\n;; from https://github.com/clojure/clojurescript/blob/master/src/main/cljs/clojure/browser/repl.cljs\n;; I don't want to pull in all its other dependencies just for this function\n(defn get-ua-product []\n  (cond\n    product/SAFARI :safari\n    product/CHROME :chrome\n    product/FIREFOX :firefox\n    product/IE :ie))\n\n(defn get-asset-root []\n  (let [loc (js/goog.Uri. js/document.location.href)\n        cbp (js/goog.Uri. js/CLOSURE_BASE_PATH)\n        s (.toString (.resolve loc cbp))]\n    ;; FIXME: stacktrace starts with file:/// but resolve returns file:/\n    ;; how does this look on windows?\n    (str/replace s #\"^file:/\" \"file:///\")\n    ))\n\n(defn repl-error [e]\n  (js/console.error \"repl/invoke error\" e)\n  (-> (env/repl-error e)\n      (assoc :ua-product (get-ua-product)\n             :asset-root (get-asset-root))))\n\n(defn repl-invoke [{:keys [id js]}]\n  (let [result (env/repl-call #(js/eval js) repl-error)]\n    (-> result\n        (assoc :id id)\n        (ws-msg))))\n\n(defn repl-require [{:keys [id sources reload-namespaces js-requires] :as msg}]\n  (let [sources-to-load\n        (->> sources\n             (remove (fn [{:keys [provides] :as src}]\n                       (and (src-is-loaded? src)\n                            (not (some reload-namespaces provides)))))\n             (into []))]\n\n    (load-sources\n      sources-to-load\n      (fn [sources]\n        (do-js-load sources)\n        (when (seq js-requires)\n          (do-js-requires js-requires))\n        (ws-msg {:type :repl/require-complete :id id})\n        ))))\n\n(defn repl-init [{:keys [repl-state id]}]\n  (load-sources\n    ;; maybe need to load some missing files to init REPL\n    (->> (:repl-sources repl-state)\n         (remove src-is-loaded?)\n         (into []))\n    (fn [sources]\n      (do-js-load sources)\n      (ws-msg {:type :repl/init-complete :id id})\n      (devtools-msg \"REPL session start successful\"))))\n\n(defn repl-set-ns [{:keys [id ns]}]\n  (ws-msg {:type :repl/set-ns-complete :id id :ns ns}))\n\n(def close-reason-ref (volatile! nil))\n\n;; FIXME: core.async-ify this\n(defn handle-message [{:keys [type] :as msg}]\n  ;; (js/console.log \"ws-msg\" msg)\n  (hud/connection-error-clear!)\n  (case type\n    :asset-watch\n    (handle-asset-watch msg)\n\n    :repl/invoke\n    (repl-invoke msg)\n\n    :repl/require\n    (repl-require msg)\n\n    :repl/set-ns\n    (repl-set-ns msg)\n\n    :repl/init\n    (repl-init msg)\n\n    :repl/session-start\n    (repl-init msg)\n\n    :build-complete\n    (do (hud/hud-warnings msg)\n        (handle-build-complete msg))\n\n    :build-failure\n    (do (hud/load-end)\n        (hud/hud-error msg))\n\n    :build-init\n    (hud/hud-warnings msg)\n\n    :build-start\n    (do (hud/hud-hide)\n        (hud/load-start))\n\n    :pong\n    nil\n\n    :client/stale\n    (vreset! close-reason-ref \"Stale Client! You are not using the latest compilation output!\")\n\n    :client/no-worker\n    (vreset! close-reason-ref (str \"watch for build \\\"\" env/build-id \"\\\" not running\"))\n\n    :custom-msg\n    (env/publish! (:payload msg))\n\n    ;; default\n    :ignored))\n\n(defn compile [text callback]\n  (xhr/send\n    (str \"http\" (when env/ssl \"s\") \"://\" env/server-host \":\" env/server-port \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n    (fn [res]\n      (this-as ^goog req\n        (let [actions\n              (-> req\n                  (.getResponseText)\n                  (reader/read-string))]\n          (when callback\n            (callback actions)))))\n    \"POST\"\n    (pr-str {:input text})\n    #js {\"content-type\" \"application/edn; charset=utf-8\"}))\n\n(defn heartbeat! []\n  (when-let [s @socket-ref]\n    (.send s (pr-str {:type :ping :v (js/Date.now)}))\n    (js/setTimeout heartbeat! 30000)))\n\n\n(defn ws-connect []\n  (try\n    (let [print-fn\n          cljs.core/*print-fn*\n\n          ws-url\n          (env/ws-url :browser)\n\n          socket\n          (js/WebSocket. ws-url)]\n\n      (vreset! socket-ref socket)\n\n      (set! (.-onmessage socket)\n        (fn [e]\n          (env/process-ws-msg (. e -data) handle-message)\n          ))\n\n      (set! (.-onopen socket)\n        (fn [e]\n          (hud/connection-error-clear!)\n          (vreset! close-reason-ref nil)\n          ;; :module-format :js already patches provide\n          (when (= \"goog\" env/module-format)\n            ;; patch away the already declared exception\n            (set! (.-provide js/goog) js/goog.constructNamespace_))\n\n          (env/set-print-fns! ws-msg)\n\n          (devtools-msg \"WebSocket connected!\")\n          ))\n\n      (set! (.-onclose socket)\n        (fn [e]\n          ;; not a big fan of reconnecting automatically since a disconnect\n          ;; may signal a change of config, safer to just reload the page\n          (devtools-msg \"WebSocket disconnected!\")\n          (hud/connection-error (or @close-reason-ref \"Connection closed!\"))\n          (vreset! socket-ref nil)\n          (env/reset-print-fns!)\n          ))\n\n      (set! (.-onerror socket)\n        (fn [e]\n          (hud/connection-error \"Connection failed!\")\n          (devtools-msg \"websocket error\" e)))\n\n      (js/setTimeout heartbeat! 30000))\n    (catch :default e\n      (devtools-msg \"WebSocket setup failed\" e))))\n\n(when ^boolean env/enabled\n  ;; disconnect an already connected socket, happens if this file is reloaded\n  ;; pretty much only for me while working on this file\n  (when-let [s @socket-ref]\n    (devtools-msg \"connection reset!\")\n    (set! (.-onclose s) (fn [e]))\n    (.close s)\n    (vreset! socket-ref nil))\n\n  ;; for /browser-repl in case the page is reloaded\n  ;; otherwise the browser seems to still have the websocket open\n  ;; when doing the reload\n  (js/window.addEventListener \"beforeunload\"\n    (fn []\n      (when-let [s @socket-ref]\n        (.close s))))\n\n  ;; async connect so other stuff while loading runs first\n  (if (and js/document (= \"loading\" js/document.readyState))\n    (js/window.addEventListener \"DOMContentLoaded\" ws-connect)\n    (js/setTimeout ws-connect 10)))\n"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.browser","js/shadow.cljs.devtools.client.browser.active-modules-ref","shadow.cljs.devtools.client.browser/active-modules-ref","cljs.core/volatile!","js/shadow.cljs.devtools.client.browser.repl-ns-ref","shadow.cljs.devtools.client.browser/repl-ns-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.browser/module-loaded","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.keyword.cljs$core$IFn$_invoke$arity$1","name","js/shadow.cljs.devtools.client.browser.socket-ref","shadow.cljs.devtools.client.browser/socket-ref","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","shadow.cljs.devtools.client.browser/devtools-msg","argseq__4648__auto__","cljs.core/first","seq22567","cljs.core/next","self__4628__auto__","G__22568","js/console","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","cljs.core.into.cljs$core$IFn$_invoke$arity$2","msg","args","shadow.cljs.devtools.client.browser/ws-msg","cljs.core/deref","temp__5455__auto__","s","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","js/console.warn","js/shadow.cljs.devtools.client.browser.scripts-to-load","shadow.cljs.devtools.client.browser/scripts-to-load","shadow.cljs.devtools.client.browser/loaded?","js/goog.isProvided_","shadow.cljs.devtools.client.browser/goog-is-loaded?","js/$CLJS.SHADOW_ENV.isLoaded","shadow.cljs.devtools.client.browser/goog-base-rc","p__22580","map__22581","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.browser/src-is-loaded?","or__4047__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","resource-id","output-name","shadow.cljs.devtools.client.browser/module-is-active?","cljs.core/contains?","module","shadow.cljs.devtools.client.browser/script-eval","js/goog.globalEval","code","shadow.cljs.devtools.client.browser/do-js-load","cljs.core/seq","i__22586","count__22585","chunk__22584","map__22587","seq__22583","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","map__22589","sources","js/$CLJS.SHADOW_ENV.setLoaded","shadow.cljs.devtools.client.browser.devtools_msg.cljs$core$IFn$_invoke$arity$variadic","resource-name","shadow.cljs.devtools.client.env/before-load-src","src","js","shadow.cljs.devtools.client.browser/do-js-reload","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$4","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","fn-sym","complete-fn","failure-fn","shadow.cljs.devtools.client.browser/do-js-requires","i__22596","count__22595","chunk__22594","seq__22593","js-requires","js-ns","require-str","shadow.cljs.devtools.client.browser/load-sources","cljs.core/empty?","G__22598","callback","G__22602","G__22603","G__22604","G__22605","G__22606","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/files-url","req","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","content","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p__22613","map__22614","shadow.cljs.devtools.client.browser/handle-build-complete","map__22616","info","cljs.core/LazySeq","s__22619","xs__6012__auto__","map__22624","s__22621","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__22622","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","b__22623","cljs.core/chunk-cons","cljs.core/chunk","iter__22620","cljs.core/cons","cljs.core/rest","iterys__4430__auto__","fs__4431__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","iter__22618","iter__4434__auto__","cljs.core/not","warnings","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","warning","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","i__22632","count__22631","chunk__22630","map__22633","seq__22629","map__22635","line","column","shadow.cljs.devtools.client.env/autoload","shadow.cljs.devtools.client.hud/load-end-success","shadow.cljs.devtools.client.env/ignore-warnings","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__22652","map__22653","shadow.cljs.devtools.client.env/module-format","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p__22640","map__22641","reload-info","ns","p__22637","map__22638","compiled","sources-to-get","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p1__22612#","shadow.cljs.devtools.client.hud/load-failure","shadow.cljs.devtools.client.browser/page-load-uri","js/goog.global.document","goog.Uri/parse","js/document.location.href","shadow.cljs.devtools.client.browser/match-paths","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","new","and__4036__auto__","old","rel-new","node-uri","node-uri-resolved","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$1","node-abs","p__22657","map__22658","shadow.cljs.devtools.client.browser/handle-asset-watch","i__22664","count__22663","chunk__22662","seq__22660","updates","clojure.string/ends-with?","path","i__22671","count__22670","chunk__22669","seq__22666","i__22683","count__22682","chunk__22681","seq__22678","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","js/document.querySelectorAll","node","path-match","G__22675","G__22676","G__22688","G__22692","cljs.core.rand.cljs$core$IFn$_invoke$arity$0","goog.dom/insertSiblingAfter","new-link","goog.dom/removeNode","shadow.cljs.devtools.client.browser/get-ua-product","goog.userAgent.product/SAFARI","goog.userAgent.product/CHROME","goog.userAgent.product/FIREFOX","goog.userAgent.product/IE","shadow.cljs.devtools.client.browser/get-asset-root","js/goog.Uri","js/CLOSURE_BASE_PATH","loc","cbp","clojure.string/replace","shadow.cljs.devtools.client.browser/repl-error","js/console.error","e","shadow.cljs.devtools.client.env/repl-error","p__22694","map__22695","shadow.cljs.devtools.client.browser/repl-invoke","shadow.cljs.devtools.client.env/repl-call","js/eval","result","id","p__22698","map__22699","shadow.cljs.devtools.client.browser/repl-require","p__22702","map__22703","cljs.core/some","reload-namespaces","provides","sources-to-load","p__22705","map__22706","shadow.cljs.devtools.client.browser/repl-init","repl-state","p__22708","map__22709","shadow.cljs.devtools.client.browser/repl-set-ns","shadow.cljs.devtools.client.browser/close-reason-ref","p__22711","map__22712","shadow.cljs.devtools.client.browser/handle-message","shadow.cljs.devtools.client.hud/connection-error-clear!","G__22714","cljs.core/Keyword","type","shadow.cljs.devtools.client.hud/hud-warnings","shadow.cljs.devtools.client.hud/load-end","shadow.cljs.devtools.client.hud/hud-error","shadow.cljs.devtools.client.hud/hud-hide","shadow.cljs.devtools.client.hud/load-start","cljs.core/vreset!","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/publish!","shadow.cljs.devtools.client.browser/compile","G__22715","G__22716","G__22717","G__22718","G__22719","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/server-host","shadow.cljs.devtools.client.env/server-port","shadow.cljs.devtools.client.env/proc-id","actions","text","shadow.cljs.devtools.client.browser/heartbeat!","js/Date.now","js/setTimeout","shadow.cljs.devtools.client.browser/ws-connect","e22720","cljs.core/*print-fn*","shadow.cljs.devtools.client.env/ws-url","js/WebSocket","ws-url","socket","shadow.cljs.devtools.client.env/process-ws-msg","js/goog","js/goog.constructNamespace_","shadow.cljs.devtools.client.env/set-print-fns!","shadow.cljs.devtools.client.hud/connection-error","shadow.cljs.devtools.client.env/reset-print-fns!","shadow.cljs.devtools.client.env/enabled","js/window.addEventListener","js/document","js/document.readyState"]}