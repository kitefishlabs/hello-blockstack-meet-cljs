{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$classify.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/classify.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$classify\"] = function(global,process,require,module,exports,shadow$shims) {\nconst decompile = require('./script').decompile\nconst multisig = require('./templates/multisig')\nconst nullData = require('./templates/nulldata')\nconst pubKey = require('./templates/pubkey')\nconst pubKeyHash = require('./templates/pubkeyhash')\nconst scriptHash = require('./templates/scripthash')\nconst witnessPubKeyHash = require('./templates/witnesspubkeyhash')\nconst witnessScriptHash = require('./templates/witnessscripthash')\nconst witnessCommitment = require('./templates/witnesscommitment')\n\nconst types = {\n  MULTISIG: 'multisig',\n  NONSTANDARD: 'nonstandard',\n  NULLDATA: 'nulldata',\n  P2PK: 'pubkey',\n  P2PKH: 'pubkeyhash',\n  P2SH: 'scripthash',\n  P2WPKH: 'witnesspubkeyhash',\n  P2WSH: 'witnessscripthash',\n  WITNESS_COMMITMENT: 'witnesscommitment'\n}\n\nfunction classifyOutput (script) {\n  if (witnessPubKeyHash.output.check(script)) return types.P2WPKH\n  if (witnessScriptHash.output.check(script)) return types.P2WSH\n  if (pubKeyHash.output.check(script)) return types.P2PKH\n  if (scriptHash.output.check(script)) return types.P2SH\n\n  // XXX: optimization, below functions .decompile before use\n  const chunks = decompile(script)\n  if (!chunks) throw new TypeError('Invalid script')\n\n  if (multisig.output.check(chunks)) return types.MULTISIG\n  if (pubKey.output.check(chunks)) return types.P2PK\n  if (witnessCommitment.output.check(chunks)) return types.WITNESS_COMMITMENT\n  if (nullData.output.check(chunks)) return types.NULLDATA\n\n  return types.NONSTANDARD\n}\n\nfunction classifyInput (script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = decompile(script)\n  if (!chunks) throw new TypeError('Invalid script')\n\n  if (pubKeyHash.input.check(chunks)) return types.P2PKH\n  if (scriptHash.input.check(chunks, allowIncomplete)) return types.P2SH\n  if (multisig.input.check(chunks, allowIncomplete)) return types.MULTISIG\n  if (pubKey.input.check(chunks)) return types.P2PK\n\n  return types.NONSTANDARD\n}\n\nfunction classifyWitness (script, allowIncomplete) {\n  // XXX: optimization, below functions .decompile before use\n  const chunks = decompile(script)\n  if (!chunks) throw new TypeError('Invalid script')\n\n  if (witnessPubKeyHash.input.check(chunks)) return types.P2WPKH\n  if (witnessScriptHash.input.check(chunks, allowIncomplete)) return types.P2WSH\n\n  return types.NONSTANDARD\n}\n\nmodule.exports = {\n  input: classifyInput,\n  output: classifyOutput,\n  witness: classifyWitness,\n  types: types\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","decompile","multisig","nullData","pubKey","pubKeyHash","scriptHash","witnessPubKeyHash","witnessScriptHash","witnessCommitment","types","MULTISIG","NONSTANDARD","NULLDATA","P2PK","P2PKH","P2SH","P2WPKH","P2WSH","WITNESS_COMMITMENT","input","classifyInput","script","allowIncomplete","chunks","TypeError","check","output","classifyOutput","witness","classifyWitness"]
}
