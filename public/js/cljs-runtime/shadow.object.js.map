{"version":3,"sources":["shadow/object.cljs"],"sourcesContent":["(ns shadow.object\n  (:refer-clojure :exclude (tree-seq))\n  (:require [shadow.dom :as dom]\n            [cljs.core.async :as async]\n            [clojure.string :as str]\n            [clojure.data :as data]\n            [cljs.core.async.impl.protocols :as async-impl]\n            [shadow.util :as util]\n            ))\n\n(def console-friendly util/console-friendly)\n\n(def log util/log)\n(def debug util/log)\n(def info util/log)\n(def warn util/log)\n(def error util/log)\n\n(def obj-id (atom 0))\n(defn next-id []\n  (swap! obj-id inc))\n\n(def object-defs (atom {}))\n(def behavior-fns (atom {}))\n\n(def instances (atom {}))\n(def instance-parent (atom {}))\n(def instance-children (atom {}))\n\n(def events (atom {}))\n\n(defn define-event [event-name desc args]\n  (swap! events assoc event-name {:id event-name\n                                  :description desc\n                                  :args args}))\n\n(defn unmunge [s]\n  (-> s\n      (str/replace #\"_DOT_\" \".\")\n      (str/replace #\"_\" \"-\")\n      ))\n\n(define-event :init\n  \"object initialization\"\n  [])\n\n(define-event :destroy\n  \"object descruction\"\n  [[:cause \"cause of destruction, :parent means the parent was destroyed, :direct is default\"]])\n\n(define-event :dom/init\n  \"called after the dom was created but has not entered the document yet\"\n  [[:dom \"the dom that was created\"]])\n\n(define-event :dom/entered\n  \"should be called whenever a dom node is added to the document, since that\n   is not in control of this library its up to you to call this\n   use (so/notify-tree! your-obj :dom/entered) to notify the node and every child you created\"\n  [])\n\n(define-event :bind-children-update\n  \"need to rethink this\"\n  [])\n\n(defprotocol IObject\n  (-id [this])\n  (-type [this])\n  (-data [this])\n  (-update [this update-fn] \"update and notify watches\")\n  (-destroy! [this cause]))\n\n(defn get-type [this]\n  (-type this))\n\n(defn get-type-attr\n  ([oref key]\n     (if (nil? oref)\n       nil\n       (let [type-id (if (keyword? oref) oref (-type oref))]\n         (get-in @object-defs [type-id key]))))\n  ([oref key default]\n     (if (nil? oref)\n       default\n       (let [type-id (if (keyword? oref) oref (-type oref))]\n         (get-in @object-defs [type-id key] default)))))\n\n(defn ^:export get-dom [oref]\n  (::dom oref))\n\n(defn ^:export get-by-id [id]\n  (get @instances id))\n\n(defn ^:export get-from-dom [dom]\n  (let [oid (dom/data dom :oid)]\n    (when oid\n      (get-by-id (js/parseInt oid 10)))\n    ))\n\n(defn is-object? [obj-or-dom]\n  (or (satisfies? IObject obj-or-dom)\n      (get-from-dom obj-or-dom)))\n\n(defn equal? [obj obj-or-dom]\n  (assert (satisfies? IObject obj) \"can only test objects\")\n  (if (satisfies? IObject obj-or-dom)\n    (= (-id obj) (-id obj-or-dom))\n    (= (-id obj) (when-let [oid (dom/data obj-or-dom :oid)]\n                   (js/parseInt oid 10)))))\n\n(defn ^:export get-parent [oref]\n  (when-let [parent-id (get @instance-parent (-id oref))]\n    (get @instances parent-id)\n    ))\n\n(defn ^:export get-parent-of-type [oref parent-type]\n  (loop [parent (:parent oref)]\n    (when parent\n      (if (= (-type parent) parent-type)\n        parent\n        (recur (:parent parent))))))\n\n;; FIXME: would be nice if these were in dom order\n;; but since children arent always direct dom children\n;; this would be kinda costly I guess\n(defn ^:export get-children [parent]\n  (let [parent-id (-id parent)\n        child-ids (get @instance-children parent-id [])\n        instances @instances]\n    (vec (map #(get instances %) child-ids))\n    ))\n\n(defn ^:export tree-seq\n  ([root]\n     (tree-seq root (fn [node] true)))\n  ([root branch?]\n     (cljs.core/tree-seq branch? get-children root)))\n\n(defn get-children-of-type [oref type]\n  (let [type-kw (if (keyword? type) type (-type type))]\n    (filter #(= type-kw (-type %)) (get-children oref))\n    ))\n\n(defn get-siblings\n  \"basically (get-children (:parent this))\"\n  [{:keys [parent] :as oref}]\n  (when-not parent\n    (throw (ex-info \"object has no parent, thus has no siblings\" {:oref oref})))\n\n  (get-children parent))\n\n(defn get-siblings-of-type \n  \"returns set of all siblings of a common type\"\n  ([oref]\n     (get-siblings-of-type oref oref))\n  ([oref type]\n     (let [type-kw (if (keyword? type) type (-type type))]\n       (filter #(= type-kw (-type %)) (get-siblings oref))\n       )))\n\n(defn get-collection-item [oref]\n  (let [item-key (::coll-item-key oref)]\n    (get oref item-key)\n    ))\n\n(defn find-containing-object\n  \"find the object that contains this dom node\"\n  [dom]\n  (if-let [obj (get-from-dom dom)]\n    obj\n    (when-let [parent (.-parentElement dom)]\n      (recur parent))))\n\n(defn notify! [oref ev & args]\n  \n  #_ (when-not (contains? @events ev)\n       (debug \"triggering undefined notifiction\" (pr-str ev) \" with \" (pr-str args)))\n\n  ;; (debug \"notify!\" oref ev args)\n\n  (when-let [reactions-to-trigger (get-in oref [::reactions ev])]\n    ;; (debug \"notify!\" (-id oref) (-type oref) ev reactions-to-trigger args)\n    (doseq [rfn reactions-to-trigger]\n      (apply rfn (cons oref args)))\n    ))\n\n(defn- do-notify-tree [current-obj ev notify-fn]\n  (doseq [child (get-children current-obj)]\n    (do-notify-tree child ev notify-fn))\n  (notify-fn current-obj))\n\n(defn notify-tree! [oref ev & args]\n  (let [notify-fn (fn [obj]\n                    (apply notify! obj ev args))]\n    (do-notify-tree oref ev notify-fn)))\n\n(def notify-down! notify-tree!)\n\n(defn notify-up! [oref ev & args]\n  (loop [current (get-parent oref)]\n    (when current\n      (apply notify! current ev args)\n      (recur (get-parent current)))))\n\n(defn update! [oref update-fn & args]\n  (when-not (fn? update-fn)\n    (throw (str \"update! expects a fn as second arg, not \" (pr-str update-fn))))\n\n  (let [id (-id oref)\n        data (-data oref)\n        work-fn (fn [data] (apply update-fn data args))]\n    (-update oref work-fn)\n    ))\n\n(defn return-value [oref return-value]\n  (update! oref assoc ::return-value return-value))\n\n(defn- set-parent! [child parent]\n  (let [child-id (-id child)\n        parent-id (-id parent)]\n    (swap! instance-parent assoc child-id parent-id)\n    (swap! instance-children (fn [x]\n                               (let [current (get x parent-id #{})]\n                                 (assoc x parent-id (conj current child-id))\n                                 )))\n    true))\n\n(defn dom-destroy [this cause]\n  (if (= cause :parent)\n    ;; no messin arround when parent is dead\n    (dom/remove (::dom this))\n    ;; custom removals are allowed when removing direct\n    (if-let [custom-remove (get-type-attr this :dom/remove)]\n      (custom-remove this (::dom this))\n      (dom/remove (::dom this))\n      )))\n\n(defn destroy!\n  ([oref]\n     (destroy! oref :direct))\n  ([oref cause]\n     (-destroy! oref cause)))\n\n(defn bind-dom-events [oref dom dom-events]\n  (when-not (zero? (rem (count dom-events) 2))\n    (throw (ex-info \"object defined invalid event\" {:object-type (-type oref) :dom/events dom-events})))\n\n  (doseq [[ev handler :as ev-def] (partition 2 dom-events)]\n    (when (nil? handler)\n      (throw (str \"ev with nil handler \" (pr-str ev))))\n\n    (let [handler (if (keyword? handler)\n                    (fn [this e el]\n                      (notify! this handler e el))\n                    handler)]\n      (dom/on dom ev (fn dom-event-handler [e el]\n                       (when (= \"A\" (.-tagName el)) \n                         ;; FIXME: thou shall not stop events at all?\n                         ;; FIXME: stops all events on A, but what except click would you use anyways?\n                         ;; <a class=\"wtf\" href=\"#\">something</a>\n                         ;; this just simplifies :dom/events [[:click \"a.wtf\"] some-fn] so some-fn doesnt have to\n                         ;; stop the event which is what you'd want 99% of the time, if you dont want to stop it\n                         ;; use the router and dont listen to click.\n                         (dom/ev-stop e))\n                       (handler oref e el))))))\n\n(defn- reaction-merge [result [event handler]]\n  (when-not (and event handler)\n    (throw (ex-info \"invalid reaction\" {:event event :handler handler})))\n\n  (let [current (get result event (list))]\n    (assoc result event (conj current handler))))\n\n(defn- merge-reactions [result behavior]\n  (when-not (sequential? behavior)\n    (throw (ex-info \"behaviors must be vectors\" {:behavior behavior})))\n  (when-not (even? (count behavior))\n    (throw (ex-info \"invalid behavior\" {:behavior behavior})))\n\n  (reduce reaction-merge result (reverse (partition 2 behavior))))\n\n\n(defn- merge-behaviors [result behavior]\n  (cond\n   (sequential? behavior)\n   (update-in result [::reactions] merge-reactions behavior)\n\n   (map? behavior)\n   (-> result\n       ;; FIXME: there might be more keys to merge, need some kind of merge logic definition\n       (update-in [::reactions] merge-reactions (:on behavior []))\n       (update-in [:watch] (fn [watches]\n                             (concat watches (:watch behavior []))))\n       (update-in [:dom/events] (fn [default]\n                                  (-> default\n                                      (concat (:dom/events behavior []))\n                                      (vec)))))\n   :else\n   (throw (ex-info \"behavior not understood\" {:behavior behavior}))\n   ))\n\n(defn define [id & args]\n  (when-not (keyword? id)\n    (throw (ex-info \"object id needs to be a keyword\" {:id id :args args})))\n  (when-not (even? (count args))\n    (throw (str \"invalid object definition \" (str id) \" args: \"(pr-str args))))\n  (when (contains? @object-defs id)\n    (js/console.warn (str \"object already defined \" id)))\n\n  (try\n    (let [odef (apply hash-map args)\n\n          reactions (merge-reactions {} (:on odef []))\n\n          ;;      reactions (reduce merge-reactions reactions (reverse (:behaviors odef [])))\n\n          odef (assoc odef\n                 ::id id\n                 ::reactions reactions)\n          odef (reduce merge-behaviors odef (reverse (:behaviors odef [])))]\n\n      (swap! object-defs assoc id odef)\n      odef)\n    (catch js/Object e\n      (throw (ex-info \"failed to define object\" {:id id :args args})))))\n\n\n(defn- merge-defaults [data type]\n  (let [defaults (get-in @object-defs [type :defaults])]\n    (cond\n     (nil? defaults) data\n     (map? defaults) (merge defaults data)\n     (fn? defaults) (merge (defaults) data)\n     :else (throw (ex-info \"invalid object defaults\" {:defaults defaults :type type}))\n     )))\n\n(defn make-dom\n  ([oref dom-key events-key]\n     (make-dom oref dom-key events-key nil))\n  ([oref dom-key events-key value]\n      (let [dom-fn (if (keyword? dom-key) (get-type-attr oref dom-key) dom-key)\n            events (if (keyword? events-key) (get-type-attr oref events-key []) events-key)\n            dom (dom/build (dom-fn oref value))]\n        (bind-dom-events oref dom events)\n        dom\n        )))\n\n\n(defn alive? [obj]\n  (contains? @instances (-id obj)))\n\n(defrecord Watch [key handler])\n\n(deftype ObjectRef [id type ^:mutable data ^:mutable watches result-chan]\n  IObject\n  (-id [this] id)\n  (-type [this] type)\n  (-data [this] data)\n  (-update [this update-fn]\n    (let [old data\n          new (update-fn data)]\n      (set! data new)\n      (doseq [{:keys [key handler] :as watch} watches]\n        ;; watches may destroy the current object\n        ;; if that happens we should not continue\n        ;; FIXME: this seems really dirty, there must be a cleaner way?\n        ;; maybe queue all other modifications until this is finished?\n        (when (alive? this)\n          (handler key this old new)))))\n  (-destroy! [this cause]\n    (let [parent-id (get @instance-parent id)]\n\n      ;; destroy children before destroying parent\n      (doseq [child (get-children this)]\n        (-destroy! child :parent))\n\n      (notify! this :destroy cause)\n      (dom-destroy this cause)\n      \n      (let [return-value (::return-value this)]\n        (when-not (nil? return-value)\n          (async/put! result-chan return-value))\n        (async/close! result-chan))\n\n      (swap! instances dissoc id)\n      (swap! instance-parent dissoc id)\n      (when parent-id\n        (swap! instance-children update-in [parent-id] disj id))))\n  \n  async-impl/ReadPort\n  (take! [this ^not-native handler]\n    (async-impl/take! result-chan handler))\n\n  IEquiv\n  (-equiv [this other]\n    (and (instance? ObjectRef other)\n         (= (-id this) (-id other))))\n\n  IDeref\n  (-deref [this] data)\n\n  IPrintWithWriter\n  (-pr-writer [this writer opts]\n    (-write writer (str \"#<ObjectRef {:id \" id \", :type \" type \"}>\")))\n\n  IWatchable\n  (-notify-watches [this oldval newval]\n    (throw (js/Error. \"who be calling?\")))\n  (-add-watch [this key f]\n    (set! watches (conj watches (Watch. key f))))\n  (-remove-watch [this key]\n    (set! watches (remove #(= key (:key %)) watches)))\n\n  ILookup\n  (-lookup [this k]\n    (if (= :parent k)\n      (get-parent this)\n      (get data k)))\n  (-lookup [this k d]\n    (if (= :parent k)\n      (get-parent this)\n      (get data k d)))\n\n  Object\n  (toString [this]\n    (pr-str this))\n\n  dom/IElement\n  (-to-dom [this] (::dom data))\n  \n  dom/SVGElement\n  (-to-svg [this] (::dom data)))\n\n(defn add-reaction!\n  ([oref ev handler-fn]\n     (add-reaction! oref [ev handler-fn]))\n  ([oref list]\n     (update! oref update-in [::reactions] merge-reactions list)\n     ))\n\n(defn bind-change\n  ([oref attr callback]\n     (bind-change oref attr callback (gensym \"bind-change\")))\n  ([oref attr callback watch-key]\n     (when-not (satisfies? IObject oref)\n       (throw (ex-info \"binding currently only supports shadow objects, other atoms might leak, may add later\" {:oref oref :attr attr})))\n\n     (let [attr (if (sequential? attr) attr [attr])]\n       (add-watch oref watch-key\n                  (fn bind-change-watch [_ _ old new]\n                    (let [ov (get-in old attr)\n                          nv (get-in new attr)]\n                      (when-not (= ov nv)\n                        (callback ov nv))))))\n     ))\n\n(defn dom-enter [parent child]\n  (dom/append parent child)\n  (when (dom/contains? parent)\n    ;; only notify when the parent is already in the dom\n    ;; not sure if its useful to keep track of this inside the object itself?\n    (notify-tree! child :dom/entered)))\n\n(defn create [type args & node-children]\n  (when-not (contains? @object-defs type)\n    (throw (ex-info (str \"cannot create unknown child type: \" type) {:type type :args args})))\n  (when-not (map? args)\n    (throw (ex-info \"so/create second arg must be a map\" {:args args})))\n\n  (let [oid (next-id)\n        parent (:parent args)\n        \n        result-chan (async/chan 1)\n\n        odef (get @object-defs type)\n\n        obj (-> args\n                (assoc ::object-id oid\n                       ::reactions (get odef ::reactions {}))\n                (merge-defaults type)\n                (dissoc :parent :dom))\n\n        oref (ObjectRef. oid type obj [] result-chan)]\n\n    ;; dont use oref before this\n    (swap! instances assoc oid oref)\n\n    (when parent\n      (set-parent! oref parent))\n\n    (notify! oref :init)\n\n    (let [dom-events (:dom/events odef [])]\n      (if-let [dom (:dom args)]\n        ;; attach+events\n        (do\n          (dom/set-data dom :oid oid)\n          (bind-dom-events oref dom dom-events)\n          (update! oref assoc ::dom dom)\n          (notify! oref :dom/init dom))\n        ;; create+events\n        (when-let [dom-fn (:dom odef)]\n          (let [dom (dom/build (dom-fn oref node-children))]\n\n            (dom/set-data dom :oid oid)\n\n            (update! oref assoc ::dom dom)\n            (bind-dom-events oref dom dom-events)\n            (notify! oref :dom/init dom)\n            ))))\n\n    (when-let [watches (:watch odef)]\n      (doseq [[attr handler] (partition 2 watches)]\n        (bind-change oref attr (fn [old new]\n                                 (handler oref old new)))))\n\n    oref))\n\n(defn bind-simple\n  \"[oref attr node-gen] produces a node via (node-gen new-value)\n   watches obj for changes and replaces the generated node on change (node-gen defaults to str)\n\n  only use if the node has no attached behavior like clicks, use bind with an extra object for those\"\n  ([oref attr] (bind-simple oref attr str))\n  ([oref attr node-gen]\n     (let [attr (if (sequential? attr) attr [attr])\n           node-get #(dom/build (node-gen %))\n           node (atom (node-get (get-in oref attr)))\n           bind-key (gensym \"bind\")]\n\n       (bind-change oref attr\n                    (fn [old new]\n                      (let [new-node (node-get new)\n                            current-node @node]\n                        (dom/replace-node current-node new-node)\n                        (reset! node new-node))))\n\n       @node)\n     ))\n\n(defn bind\n  \"bind the given attribute a child item\n  the item will be recreated whenever the value changes (old one will be destroyed)\"\n  ([oref attr item-type item-key item-attrs]\n     (let [attr (if (sequential? attr) attr [attr])\n           curval (get-in oref attr)\n\n           make-child-fn (fn [value]\n                           (create item-type (merge\n                                              item-attrs\n                                              {:parent oref\n                                               item-key value})))\n\n           child (atom (make-child-fn curval))]\n\n       (bind-change oref attr\n                    (fn [old new]\n                      (let [new-child (make-child-fn new)\n                            current-node @child]\n\n                        (dom/replace-node current-node new-child)\n                        (destroy! @child)\n                        (reset! child new-child)\n                        (notify-down! new-child :dom/entered)\n                        )))\n\n       @child)\n     ))\n\n(defn coll-destroy-children [children c diff]\n  ;; whats more efficient in the DOM, drop head or tail?\n  ;; diff is neg!\n  (doseq [obj (subvec children (+ c diff) c)]\n    (let [obj (get-from-dom obj)]\n      (destroy! obj)))\n\n  (subvec children 0 (+ c diff)))\n\n(defn bind-children\n  ([node parent attr item-type item-key]\n     (bind-children node parent attr item-type item-key #(map-indexed vector %)))\n  ([node parent attr item-type item-key coll-transform]\n     (let [attr (if (sequential? attr) attr [attr])\n\n           update-children (atom true)\n\n           coll-dom (dom/build node)\n\n           make-item-fn (fn [[key val]]\n                          (let [obj (create item-type {:parent parent\n                                                       ::coll-path attr\n                                                       ::coll-key key\n                                                       ::coll-item-key item-key\n                                                       item-key val})]\n\n                            (bind-change obj item-key\n                                         (fn [old new]\n                                           (let [parent-key (conj attr (::coll-key obj))]\n                                             (log \"direct child update\" parent obj key parent-key new)\n                                             (reset! update-children false)\n                                             (update! parent assoc-in parent-key new)\n                                             (reset! update-children true)\n                                             )))\n                            obj\n                            ))\n\n           ]\n\n       (doseq [item (coll-transform (get-in parent attr))]\n         (dom-enter coll-dom (make-item-fn item)))\n\n       (bind-change parent attr\n                    (fn bind-children-watch [old new]\n                      ;; when a child updated itself, we dont need to update it again\n                      (when @update-children\n                        (let [children (into [] (dom/children coll-dom))\n                              new-coll (vec (coll-transform new))\n                              count-children (count children)\n                              count-new (count new)\n                              diff (- count-new count-children)\n\n                              ;; exit lost children\n                              children (if (neg? diff)\n                                         (coll-destroy-children children count-children diff)\n                                         children)\n                              count-children (min count-new count-children)]\n\n                          ;; update current\n                          (dotimes [idx count-children]\n                            (let [cn (nth children idx)\n                                  cc (get-from-dom cn)\n                                  ckey (::coll-key cc)\n                                  cval (get cc item-key)\n                                  [nkey nval] (nth new-coll idx)]\n\n                              ;; only update when something changes\n                              (when-not (and (= ckey nkey) (= cval nval))\n                                ;; lets try this, updating gets way too messy when dealing with complex objects\n                                ;; just create a new object and destroy the old, also solves cyclic updates and should be faster\n                                (let [new-obj (make-item-fn [nkey nval])]\n                                  (dom/replace-node cn new-obj)\n                                  (destroy! cc)\n                                  (notify-tree! new-obj :dom/entered))\n                                ;;(update! cc assoc item-key nval ::coll-key nkey)\n                                ;;(notify! cc :bind-child-update ckey nkey cval nval)\n                                )))\n\n                          ;; enter new\n                          (when (pos? diff)\n                            (doseq [item (subvec new-coll count-children count-new)]\n                              (dom-enter coll-dom (make-item-fn item))))\n\n                          (notify! parent :bind-children-update)\n                          ))))\n\n       coll-dom)))\n\n(defn remove-in-parent! [oref]\n  (let [parent (get-parent oref)\n        key (::coll-key oref)\n        value (get oref (::coll-item-key oref))\n        path (::coll-path oref)]\n\n    (when-not (and key path)\n      (throw (ex-info \"remove-in-parent! should only be called from items created via so/bind-children\" {:oref oref})))\n\n    (let [coll (get-in parent path)\n          new-coll (util/remove-item-from-coll coll key value)]\n      (notify! parent :bind/update path new-coll))\n    ))\n\n(defn inspect! [oref]\n  (info \"inspect!\" (-id oref) (str (-type oref)) (clj->js @(-data oref))))\n\n(defn ^:export dump! []\n  (info \"--------------- LIVE OBJECTS ------------\")\n  (doseq [[id oref] (seq @instances)]\n    (info \"dump\" id (pr-str (-type oref)) @(-data oref)))\n  (info \"--------------- //LIVE OBJECTS ------------\")\n  )\n"],"mappings":"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","names":["shadow.object/console-friendly","shadow.util/console-friendly","shadow.object/log","shadow.util/log","shadow.object/debug","shadow.object/info","shadow.object/warn","shadow.object/error","shadow.object/obj-id","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.object/next-id","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/inc","shadow.object/object-defs","shadow.object/behavior-fns","shadow.object/instances","shadow.object/instance-parent","shadow.object/instance-children","shadow.object/events","shadow.object/define-event","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","event-name","desc","args","shadow.object/unmunge","s","clojure.string/replace","shadow.object/-id","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","shadow.object/-type","shadow.object/-data","shadow.object/-update","shadow.object/-destroy!","shadow.object/IObject","this","update-fn","cause","shadow.object/get-type","G__21156","shadow.object/get-type-attr","js/Error","oref","cljs.core/Keyword","cljs.core/deref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","type-id","key","default","cljs.core.get_in.cljs$core$IFn$_invoke$arity$3","shadow.object/get-dom","shadow.object/get-by-id","cljs.core.get.cljs$core$IFn$_invoke$arity$2","id","shadow.object/get-from-dom","shadow.dom/data","dom","oid","js/parseInt","shadow.object/is-object?","or__4047__auto__","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","obj-or-dom","shadow.object/equal?","obj","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","temp__5457__auto__","shadow.object/get-parent","parent-id","shadow.object/get-parent-of-type","parent","parent-type","shadow.object/get-children","cljs.core.get.cljs$core$IFn$_invoke$arity$3","cljs.core/vec","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__21191#","instances","child-ids","G__21194","shadow.object/tree-seq","shadow.object.tree_seq.cljs$core$IFn$_invoke$arity$2","root","cljs.core/tree-seq","branch?","shadow.object/get-children-of-type","type","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","type-kw","p1__21196#","p__21200","map__21201","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","shadow.object/get-siblings","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","G__21236","shadow.object/get-siblings-of-type","shadow.object.get_siblings_of_type.cljs$core$IFn$_invoke$arity$2","p1__21218#","shadow.object/get-collection-item","item-key","shadow.object/find-containing-object","temp__5455__auto__","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","shadow.object/notify!","argseq__4648__auto__","cljs.core/first","seq21277","cljs.core/next","self__4628__auto__","G__21278","G__21279","ev","cljs.core/seq","i__21300","count__21299","chunk__21298","seq__21297","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","reactions-to-trigger","rfn","cljs.core/cons","shadow.object/do-notify-tree","i__21309","count__21308","chunk__21307","seq__21306","current-obj","child","notify-fn","shadow.object/notify-tree!","seq21324","G__21325","G__21326","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","shadow.object/notify-down!","shadow.object/notify-up!","seq21336","G__21337","G__21338","current","shadow.object/update!","seq21345","G__21346","G__21347","cljs.core/fn?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","data","work-fn","shadow.object/return-value","shadow.object.update_BANG_.cljs$core$IFn$_invoke$arity$variadic","return-value","shadow.object/set-parent!","child-id","x","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","shadow.object/dom-destroy","shadow.dom/remove","shadow.object.get_type_attr.cljs$core$IFn$_invoke$arity$2","G__21400","G__21401","custom-remove","G__21412","shadow.object/destroy!","shadow.object.destroy_BANG_.cljs$core$IFn$_invoke$arity$2","shadow.object/bind-dom-events","cljs.core/rem","dom-events","i__21424","count__21423","chunk__21422","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__21426","seq__21421","vec__21440","cljs.core.partition.cljs$core$IFn$_invoke$arity$2","handler","shadow.object.notify_BANG_.cljs$core$IFn$_invoke$arity$variadic","e","el","shadow.dom.on.cljs$core$IFn$_invoke$arity$3","shadow.dom.ev_stop.cljs$core$IFn$_invoke$arity$1","p__21466","vec__21467","shadow.object/reaction-merge","and__4036__auto__","event","result","shadow.object/merge-reactions","cljs.core/sequential?","behavior","cljs.core/even?","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/reverse","shadow.object/merge-behaviors","cljs.core.update_in.cljs$core$IFn$_invoke$arity$4","cljs.core/map?","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","watches","shadow.object/define","seq21486","G__21487","cljs.core/contains?","js/console.warn","e21497","odef","cljs.core.assoc.cljs$core$IFn$_invoke$arity$variadic","reactions","js/Object","shadow.object/merge-defaults","defaults","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","G__21516","shadow.object/make-dom","shadow.object.make_dom.cljs$core$IFn$_invoke$arity$4","dom-key","events-key","shadow.object.get_type_attr.cljs$core$IFn$_invoke$arity$3","G__21520","shadow.dom/build","dom-fn","value","events","shadow.object/alive?","this__4301__auto__","k__4302__auto__","k21528","G__21547","__extmap","else__4304__auto__","p__21553","vec__21554","f__4321__auto__","ret__4323__auto__","k__4324__auto__","v__4325__auto__","init__4322__auto__","this__4320__auto__","cljs.core/pr-sequential-writer","writer__4316__auto__","opts__4317__auto__","keyval__4319__auto__","pr-pair__4318__auto__","cljs.core/PersistentVector","cljs.core/RecordIter","G__21527","cljs.core/-iterator","cljs.core/nil-iter","__meta","__hash","h__4159__auto__","cljs.core/hash-unordered-coll","coll__4298__auto__","fexpr__21576","this__4297__auto__","other21530","this21529","k__4311__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","this__4310__auto__","cljs.core/not-empty","cljs.core/keyword-identical?","k__4309__auto__","expr__21591","pred__21590","G__21593","G__21594","G__21597","G__21598","cljs.core/MapEntry","cljs.core/vector?","entry__4307__auto__","this__4306__auto__","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","shadow.object/Watch","cljs.core/List","cljs.core/-write","writer__4345__auto__","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","G__21532","cljs.core/record?","G__21614","extmap__4340__auto__","shadow.object/->Watch","shadow.object/map->Watch","writer__4291__auto__","shadow.object/ObjectRef","shadow.object/->ObjectRef","result-chan","new","i__21736","count__21735","chunk__21734","map__21740","seq__21733","map__21742","old","i__21752","count__21751","chunk__21750","seq__21749","cljs.core.async.put_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.async/close!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update-in","cljs.core/disj","cljs.core.async.impl.protocols/take!","other","writer","f","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p1__21631#","k","d","G__21760","shadow.object/add-reaction!","shadow.object.add_reaction_BANG_.cljs$core$IFn$_invoke$arity$2","handler-fn","list","G__21764","shadow.object/bind-change","shadow.object.bind_change.cljs$core$IFn$_invoke$arity$4","attr","callback","cljs.core.gensym.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","watch-key","ov","nv","shadow.object/dom-enter","shadow.dom.append.cljs$core$IFn$_invoke$arity$2","shadow.dom.contains_QMARK_.cljs$core$IFn$_invoke$arity$1","shadow.object/create","seq21772","G__21773","G__21774","cljs.core.async.chan.cljs$core$IFn$_invoke$arity$1","shadow.dom/set-data","G__21779","node-children","i__21783","count__21782","chunk__21781","vec__21784","seq__21780","vec__21788","shadow.object.bind_change.cljs$core$IFn$_invoke$arity$3","G__21797","shadow.object/bind-simple","shadow.object.bind_simple.cljs$core$IFn$_invoke$arity$3","cljs.core/str","G__21798","p1__21791#","node-gen","node-get","node","shadow.dom/replace-node","current-node","new-node","cljs.core/reset!","shadow.object/bind","item-type","item-attrs","make-child-fn","curval","new-child","shadow.object.destroy_BANG_.cljs$core$IFn$_invoke$arity$1","G__21807","G__21808","shadow.object/coll-destroy-children","i__21816","count__21815","chunk__21814","seq__21813","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","children","c","diff","G__21823","shadow.object/bind-children","shadow.object.bind_children.cljs$core$IFn$_invoke$arity$6","p1__21821#","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","p__21824","vec__21825","val","parent-key","update-children","cljs.core/assoc-in","i__21831","count__21830","chunk__21829","seq__21828","G__21832","coll-transform","coll-dom","make-item-fn","item","shadow.dom/children","count-new","count-children","x__4138__auto__","y__4139__auto__","n__4518__auto__","idx","vec__21833","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cn","cc","new-coll","ckey","nkey","cval","nval","new-obj","i__21839","count__21838","chunk__21837","seq__21836","shadow.object/remove-in-parent!","path","shadow.util/remove-item-from-coll","coll","shadow.object/inspect!","G__21843","G__21844","G__21845","G__21846","cljs.core/clj->js","shadow.object/dump!","i__21851","count__21850","chunk__21849","vec__21853","seq__21848","vec__21862","G__21856","G__21857","G__21858","G__21859","G__21865","G__21866","G__21867","G__21868"]}