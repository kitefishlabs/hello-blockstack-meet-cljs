{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$transaction.js",
"lineCount":21,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/transaction.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$transaction\"] = function(global,process,require,module,exports,shadow$shims) {\nconst Buffer = require('safe-buffer').Buffer\nconst bcrypto = require('./crypto')\nconst bscript = require('./script')\nconst bufferutils = require('./bufferutils')\nconst opcodes = require('bitcoin-ops')\nconst typeforce = require('typeforce')\nconst types = require('./types')\nconst varuint = require('varuint-bitcoin')\n\nfunction varSliceSize (someScript) {\n  const length = someScript.length\n\n  return varuint.encodingLength(length) + length\n}\n\nfunction vectorSize (someVector) {\n  const length = someVector.length\n\n  return varuint.encodingLength(length) + someVector.reduce(function (sum, witness) {\n    return sum + varSliceSize(witness)\n  }, 0)\n}\n\nfunction Transaction () {\n  this.version = 1\n  this.locktime = 0\n  this.ins = []\n  this.outs = []\n}\n\nTransaction.DEFAULT_SEQUENCE = 0xffffffff\nTransaction.SIGHASH_ALL = 0x01\nTransaction.SIGHASH_NONE = 0x02\nTransaction.SIGHASH_SINGLE = 0x03\nTransaction.SIGHASH_ANYONECANPAY = 0x80\nTransaction.ADVANCED_TRANSACTION_MARKER = 0x00\nTransaction.ADVANCED_TRANSACTION_FLAG = 0x01\n\nconst EMPTY_SCRIPT = Buffer.allocUnsafe(0)\nconst EMPTY_WITNESS = []\nconst ZERO = Buffer.from('0000000000000000000000000000000000000000000000000000000000000000', 'hex')\nconst ONE = Buffer.from('0000000000000000000000000000000000000000000000000000000000000001', 'hex')\nconst VALUE_UINT64_MAX = Buffer.from('ffffffffffffffff', 'hex')\nconst BLANK_OUTPUT = {\n  script: EMPTY_SCRIPT,\n  valueBuffer: VALUE_UINT64_MAX\n}\n\nTransaction.fromBuffer = function (buffer, __noStrict) {\n  let offset = 0\n  function readSlice (n) {\n    offset += n\n    return buffer.slice(offset - n, offset)\n  }\n\n  function readUInt32 () {\n    const i = buffer.readUInt32LE(offset)\n    offset += 4\n    return i\n  }\n\n  function readInt32 () {\n    const i = buffer.readInt32LE(offset)\n    offset += 4\n    return i\n  }\n\n  function readUInt64 () {\n    const i = bufferutils.readUInt64LE(buffer, offset)\n    offset += 8\n    return i\n  }\n\n  function readVarInt () {\n    const vi = varuint.decode(buffer, offset)\n    offset += varuint.decode.bytes\n    return vi\n  }\n\n  function readVarSlice () {\n    return readSlice(readVarInt())\n  }\n\n  function readVector () {\n    const count = readVarInt()\n    const vector = []\n    for (var i = 0; i < count; i++) vector.push(readVarSlice())\n    return vector\n  }\n\n  const tx = new Transaction()\n  tx.version = readInt32()\n\n  const marker = buffer.readUInt8(offset)\n  const flag = buffer.readUInt8(offset + 1)\n\n  let hasWitnesses = false\n  if (marker === Transaction.ADVANCED_TRANSACTION_MARKER &&\n      flag === Transaction.ADVANCED_TRANSACTION_FLAG) {\n    offset += 2\n    hasWitnesses = true\n  }\n\n  const vinLen = readVarInt()\n  for (var i = 0; i < vinLen; ++i) {\n    tx.ins.push({\n      hash: readSlice(32),\n      index: readUInt32(),\n      script: readVarSlice(),\n      sequence: readUInt32(),\n      witness: EMPTY_WITNESS\n    })\n  }\n\n  const voutLen = readVarInt()\n  for (i = 0; i < voutLen; ++i) {\n    tx.outs.push({\n      value: readUInt64(),\n      script: readVarSlice()\n    })\n  }\n\n  if (hasWitnesses) {\n    for (i = 0; i < vinLen; ++i) {\n      tx.ins[i].witness = readVector()\n    }\n\n    // was this pointless?\n    if (!tx.hasWitnesses()) throw new Error('Transaction has superfluous witness data')\n  }\n\n  tx.locktime = readUInt32()\n\n  if (__noStrict) return tx\n  if (offset !== buffer.length) throw new Error('Transaction has unexpected data')\n\n  return tx\n}\n\nTransaction.fromHex = function (hex) {\n  return Transaction.fromBuffer(Buffer.from(hex, 'hex'))\n}\n\nTransaction.isCoinbaseHash = function (buffer) {\n  typeforce(types.Hash256bit, buffer)\n  for (var i = 0; i < 32; ++i) {\n    if (buffer[i] !== 0) return false\n  }\n  return true\n}\n\nTransaction.prototype.isCoinbase = function () {\n  return this.ins.length === 1 && Transaction.isCoinbaseHash(this.ins[0].hash)\n}\n\nTransaction.prototype.addInput = function (hash, index, sequence, scriptSig) {\n  typeforce(types.tuple(\n    types.Hash256bit,\n    types.UInt32,\n    types.maybe(types.UInt32),\n    types.maybe(types.Buffer)\n  ), arguments)\n\n  if (types.Null(sequence)) {\n    sequence = Transaction.DEFAULT_SEQUENCE\n  }\n\n  // Add the input and return the input's index\n  return (this.ins.push({\n    hash: hash,\n    index: index,\n    script: scriptSig || EMPTY_SCRIPT,\n    sequence: sequence,\n    witness: EMPTY_WITNESS\n  }) - 1)\n}\n\nTransaction.prototype.addOutput = function (scriptPubKey, value) {\n  typeforce(types.tuple(types.Buffer, types.Satoshi), arguments)\n\n  // Add the output and return the output's index\n  return (this.outs.push({\n    script: scriptPubKey,\n    value: value\n  }) - 1)\n}\n\nTransaction.prototype.hasWitnesses = function () {\n  return this.ins.some(function (x) {\n    return x.witness.length !== 0\n  })\n}\n\nTransaction.prototype.weight = function () {\n  const base = this.__byteLength(false)\n  const total = this.__byteLength(true)\n  return base * 3 + total\n}\n\nTransaction.prototype.virtualSize = function () {\n  return Math.ceil(this.weight() / 4)\n}\n\nTransaction.prototype.byteLength = function () {\n  return this.__byteLength(true)\n}\n\nTransaction.prototype.__byteLength = function (__allowWitness) {\n  const hasWitnesses = __allowWitness && this.hasWitnesses()\n\n  return (\n    (hasWitnesses ? 10 : 8) +\n    varuint.encodingLength(this.ins.length) +\n    varuint.encodingLength(this.outs.length) +\n    this.ins.reduce(function (sum, input) { return sum + 40 + varSliceSize(input.script) }, 0) +\n    this.outs.reduce(function (sum, output) { return sum + 8 + varSliceSize(output.script) }, 0) +\n    (hasWitnesses ? this.ins.reduce(function (sum, input) { return sum + vectorSize(input.witness) }, 0) : 0)\n  )\n}\n\nTransaction.prototype.clone = function () {\n  const newTx = new Transaction()\n  newTx.version = this.version\n  newTx.locktime = this.locktime\n\n  newTx.ins = this.ins.map(function (txIn) {\n    return {\n      hash: txIn.hash,\n      index: txIn.index,\n      script: txIn.script,\n      sequence: txIn.sequence,\n      witness: txIn.witness\n    }\n  })\n\n  newTx.outs = this.outs.map(function (txOut) {\n    return {\n      script: txOut.script,\n      value: txOut.value\n    }\n  })\n\n  return newTx\n}\n\n/**\n * Hash transaction for signing a specific input.\n *\n * Bitcoin uses a different hash for each signed transaction input.\n * This method copies the transaction, makes the necessary changes based on the\n * hashType, and then hashes the result.\n * This hash can then be used to sign the provided transaction input.\n */\nTransaction.prototype.hashForSignature = function (inIndex, prevOutScript, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, /* types.UInt8 */ types.Number), arguments)\n\n  // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L29\n  if (inIndex >= this.ins.length) return ONE\n\n  // ignore OP_CODESEPARATOR\n  const ourScript = bscript.compile(bscript.decompile(prevOutScript).filter(function (x) {\n    return x !== opcodes.OP_CODESEPARATOR\n  }))\n\n  const txTmp = this.clone()\n\n  // SIGHASH_NONE: ignore all outputs? (wildcard payee)\n  if ((hashType & 0x1f) === Transaction.SIGHASH_NONE) {\n    txTmp.outs = []\n\n    // ignore sequence numbers (except at inIndex)\n    txTmp.ins.forEach(function (input, i) {\n      if (i === inIndex) return\n\n      input.sequence = 0\n    })\n\n  // SIGHASH_SINGLE: ignore all outputs, except at the same index?\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE) {\n    // https://github.com/bitcoin/bitcoin/blob/master/src/test/sighash_tests.cpp#L60\n    if (inIndex >= this.outs.length) return ONE\n\n    // truncate outputs after\n    txTmp.outs.length = inIndex + 1\n\n    // \"blank\" outputs before\n    for (var i = 0; i < inIndex; i++) {\n      txTmp.outs[i] = BLANK_OUTPUT\n    }\n\n    // ignore sequence numbers (except at inIndex)\n    txTmp.ins.forEach(function (input, y) {\n      if (y === inIndex) return\n\n      input.sequence = 0\n    })\n  }\n\n  // SIGHASH_ANYONECANPAY: ignore inputs entirely?\n  if (hashType & Transaction.SIGHASH_ANYONECANPAY) {\n    txTmp.ins = [txTmp.ins[inIndex]]\n    txTmp.ins[0].script = ourScript\n\n  // SIGHASH_ALL: only ignore input scripts\n  } else {\n    // \"blank\" others input scripts\n    txTmp.ins.forEach(function (input) { input.script = EMPTY_SCRIPT })\n    txTmp.ins[inIndex].script = ourScript\n  }\n\n  // serialize and hash\n  const buffer = Buffer.allocUnsafe(txTmp.__byteLength(false) + 4)\n  buffer.writeInt32LE(hashType, buffer.length - 4)\n  txTmp.__toBuffer(buffer, 0, false)\n\n  return bcrypto.hash256(buffer)\n}\n\nTransaction.prototype.hashForWitnessV0 = function (inIndex, prevOutScript, value, hashType) {\n  typeforce(types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32), arguments)\n\n  let tbuffer, toffset\n  function writeSlice (slice) { toffset += slice.copy(tbuffer, toffset) }\n  function writeUInt32 (i) { toffset = tbuffer.writeUInt32LE(i, toffset) }\n  function writeUInt64 (i) { toffset = bufferutils.writeUInt64LE(tbuffer, i, toffset) }\n  function writeVarInt (i) {\n    varuint.encode(i, tbuffer, toffset)\n    toffset += varuint.encode.bytes\n  }\n  function writeVarSlice (slice) { writeVarInt(slice.length); writeSlice(slice) }\n\n  let hashOutputs = ZERO\n  let hashPrevouts = ZERO\n  let hashSequence = ZERO\n\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY)) {\n    tbuffer = Buffer.allocUnsafe(36 * this.ins.length)\n    toffset = 0\n\n    this.ins.forEach(function (txIn) {\n      writeSlice(txIn.hash)\n      writeUInt32(txIn.index)\n    })\n\n    hashPrevouts = bcrypto.hash256(tbuffer)\n  }\n\n  if (!(hashType & Transaction.SIGHASH_ANYONECANPAY) &&\n       (hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n       (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    tbuffer = Buffer.allocUnsafe(4 * this.ins.length)\n    toffset = 0\n\n    this.ins.forEach(function (txIn) {\n      writeUInt32(txIn.sequence)\n    })\n\n    hashSequence = bcrypto.hash256(tbuffer)\n  }\n\n  if ((hashType & 0x1f) !== Transaction.SIGHASH_SINGLE &&\n      (hashType & 0x1f) !== Transaction.SIGHASH_NONE) {\n    const txOutsSize = this.outs.reduce(function (sum, output) {\n      return sum + 8 + varSliceSize(output.script)\n    }, 0)\n\n    tbuffer = Buffer.allocUnsafe(txOutsSize)\n    toffset = 0\n\n    this.outs.forEach(function (out) {\n      writeUInt64(out.value)\n      writeVarSlice(out.script)\n    })\n\n    hashOutputs = bcrypto.hash256(tbuffer)\n  } else if ((hashType & 0x1f) === Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {\n    const output = this.outs[inIndex]\n\n    tbuffer = Buffer.allocUnsafe(8 + varSliceSize(output.script))\n    toffset = 0\n    writeUInt64(output.value)\n    writeVarSlice(output.script)\n\n    hashOutputs = bcrypto.hash256(tbuffer)\n  }\n\n  tbuffer = Buffer.allocUnsafe(156 + varSliceSize(prevOutScript))\n  toffset = 0\n\n  const input = this.ins[inIndex]\n  writeUInt32(this.version)\n  writeSlice(hashPrevouts)\n  writeSlice(hashSequence)\n  writeSlice(input.hash)\n  writeUInt32(input.index)\n  writeVarSlice(prevOutScript)\n  writeUInt64(value)\n  writeUInt32(input.sequence)\n  writeSlice(hashOutputs)\n  writeUInt32(this.locktime)\n  writeUInt32(hashType)\n  return bcrypto.hash256(tbuffer)\n}\n\nTransaction.prototype.getHash = function () {\n  return bcrypto.hash256(this.__toBuffer(undefined, undefined, false))\n}\n\nTransaction.prototype.getId = function () {\n  // transaction hash's are displayed in reverse order\n  return this.getHash().reverse().toString('hex')\n}\n\nTransaction.prototype.toBuffer = function (buffer, initialOffset) {\n  return this.__toBuffer(buffer, initialOffset, true)\n}\n\nTransaction.prototype.__toBuffer = function (buffer, initialOffset, __allowWitness) {\n  if (!buffer) buffer = Buffer.allocUnsafe(this.__byteLength(__allowWitness))\n\n  let offset = initialOffset || 0\n  function writeSlice (slice) { offset += slice.copy(buffer, offset) }\n  function writeUInt8 (i) { offset = buffer.writeUInt8(i, offset) }\n  function writeUInt32 (i) { offset = buffer.writeUInt32LE(i, offset) }\n  function writeInt32 (i) { offset = buffer.writeInt32LE(i, offset) }\n  function writeUInt64 (i) { offset = bufferutils.writeUInt64LE(buffer, i, offset) }\n  function writeVarInt (i) {\n    varuint.encode(i, buffer, offset)\n    offset += varuint.encode.bytes\n  }\n  function writeVarSlice (slice) { writeVarInt(slice.length); writeSlice(slice) }\n  function writeVector (vector) { writeVarInt(vector.length); vector.forEach(writeVarSlice) }\n\n  writeInt32(this.version)\n\n  const hasWitnesses = __allowWitness && this.hasWitnesses()\n\n  if (hasWitnesses) {\n    writeUInt8(Transaction.ADVANCED_TRANSACTION_MARKER)\n    writeUInt8(Transaction.ADVANCED_TRANSACTION_FLAG)\n  }\n\n  writeVarInt(this.ins.length)\n\n  this.ins.forEach(function (txIn) {\n    writeSlice(txIn.hash)\n    writeUInt32(txIn.index)\n    writeVarSlice(txIn.script)\n    writeUInt32(txIn.sequence)\n  })\n\n  writeVarInt(this.outs.length)\n  this.outs.forEach(function (txOut) {\n    if (!txOut.valueBuffer) {\n      writeUInt64(txOut.value)\n    } else {\n      writeSlice(txOut.valueBuffer)\n    }\n\n    writeVarSlice(txOut.script)\n  })\n\n  if (hasWitnesses) {\n    this.ins.forEach(function (input) {\n      writeVector(input.witness)\n    })\n  }\n\n  writeUInt32(this.locktime)\n\n  // avoid slicing unless necessary\n  if (initialOffset !== undefined) return buffer.slice(initialOffset, offset)\n  return buffer\n}\n\nTransaction.prototype.toHex = function () {\n  return this.toBuffer().toString('hex')\n}\n\nTransaction.prototype.setInputScript = function (index, scriptSig) {\n  typeforce(types.tuple(types.Number, types.Buffer), arguments)\n\n  this.ins[index].script = scriptSig\n}\n\nTransaction.prototype.setWitness = function (index, witness) {\n  typeforce(types.tuple(types.Number, [types.Buffer]), arguments)\n\n  this.ins[index].witness = witness\n}\n\nmodule.exports = Transaction\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","varSliceSize","someScript","length","varuint","encodingLength","vectorSize","someVector","reduce","sum","witness","Transaction","version","locktime","ins","outs","Buffer","bcrypto","bscript","bufferutils","opcodes","typeforce","types","DEFAULT_SEQUENCE","SIGHASH_ALL","SIGHASH_NONE","SIGHASH_SINGLE","SIGHASH_ANYONECANPAY","ADVANCED_TRANSACTION_MARKER","ADVANCED_TRANSACTION_FLAG","EMPTY_SCRIPT","allocUnsafe","EMPTY_WITNESS","ZERO","from","ONE","VALUE_UINT64_MAX","BLANK_OUTPUT","script","valueBuffer","fromBuffer","Transaction.fromBuffer","buffer","__noStrict","readSlice","n","offset","slice","readUInt32","i","readUInt32LE","readUInt64","readUInt64LE","readVarInt","vi","decode","bytes","readVector","count","vector","push","tx","readInt32","readInt32LE","marker","readUInt8","flag","hasWitnesses","vinLen","hash","index","sequence","voutLen","value","Error","fromHex","Transaction.fromHex","hex","isCoinbaseHash","Transaction.isCoinbaseHash","Hash256bit","prototype","isCoinbase","Transaction.prototype.isCoinbase","addInput","Transaction.prototype.addInput","scriptSig","tuple","UInt32","maybe","arguments","Null","addOutput","Transaction.prototype.addOutput","scriptPubKey","Satoshi","Transaction.prototype.hasWitnesses","some","x","weight","Transaction.prototype.weight","base","__byteLength","total","virtualSize","Transaction.prototype.virtualSize","Math","ceil","byteLength","Transaction.prototype.byteLength","Transaction.prototype.__byteLength","__allowWitness","input","output","clone","Transaction.prototype.clone","newTx","map","txIn","txOut","hashForSignature","Transaction.prototype.hashForSignature","inIndex","prevOutScript","hashType","Number","ourScript","compile","decompile","filter","OP_CODESEPARATOR","txTmp","forEach","y","writeInt32LE","__toBuffer","hash256","hashForWitnessV0","Transaction.prototype.hashForWitnessV0","writeSlice","toffset","copy","tbuffer","writeUInt32","writeUInt32LE","writeUInt64","writeUInt64LE","writeVarSlice","encode","hashOutputs","hashPrevouts","hashSequence","txOutsSize","out","getHash","Transaction.prototype.getHash","undefined","getId","Transaction.prototype.getId","reverse","toString","toBuffer","Transaction.prototype.toBuffer","initialOffset","Transaction.prototype.__toBuffer","writeVarInt","writeUInt8","toHex","Transaction.prototype.toHex","setInputScript","Transaction.prototype.setInputScript","setWitness","Transaction.prototype.setWitness"]
}
