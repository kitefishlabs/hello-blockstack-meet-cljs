shadow$provide.module$node_modules$blockstack$lib$profiles$profileZoneFiles=function(global,process,require,module,exports,shadow$shims){function getTokenFileUrl(zoneFileJson){if(!zoneFileJson.hasOwnProperty("uri")||!Array.isArray(zoneFileJson.uri)||1>zoneFileJson.uri.length)return null;zoneFileJson=zoneFileJson.uri[0];if(!zoneFileJson.hasOwnProperty("target"))return null;zoneFileJson=zoneFileJson.target;zoneFileJson.startsWith("https")||zoneFileJson.startsWith("http")||(zoneFileJson="https://"+zoneFileJson);
return zoneFileJson}Object.defineProperty(exports,"__esModule",{value:!0});exports.makeProfileZoneFile=function(origin,tokenFileUrl){if(0>tokenFileUrl.indexOf("://"))throw Error("Invalid token file url");var urlScheme=tokenFileUrl.split("://")[0],urlParts=tokenFileUrl.split("://")[1].split("/");tokenFileUrl=urlParts[0];urlParts="/"+urlParts.slice(1).join("/");origin={$origin:origin,$ttl:3600,uri:[{name:"_http._tcp",priority:10,weight:1,target:urlScheme+"://"+tokenFileUrl+urlParts}]};return(0,_zoneFile.makeZoneFile)(origin,
"{$origin}\n{$ttl}\n{uri}\n")};exports.getTokenFileUrl=getTokenFileUrl;exports.resolveZoneFileToProfile=function(zoneFile,publicKeyOrAddress){return new Promise(function(resolve,reject){var zoneFileJson=null;try{zoneFileJson=(0,_zoneFile.parseZoneFile)(zoneFile),zoneFileJson.hasOwnProperty("$origin")||(zoneFileJson=null)}catch(e){reject(e)}var tokenFileUrl=null;if(zoneFileJson&&0<Object.keys(zoneFileJson).length)(tokenFileUrl=getTokenFileUrl(zoneFileJson))?fetch(tokenFileUrl).then(function(response){return response.text()}).then(function(responseText){return JSON.parse(responseText)}).then(function(responseJson){responseJson=
(0,_profileTokens.extractProfile)(responseJson[0].token,publicKeyOrAddress);resolve(responseJson)}).catch(function(error){_logger.Logger.error("resolveZoneFileToProfile: error fetching token file "+tokenFileUrl,error);reject(error)}):(_logger.Logger.debug("Token file url not found. Resolving to blank profile."),resolve({}));else{zoneFileJson=null;try{zoneFileJson=JSON.parse(zoneFile),zoneFileJson=_index.Person.fromLegacyFormat(zoneFileJson).profile()}catch(error){reject(error)}resolve(zoneFileJson)}})};
var _zoneFile=require("module$node_modules$zone_file$lib$index"),_profileTokens=require("module$node_modules$blockstack$lib$profiles$profileTokens"),_index=require("module$node_modules$blockstack$lib$profiles$index"),_logger=require("module$node_modules$blockstack$lib$logger")}
//# sourceMappingURL=module$node_modules$blockstack$lib$profiles$profileZoneFiles.js.map
