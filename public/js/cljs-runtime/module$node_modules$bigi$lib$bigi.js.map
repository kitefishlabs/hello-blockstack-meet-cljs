{
"version":3,
"file":"module$node_modules$bigi$lib$bigi.js",
"lineCount":37,
"mappings":"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",
"sources":["node_modules/bigi/lib/bigi.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bigi$lib$bigi\"] = function(global,process,require,module,exports,shadow$shims) {\n// (public) Constructor\nfunction BigInteger(a, b, c) {\n  if (!(this instanceof BigInteger))\n    return new BigInteger(a, b, c)\n\n  if (a != null) {\n    if (\"number\" == typeof a) this.fromNumber(a, b, c)\n    else if (b == null && \"string\" != typeof a) this.fromString(a, 256)\n    else this.fromString(a, b)\n  }\n}\n\nvar proto = BigInteger.prototype\n\n// duck-typed isBigInteger\nproto.__bigi = require('../package.json').version\nBigInteger.isBigInteger = function (obj, check_ver) {\n  return obj && obj.__bigi && (!check_ver || obj.__bigi === proto.__bigi)\n}\n\n// Bits per digit\nvar dbits\n\n// am: Compute w_j += (x*this_i), propagate carries,\n// c is initial carry, returns final carry.\n// c < 3*dvalue, x < 2*dvalue, this_i < dvalue\n// We need to select the fastest one that works in this environment.\n\n// am1: use a single mult and divide to get the high bits,\n// max digit bits should be 26 because\n// max internal value = 2*dvalue^2-2*dvalue (< 2^53)\nfunction am1(i, x, w, j, c, n) {\n  while (--n >= 0) {\n    var v = x * this[i++] + w[j] + c\n    c = Math.floor(v / 0x4000000)\n    w[j++] = v & 0x3ffffff\n  }\n  return c\n}\n// am2 avoids a big mult-and-extract completely.\n// Max digit bits should be <= 30 because we do bitwise ops\n// on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)\nfunction am2(i, x, w, j, c, n) {\n  var xl = x & 0x7fff,\n    xh = x >> 15\n  while (--n >= 0) {\n    var l = this[i] & 0x7fff\n    var h = this[i++] >> 15\n    var m = xh * l + h * xl\n    l = xl * l + ((m & 0x7fff) << 15) + w[j] + (c & 0x3fffffff)\n    c = (l >>> 30) + (m >>> 15) + xh * h + (c >>> 30)\n    w[j++] = l & 0x3fffffff\n  }\n  return c\n}\n// Alternately, set max digit bits to 28 since some\n// browsers slow down when dealing with 32-bit numbers.\nfunction am3(i, x, w, j, c, n) {\n  var xl = x & 0x3fff,\n    xh = x >> 14\n  while (--n >= 0) {\n    var l = this[i] & 0x3fff\n    var h = this[i++] >> 14\n    var m = xh * l + h * xl\n    l = xl * l + ((m & 0x3fff) << 14) + w[j] + c\n    c = (l >> 28) + (m >> 14) + xh * h\n    w[j++] = l & 0xfffffff\n  }\n  return c\n}\n\n// wtf?\nBigInteger.prototype.am = am1\ndbits = 26\n\nBigInteger.prototype.DB = dbits\nBigInteger.prototype.DM = ((1 << dbits) - 1)\nvar DV = BigInteger.prototype.DV = (1 << dbits)\n\nvar BI_FP = 52\nBigInteger.prototype.FV = Math.pow(2, BI_FP)\nBigInteger.prototype.F1 = BI_FP - dbits\nBigInteger.prototype.F2 = 2 * dbits - BI_FP\n\n// Digit conversions\nvar BI_RM = \"0123456789abcdefghijklmnopqrstuvwxyz\"\nvar BI_RC = new Array()\nvar rr, vv\nrr = \"0\".charCodeAt(0)\nfor (vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv\nrr = \"a\".charCodeAt(0)\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\nrr = \"A\".charCodeAt(0)\nfor (vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv\n\nfunction int2char(n) {\n  return BI_RM.charAt(n)\n}\n\nfunction intAt(s, i) {\n  var c = BI_RC[s.charCodeAt(i)]\n  return (c == null) ? -1 : c\n}\n\n// (protected) copy this to r\nfunction bnpCopyTo(r) {\n  for (var i = this.t - 1; i >= 0; --i) r[i] = this[i]\n  r.t = this.t\n  r.s = this.s\n}\n\n// (protected) set from integer value x, -DV <= x < DV\nfunction bnpFromInt(x) {\n  this.t = 1\n  this.s = (x < 0) ? -1 : 0\n  if (x > 0) this[0] = x\n  else if (x < -1) this[0] = x + DV\n  else this.t = 0\n}\n\n// return bigint initialized to value\nfunction nbv(i) {\n  var r = new BigInteger()\n  r.fromInt(i)\n  return r\n}\n\n// (protected) set from string and radix\nfunction bnpFromString(s, b) {\n  var self = this\n\n  var k\n  if (b == 16) k = 4\n  else if (b == 8) k = 3\n  else if (b == 256) k = 8; // byte array\n  else if (b == 2) k = 1\n  else if (b == 32) k = 5\n  else if (b == 4) k = 2\n  else {\n    self.fromRadix(s, b)\n    return\n  }\n  self.t = 0\n  self.s = 0\n  var i = s.length,\n    mi = false,\n    sh = 0\n  while (--i >= 0) {\n    var x = (k == 8) ? s[i] & 0xff : intAt(s, i)\n    if (x < 0) {\n      if (s.charAt(i) == \"-\") mi = true\n      continue\n    }\n    mi = false\n    if (sh == 0)\n      self[self.t++] = x\n    else if (sh + k > self.DB) {\n      self[self.t - 1] |= (x & ((1 << (self.DB - sh)) - 1)) << sh\n      self[self.t++] = (x >> (self.DB - sh))\n    } else\n      self[self.t - 1] |= x << sh\n    sh += k\n    if (sh >= self.DB) sh -= self.DB\n  }\n  if (k == 8 && (s[0] & 0x80) != 0) {\n    self.s = -1\n    if (sh > 0) self[self.t - 1] |= ((1 << (self.DB - sh)) - 1) << sh\n  }\n  self.clamp()\n  if (mi) BigInteger.ZERO.subTo(self, self)\n}\n\n// (protected) clamp off excess high words\nfunction bnpClamp() {\n  var c = this.s & this.DM\n  while (this.t > 0 && this[this.t - 1] == c)--this.t\n}\n\n// (public) return string representation in given radix\nfunction bnToString(b) {\n  var self = this\n  if (self.s < 0) return \"-\" + self.negate()\n    .toString(b)\n  var k\n  if (b == 16) k = 4\n  else if (b == 8) k = 3\n  else if (b == 2) k = 1\n  else if (b == 32) k = 5\n  else if (b == 4) k = 2\n  else return self.toRadix(b)\n  var km = (1 << k) - 1,\n    d, m = false,\n    r = \"\",\n    i = self.t\n  var p = self.DB - (i * self.DB) % k\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) > 0) {\n      m = true\n      r = int2char(d)\n    }\n    while (i >= 0) {\n      if (p < k) {\n        d = (self[i] & ((1 << p) - 1)) << (k - p)\n        d |= self[--i] >> (p += self.DB - k)\n      } else {\n        d = (self[i] >> (p -= k)) & km\n        if (p <= 0) {\n          p += self.DB\n          --i\n        }\n      }\n      if (d > 0) m = true\n      if (m) r += int2char(d)\n    }\n  }\n  return m ? r : \"0\"\n}\n\n// (public) -this\nfunction bnNegate() {\n  var r = new BigInteger()\n  BigInteger.ZERO.subTo(this, r)\n  return r\n}\n\n// (public) |this|\nfunction bnAbs() {\n  return (this.s < 0) ? this.negate() : this\n}\n\n// (public) return + if this > a, - if this < a, 0 if equal\nfunction bnCompareTo(a) {\n  var r = this.s - a.s\n  if (r != 0) return r\n  var i = this.t\n  r = i - a.t\n  if (r != 0) return (this.s < 0) ? -r : r\n  while (--i >= 0)\n    if ((r = this[i] - a[i]) != 0) return r\n  return 0\n}\n\n// returns bit length of the integer x\nfunction nbits(x) {\n  var r = 1,\n    t\n  if ((t = x >>> 16) != 0) {\n    x = t\n    r += 16\n  }\n  if ((t = x >> 8) != 0) {\n    x = t\n    r += 8\n  }\n  if ((t = x >> 4) != 0) {\n    x = t\n    r += 4\n  }\n  if ((t = x >> 2) != 0) {\n    x = t\n    r += 2\n  }\n  if ((t = x >> 1) != 0) {\n    x = t\n    r += 1\n  }\n  return r\n}\n\n// (public) return the number of bits in \"this\"\nfunction bnBitLength() {\n  if (this.t <= 0) return 0\n  return this.DB * (this.t - 1) + nbits(this[this.t - 1] ^ (this.s & this.DM))\n}\n\n// (public) return the number of bytes in \"this\"\nfunction bnByteLength() {\n  return this.bitLength() >> 3\n}\n\n// (protected) r = this << n*DB\nfunction bnpDLShiftTo(n, r) {\n  var i\n  for (i = this.t - 1; i >= 0; --i) r[i + n] = this[i]\n  for (i = n - 1; i >= 0; --i) r[i] = 0\n  r.t = this.t + n\n  r.s = this.s\n}\n\n// (protected) r = this >> n*DB\nfunction bnpDRShiftTo(n, r) {\n  for (var i = n; i < this.t; ++i) r[i - n] = this[i]\n  r.t = Math.max(this.t - n, 0)\n  r.s = this.s\n}\n\n// (protected) r = this << n\nfunction bnpLShiftTo(n, r) {\n  var self = this\n  var bs = n % self.DB\n  var cbs = self.DB - bs\n  var bm = (1 << cbs) - 1\n  var ds = Math.floor(n / self.DB),\n    c = (self.s << bs) & self.DM,\n    i\n  for (i = self.t - 1; i >= 0; --i) {\n    r[i + ds + 1] = (self[i] >> cbs) | c\n    c = (self[i] & bm) << bs\n  }\n  for (i = ds - 1; i >= 0; --i) r[i] = 0\n  r[ds] = c\n  r.t = self.t + ds + 1\n  r.s = self.s\n  r.clamp()\n}\n\n// (protected) r = this >> n\nfunction bnpRShiftTo(n, r) {\n  var self = this\n  r.s = self.s\n  var ds = Math.floor(n / self.DB)\n  if (ds >= self.t) {\n    r.t = 0\n    return\n  }\n  var bs = n % self.DB\n  var cbs = self.DB - bs\n  var bm = (1 << bs) - 1\n  r[0] = self[ds] >> bs\n  for (var i = ds + 1; i < self.t; ++i) {\n    r[i - ds - 1] |= (self[i] & bm) << cbs\n    r[i - ds] = self[i] >> bs\n  }\n  if (bs > 0) r[self.t - ds - 1] |= (self.s & bm) << cbs\n  r.t = self.t - ds\n  r.clamp()\n}\n\n// (protected) r = this - a\nfunction bnpSubTo(a, r) {\n  var self = this\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, self.t)\n  while (i < m) {\n    c += self[i] - a[i]\n    r[i++] = c & self.DM\n    c >>= self.DB\n  }\n  if (a.t < self.t) {\n    c -= a.s\n    while (i < self.t) {\n      c += self[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c += self.s\n  } else {\n    c += self.s\n    while (i < a.t) {\n      c -= a[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c -= a.s\n  }\n  r.s = (c < 0) ? -1 : 0\n  if (c < -1) r[i++] = self.DV + c\n  else if (c > 0) r[i++] = c\n  r.t = i\n  r.clamp()\n}\n\n// (protected) r = this * a, r != this,a (HAC 14.12)\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyTo(a, r) {\n  var x = this.abs(),\n    y = a.abs()\n  var i = x.t\n  r.t = i + y.t\n  while (--i >= 0) r[i] = 0\n  for (i = 0; i < y.t; ++i) r[i + x.t] = x.am(0, y[i], r, i, 0, x.t)\n  r.s = 0\n  r.clamp()\n  if (this.s != a.s) BigInteger.ZERO.subTo(r, r)\n}\n\n// (protected) r = this^2, r != this (HAC 14.16)\nfunction bnpSquareTo(r) {\n  var x = this.abs()\n  var i = r.t = 2 * x.t\n  while (--i >= 0) r[i] = 0\n  for (i = 0; i < x.t - 1; ++i) {\n    var c = x.am(i, x[i], r, 2 * i, 0, 1)\n    if ((r[i + x.t] += x.am(i + 1, 2 * x[i], r, 2 * i + 1, c, x.t - i - 1)) >= x.DV) {\n      r[i + x.t] -= x.DV\n      r[i + x.t + 1] = 1\n    }\n  }\n  if (r.t > 0) r[r.t - 1] += x.am(i, x[i], r, 2 * i, 0, 1)\n  r.s = 0\n  r.clamp()\n}\n\n// (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)\n// r != q, this != m.  q or r may be null.\nfunction bnpDivRemTo(m, q, r) {\n  var self = this\n  var pm = m.abs()\n  if (pm.t <= 0) return\n  var pt = self.abs()\n  if (pt.t < pm.t) {\n    if (q != null) q.fromInt(0)\n    if (r != null) self.copyTo(r)\n    return\n  }\n  if (r == null) r = new BigInteger()\n  var y = new BigInteger(),\n    ts = self.s,\n    ms = m.s\n  var nsh = self.DB - nbits(pm[pm.t - 1]); // normalize modulus\n  if (nsh > 0) {\n    pm.lShiftTo(nsh, y)\n    pt.lShiftTo(nsh, r)\n  } else {\n    pm.copyTo(y)\n    pt.copyTo(r)\n  }\n  var ys = y.t\n  var y0 = y[ys - 1]\n  if (y0 == 0) return\n  var yt = y0 * (1 << self.F1) + ((ys > 1) ? y[ys - 2] >> self.F2 : 0)\n  var d1 = self.FV / yt,\n    d2 = (1 << self.F1) / yt,\n    e = 1 << self.F2\n  var i = r.t,\n    j = i - ys,\n    t = (q == null) ? new BigInteger() : q\n  y.dlShiftTo(j, t)\n  if (r.compareTo(t) >= 0) {\n    r[r.t++] = 1\n    r.subTo(t, r)\n  }\n  BigInteger.ONE.dlShiftTo(ys, t)\n  t.subTo(y, y); // \"negative\" y so we can replace sub with am later\n  while (y.t < ys) y[y.t++] = 0\n  while (--j >= 0) {\n    // Estimate quotient digit\n    var qd = (r[--i] == y0) ? self.DM : Math.floor(r[i] * d1 + (r[i - 1] + e) * d2)\n    if ((r[i] += y.am(0, qd, r, j, 0, ys)) < qd) { // Try it out\n      y.dlShiftTo(j, t)\n      r.subTo(t, r)\n      while (r[i] < --qd) r.subTo(t, r)\n    }\n  }\n  if (q != null) {\n    r.drShiftTo(ys, q)\n    if (ts != ms) BigInteger.ZERO.subTo(q, q)\n  }\n  r.t = ys\n  r.clamp()\n  if (nsh > 0) r.rShiftTo(nsh, r); // Denormalize remainder\n  if (ts < 0) BigInteger.ZERO.subTo(r, r)\n}\n\n// (public) this mod a\nfunction bnMod(a) {\n  var r = new BigInteger()\n  this.abs()\n    .divRemTo(a, null, r)\n  if (this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r, r)\n  return r\n}\n\n// Modular reduction using \"classic\" algorithm\nfunction Classic(m) {\n  this.m = m\n}\n\nfunction cConvert(x) {\n  if (x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m)\n  else return x\n}\n\nfunction cRevert(x) {\n  return x\n}\n\nfunction cReduce(x) {\n  x.divRemTo(this.m, null, x)\n}\n\nfunction cMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n  this.reduce(r)\n}\n\nfunction cSqrTo(x, r) {\n  x.squareTo(r)\n  this.reduce(r)\n}\n\nClassic.prototype.convert = cConvert\nClassic.prototype.revert = cRevert\nClassic.prototype.reduce = cReduce\nClassic.prototype.mulTo = cMulTo\nClassic.prototype.sqrTo = cSqrTo\n\n// (protected) return \"-1/this % 2^DB\"; useful for Mont. reduction\n// justification:\n//         xy == 1 (mod m)\n//         xy =  1+km\n//   xy(2-xy) = (1+km)(1-km)\n// x[y(2-xy)] = 1-k^2m^2\n// x[y(2-xy)] == 1 (mod m^2)\n// if y is 1/x mod m, then y(2-xy) is 1/x mod m^2\n// should reduce x and y(2-xy) by m^2 at each step to keep size bounded.\n// JS multiply \"overflows\" differently from C/C++, so care is needed here.\nfunction bnpInvDigit() {\n  if (this.t < 1) return 0\n  var x = this[0]\n  if ((x & 1) == 0) return 0\n  var y = x & 3; // y == 1/x mod 2^2\n  y = (y * (2 - (x & 0xf) * y)) & 0xf; // y == 1/x mod 2^4\n  y = (y * (2 - (x & 0xff) * y)) & 0xff; // y == 1/x mod 2^8\n  y = (y * (2 - (((x & 0xffff) * y) & 0xffff))) & 0xffff; // y == 1/x mod 2^16\n  // last step - calculate inverse mod DV directly\n  // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints\n  y = (y * (2 - x * y % this.DV)) % this.DV; // y == 1/x mod 2^dbits\n  // we really want the negative inverse, and -DV < y < DV\n  return (y > 0) ? this.DV - y : -y\n}\n\n// Montgomery reduction\nfunction Montgomery(m) {\n  this.m = m\n  this.mp = m.invDigit()\n  this.mpl = this.mp & 0x7fff\n  this.mph = this.mp >> 15\n  this.um = (1 << (m.DB - 15)) - 1\n  this.mt2 = 2 * m.t\n}\n\n// xR mod m\nfunction montConvert(x) {\n  var r = new BigInteger()\n  x.abs()\n    .dlShiftTo(this.m.t, r)\n  r.divRemTo(this.m, null, r)\n  if (x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r, r)\n  return r\n}\n\n// x/R mod m\nfunction montRevert(x) {\n  var r = new BigInteger()\n  x.copyTo(r)\n  this.reduce(r)\n  return r\n}\n\n// x = x/R mod m (HAC 14.32)\nfunction montReduce(x) {\n  while (x.t <= this.mt2) // pad x so am has enough room later\n    x[x.t++] = 0\n  for (var i = 0; i < this.m.t; ++i) {\n    // faster way of calculating u0 = x[i]*mp mod DV\n    var j = x[i] & 0x7fff\n    var u0 = (j * this.mpl + (((j * this.mph + (x[i] >> 15) * this.mpl) & this.um) << 15)) & x.DM\n    // use am to combine the multiply-shift-add into one call\n    j = i + this.m.t\n    x[j] += this.m.am(0, u0, x, i, 0, this.m.t)\n    // propagate carry\n    while (x[j] >= x.DV) {\n      x[j] -= x.DV\n      x[++j]++\n    }\n  }\n  x.clamp()\n  x.drShiftTo(this.m.t, x)\n  if (x.compareTo(this.m) >= 0) x.subTo(this.m, x)\n}\n\n// r = \"x^2/R mod m\"; x != r\nfunction montSqrTo(x, r) {\n  x.squareTo(r)\n  this.reduce(r)\n}\n\n// r = \"xy/R mod m\"; x,y != r\nfunction montMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n  this.reduce(r)\n}\n\nMontgomery.prototype.convert = montConvert\nMontgomery.prototype.revert = montRevert\nMontgomery.prototype.reduce = montReduce\nMontgomery.prototype.mulTo = montMulTo\nMontgomery.prototype.sqrTo = montSqrTo\n\n// (protected) true iff this is even\nfunction bnpIsEven() {\n  return ((this.t > 0) ? (this[0] & 1) : this.s) == 0\n}\n\n// (protected) this^e, e < 2^32, doing sqr and mul with \"r\" (HAC 14.79)\nfunction bnpExp(e, z) {\n  if (e > 0xffffffff || e < 1) return BigInteger.ONE\n  var r = new BigInteger(),\n    r2 = new BigInteger(),\n    g = z.convert(this),\n    i = nbits(e) - 1\n  g.copyTo(r)\n  while (--i >= 0) {\n    z.sqrTo(r, r2)\n    if ((e & (1 << i)) > 0) z.mulTo(r2, g, r)\n    else {\n      var t = r\n      r = r2\n      r2 = t\n    }\n  }\n  return z.revert(r)\n}\n\n// (public) this^e % m, 0 <= e < 2^32\nfunction bnModPowInt(e, m) {\n  var z\n  if (e < 256 || m.isEven()) z = new Classic(m)\n  else z = new Montgomery(m)\n  return this.exp(e, z)\n}\n\n// protected\nproto.copyTo = bnpCopyTo\nproto.fromInt = bnpFromInt\nproto.fromString = bnpFromString\nproto.clamp = bnpClamp\nproto.dlShiftTo = bnpDLShiftTo\nproto.drShiftTo = bnpDRShiftTo\nproto.lShiftTo = bnpLShiftTo\nproto.rShiftTo = bnpRShiftTo\nproto.subTo = bnpSubTo\nproto.multiplyTo = bnpMultiplyTo\nproto.squareTo = bnpSquareTo\nproto.divRemTo = bnpDivRemTo\nproto.invDigit = bnpInvDigit\nproto.isEven = bnpIsEven\nproto.exp = bnpExp\n\n// public\nproto.toString = bnToString\nproto.negate = bnNegate\nproto.abs = bnAbs\nproto.compareTo = bnCompareTo\nproto.bitLength = bnBitLength\nproto.byteLength = bnByteLength\nproto.mod = bnMod\nproto.modPowInt = bnModPowInt\n\n// (public)\nfunction bnClone() {\n  var r = new BigInteger()\n  this.copyTo(r)\n  return r\n}\n\n// (public) return value as integer\nfunction bnIntValue() {\n  if (this.s < 0) {\n    if (this.t == 1) return this[0] - this.DV\n    else if (this.t == 0) return -1\n  } else if (this.t == 1) return this[0]\n  else if (this.t == 0) return 0\n  // assumes 16 < DB < 32\n  return ((this[1] & ((1 << (32 - this.DB)) - 1)) << this.DB) | this[0]\n}\n\n// (public) return value as byte\nfunction bnByteValue() {\n  return (this.t == 0) ? this.s : (this[0] << 24) >> 24\n}\n\n// (public) return value as short (assumes DB>=16)\nfunction bnShortValue() {\n  return (this.t == 0) ? this.s : (this[0] << 16) >> 16\n}\n\n// (protected) return x s.t. r^x < DV\nfunction bnpChunkSize(r) {\n  return Math.floor(Math.LN2 * this.DB / Math.log(r))\n}\n\n// (public) 0 if this == 0, 1 if this > 0\nfunction bnSigNum() {\n  if (this.s < 0) return -1\n  else if (this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0\n  else return 1\n}\n\n// (protected) convert to radix string\nfunction bnpToRadix(b) {\n  if (b == null) b = 10\n  if (this.signum() == 0 || b < 2 || b > 36) return \"0\"\n  var cs = this.chunkSize(b)\n  var a = Math.pow(b, cs)\n  var d = nbv(a),\n    y = new BigInteger(),\n    z = new BigInteger(),\n    r = \"\"\n  this.divRemTo(d, y, z)\n  while (y.signum() > 0) {\n    r = (a + z.intValue())\n      .toString(b)\n      .substr(1) + r\n    y.divRemTo(d, y, z)\n  }\n  return z.intValue()\n    .toString(b) + r\n}\n\n// (protected) convert from radix string\nfunction bnpFromRadix(s, b) {\n  var self = this\n  self.fromInt(0)\n  if (b == null) b = 10\n  var cs = self.chunkSize(b)\n  var d = Math.pow(b, cs),\n    mi = false,\n    j = 0,\n    w = 0\n  for (var i = 0; i < s.length; ++i) {\n    var x = intAt(s, i)\n    if (x < 0) {\n      if (s.charAt(i) == \"-\" && self.signum() == 0) mi = true\n      continue\n    }\n    w = b * w + x\n    if (++j >= cs) {\n      self.dMultiply(d)\n      self.dAddOffset(w, 0)\n      j = 0\n      w = 0\n    }\n  }\n  if (j > 0) {\n    self.dMultiply(Math.pow(b, j))\n    self.dAddOffset(w, 0)\n  }\n  if (mi) BigInteger.ZERO.subTo(self, self)\n}\n\n// (protected) alternate constructor\nfunction bnpFromNumber(a, b, c) {\n  var self = this\n  if (\"number\" == typeof b) {\n    // new BigInteger(int,int,RNG)\n    if (a < 2) self.fromInt(1)\n    else {\n      self.fromNumber(a, c)\n      if (!self.testBit(a - 1)) // force MSB set\n        self.bitwiseTo(BigInteger.ONE.shiftLeft(a - 1), op_or, self)\n      if (self.isEven()) self.dAddOffset(1, 0); // force odd\n      while (!self.isProbablePrime(b)) {\n        self.dAddOffset(2, 0)\n        if (self.bitLength() > a) self.subTo(BigInteger.ONE.shiftLeft(a - 1), self)\n      }\n    }\n  } else {\n    // new BigInteger(int,RNG)\n    var x = new Array(),\n      t = a & 7\n    x.length = (a >> 3) + 1\n    b.nextBytes(x)\n    if (t > 0) x[0] &= ((1 << t) - 1)\n    else x[0] = 0\n    self.fromString(x, 256)\n  }\n}\n\n// (public) convert to bigendian byte array\nfunction bnToByteArray() {\n  var self = this\n  var i = self.t,\n    r = new Array()\n  r[0] = self.s\n  var p = self.DB - (i * self.DB) % 8,\n    d, k = 0\n  if (i-- > 0) {\n    if (p < self.DB && (d = self[i] >> p) != (self.s & self.DM) >> p)\n      r[k++] = d | (self.s << (self.DB - p))\n    while (i >= 0) {\n      if (p < 8) {\n        d = (self[i] & ((1 << p) - 1)) << (8 - p)\n        d |= self[--i] >> (p += self.DB - 8)\n      } else {\n        d = (self[i] >> (p -= 8)) & 0xff\n        if (p <= 0) {\n          p += self.DB\n          --i\n        }\n      }\n      if ((d & 0x80) != 0) d |= -256\n      if (k === 0 && (self.s & 0x80) != (d & 0x80))++k\n      if (k > 0 || d != self.s) r[k++] = d\n    }\n  }\n  return r\n}\n\nfunction bnEquals(a) {\n  return (this.compareTo(a) == 0)\n}\n\nfunction bnMin(a) {\n  return (this.compareTo(a) < 0) ? this : a\n}\n\nfunction bnMax(a) {\n  return (this.compareTo(a) > 0) ? this : a\n}\n\n// (protected) r = this op a (bitwise)\nfunction bnpBitwiseTo(a, op, r) {\n  var self = this\n  var i, f, m = Math.min(a.t, self.t)\n  for (i = 0; i < m; ++i) r[i] = op(self[i], a[i])\n  if (a.t < self.t) {\n    f = a.s & self.DM\n    for (i = m; i < self.t; ++i) r[i] = op(self[i], f)\n    r.t = self.t\n  } else {\n    f = self.s & self.DM\n    for (i = m; i < a.t; ++i) r[i] = op(f, a[i])\n    r.t = a.t\n  }\n  r.s = op(self.s, a.s)\n  r.clamp()\n}\n\n// (public) this & a\nfunction op_and(x, y) {\n  return x & y\n}\n\nfunction bnAnd(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_and, r)\n  return r\n}\n\n// (public) this | a\nfunction op_or(x, y) {\n  return x | y\n}\n\nfunction bnOr(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_or, r)\n  return r\n}\n\n// (public) this ^ a\nfunction op_xor(x, y) {\n  return x ^ y\n}\n\nfunction bnXor(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_xor, r)\n  return r\n}\n\n// (public) this & ~a\nfunction op_andnot(x, y) {\n  return x & ~y\n}\n\nfunction bnAndNot(a) {\n  var r = new BigInteger()\n  this.bitwiseTo(a, op_andnot, r)\n  return r\n}\n\n// (public) ~this\nfunction bnNot() {\n  var r = new BigInteger()\n  for (var i = 0; i < this.t; ++i) r[i] = this.DM & ~this[i]\n  r.t = this.t\n  r.s = ~this.s\n  return r\n}\n\n// (public) this << n\nfunction bnShiftLeft(n) {\n  var r = new BigInteger()\n  if (n < 0) this.rShiftTo(-n, r)\n  else this.lShiftTo(n, r)\n  return r\n}\n\n// (public) this >> n\nfunction bnShiftRight(n) {\n  var r = new BigInteger()\n  if (n < 0) this.lShiftTo(-n, r)\n  else this.rShiftTo(n, r)\n  return r\n}\n\n// return index of lowest 1-bit in x, x < 2^31\nfunction lbit(x) {\n  if (x == 0) return -1\n  var r = 0\n  if ((x & 0xffff) == 0) {\n    x >>= 16\n    r += 16\n  }\n  if ((x & 0xff) == 0) {\n    x >>= 8\n    r += 8\n  }\n  if ((x & 0xf) == 0) {\n    x >>= 4\n    r += 4\n  }\n  if ((x & 3) == 0) {\n    x >>= 2\n    r += 2\n  }\n  if ((x & 1) == 0)++r\n  return r\n}\n\n// (public) returns index of lowest 1-bit (or -1 if none)\nfunction bnGetLowestSetBit() {\n  for (var i = 0; i < this.t; ++i)\n    if (this[i] != 0) return i * this.DB + lbit(this[i])\n  if (this.s < 0) return this.t * this.DB\n  return -1\n}\n\n// return number of 1 bits in x\nfunction cbit(x) {\n  var r = 0\n  while (x != 0) {\n    x &= x - 1\n    ++r\n  }\n  return r\n}\n\n// (public) return number of set bits\nfunction bnBitCount() {\n  var r = 0,\n    x = this.s & this.DM\n  for (var i = 0; i < this.t; ++i) r += cbit(this[i] ^ x)\n  return r\n}\n\n// (public) true iff nth bit is set\nfunction bnTestBit(n) {\n  var j = Math.floor(n / this.DB)\n  if (j >= this.t) return (this.s != 0)\n  return ((this[j] & (1 << (n % this.DB))) != 0)\n}\n\n// (protected) this op (1<<n)\nfunction bnpChangeBit(n, op) {\n  var r = BigInteger.ONE.shiftLeft(n)\n  this.bitwiseTo(r, op, r)\n  return r\n}\n\n// (public) this | (1<<n)\nfunction bnSetBit(n) {\n  return this.changeBit(n, op_or)\n}\n\n// (public) this & ~(1<<n)\nfunction bnClearBit(n) {\n  return this.changeBit(n, op_andnot)\n}\n\n// (public) this ^ (1<<n)\nfunction bnFlipBit(n) {\n  return this.changeBit(n, op_xor)\n}\n\n// (protected) r = this + a\nfunction bnpAddTo(a, r) {\n  var self = this\n\n  var i = 0,\n    c = 0,\n    m = Math.min(a.t, self.t)\n  while (i < m) {\n    c += self[i] + a[i]\n    r[i++] = c & self.DM\n    c >>= self.DB\n  }\n  if (a.t < self.t) {\n    c += a.s\n    while (i < self.t) {\n      c += self[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c += self.s\n  } else {\n    c += self.s\n    while (i < a.t) {\n      c += a[i]\n      r[i++] = c & self.DM\n      c >>= self.DB\n    }\n    c += a.s\n  }\n  r.s = (c < 0) ? -1 : 0\n  if (c > 0) r[i++] = c\n  else if (c < -1) r[i++] = self.DV + c\n  r.t = i\n  r.clamp()\n}\n\n// (public) this + a\nfunction bnAdd(a) {\n  var r = new BigInteger()\n  this.addTo(a, r)\n  return r\n}\n\n// (public) this - a\nfunction bnSubtract(a) {\n  var r = new BigInteger()\n  this.subTo(a, r)\n  return r\n}\n\n// (public) this * a\nfunction bnMultiply(a) {\n  var r = new BigInteger()\n  this.multiplyTo(a, r)\n  return r\n}\n\n// (public) this^2\nfunction bnSquare() {\n  var r = new BigInteger()\n  this.squareTo(r)\n  return r\n}\n\n// (public) this / a\nfunction bnDivide(a) {\n  var r = new BigInteger()\n  this.divRemTo(a, r, null)\n  return r\n}\n\n// (public) this % a\nfunction bnRemainder(a) {\n  var r = new BigInteger()\n  this.divRemTo(a, null, r)\n  return r\n}\n\n// (public) [this/a,this%a]\nfunction bnDivideAndRemainder(a) {\n  var q = new BigInteger(),\n    r = new BigInteger()\n  this.divRemTo(a, q, r)\n  return new Array(q, r)\n}\n\n// (protected) this *= n, this >= 0, 1 < n < DV\nfunction bnpDMultiply(n) {\n  this[this.t] = this.am(0, n - 1, this, 0, 0, this.t)\n  ++this.t\n  this.clamp()\n}\n\n// (protected) this += n << w words, this >= 0\nfunction bnpDAddOffset(n, w) {\n  if (n == 0) return\n  while (this.t <= w) this[this.t++] = 0\n  this[w] += n\n  while (this[w] >= this.DV) {\n    this[w] -= this.DV\n    if (++w >= this.t) this[this.t++] = 0\n    ++this[w]\n  }\n}\n\n// A \"null\" reducer\nfunction NullExp() {}\n\nfunction nNop(x) {\n  return x\n}\n\nfunction nMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n}\n\nfunction nSqrTo(x, r) {\n  x.squareTo(r)\n}\n\nNullExp.prototype.convert = nNop\nNullExp.prototype.revert = nNop\nNullExp.prototype.mulTo = nMulTo\nNullExp.prototype.sqrTo = nSqrTo\n\n// (public) this^e\nfunction bnPow(e) {\n  return this.exp(e, new NullExp())\n}\n\n// (protected) r = lower n words of \"this * a\", a.t <= n\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyLowerTo(a, n, r) {\n  var i = Math.min(this.t + a.t, n)\n  r.s = 0; // assumes a,this >= 0\n  r.t = i\n  while (i > 0) r[--i] = 0\n  var j\n  for (j = r.t - this.t; i < j; ++i) r[i + this.t] = this.am(0, a[i], r, i, 0, this.t)\n  for (j = Math.min(a.t, n); i < j; ++i) this.am(0, a[i], r, i, 0, n - i)\n  r.clamp()\n}\n\n// (protected) r = \"this * a\" without lower n words, n > 0\n// \"this\" should be the larger one if appropriate.\nfunction bnpMultiplyUpperTo(a, n, r) {\n  --n\n  var i = r.t = this.t + a.t - n\n  r.s = 0; // assumes a,this >= 0\n  while (--i >= 0) r[i] = 0\n  for (i = Math.max(n - this.t, 0); i < a.t; ++i)\n    r[this.t + i - n] = this.am(n - i, a[i], r, 0, 0, this.t + i - n)\n  r.clamp()\n  r.drShiftTo(1, r)\n}\n\n// Barrett modular reduction\nfunction Barrett(m) {\n  // setup Barrett\n  this.r2 = new BigInteger()\n  this.q3 = new BigInteger()\n  BigInteger.ONE.dlShiftTo(2 * m.t, this.r2)\n  this.mu = this.r2.divide(m)\n  this.m = m\n}\n\nfunction barrettConvert(x) {\n  if (x.s < 0 || x.t > 2 * this.m.t) return x.mod(this.m)\n  else if (x.compareTo(this.m) < 0) return x\n  else {\n    var r = new BigInteger()\n    x.copyTo(r)\n    this.reduce(r)\n    return r\n  }\n}\n\nfunction barrettRevert(x) {\n  return x\n}\n\n// x = x mod m (HAC 14.42)\nfunction barrettReduce(x) {\n  var self = this\n  x.drShiftTo(self.m.t - 1, self.r2)\n  if (x.t > self.m.t + 1) {\n    x.t = self.m.t + 1\n    x.clamp()\n  }\n  self.mu.multiplyUpperTo(self.r2, self.m.t + 1, self.q3)\n  self.m.multiplyLowerTo(self.q3, self.m.t + 1, self.r2)\n  while (x.compareTo(self.r2) < 0) x.dAddOffset(1, self.m.t + 1)\n  x.subTo(self.r2, x)\n  while (x.compareTo(self.m) >= 0) x.subTo(self.m, x)\n}\n\n// r = x^2 mod m; x != r\nfunction barrettSqrTo(x, r) {\n  x.squareTo(r)\n  this.reduce(r)\n}\n\n// r = x*y mod m; x,y != r\nfunction barrettMulTo(x, y, r) {\n  x.multiplyTo(y, r)\n  this.reduce(r)\n}\n\nBarrett.prototype.convert = barrettConvert\nBarrett.prototype.revert = barrettRevert\nBarrett.prototype.reduce = barrettReduce\nBarrett.prototype.mulTo = barrettMulTo\nBarrett.prototype.sqrTo = barrettSqrTo\n\n// (public) this^e % m (HAC 14.85)\nfunction bnModPow(e, m) {\n  var i = e.bitLength(),\n    k, r = nbv(1),\n    z\n  if (i <= 0) return r\n  else if (i < 18) k = 1\n  else if (i < 48) k = 3\n  else if (i < 144) k = 4\n  else if (i < 768) k = 5\n  else k = 6\n  if (i < 8)\n    z = new Classic(m)\n  else if (m.isEven())\n    z = new Barrett(m)\n  else\n    z = new Montgomery(m)\n\n  // precomputation\n  var g = new Array(),\n    n = 3,\n    k1 = k - 1,\n    km = (1 << k) - 1\n  g[1] = z.convert(this)\n  if (k > 1) {\n    var g2 = new BigInteger()\n    z.sqrTo(g[1], g2)\n    while (n <= km) {\n      g[n] = new BigInteger()\n      z.mulTo(g2, g[n - 2], g[n])\n      n += 2\n    }\n  }\n\n  var j = e.t - 1,\n    w, is1 = true,\n    r2 = new BigInteger(),\n    t\n  i = nbits(e[j]) - 1\n  while (j >= 0) {\n    if (i >= k1) w = (e[j] >> (i - k1)) & km\n    else {\n      w = (e[j] & ((1 << (i + 1)) - 1)) << (k1 - i)\n      if (j > 0) w |= e[j - 1] >> (this.DB + i - k1)\n    }\n\n    n = k\n    while ((w & 1) == 0) {\n      w >>= 1\n      --n\n    }\n    if ((i -= n) < 0) {\n      i += this.DB\n      --j\n    }\n    if (is1) { // ret == 1, don't bother squaring or multiplying it\n      g[w].copyTo(r)\n      is1 = false\n    } else {\n      while (n > 1) {\n        z.sqrTo(r, r2)\n        z.sqrTo(r2, r)\n        n -= 2\n      }\n      if (n > 0) z.sqrTo(r, r2)\n      else {\n        t = r\n        r = r2\n        r2 = t\n      }\n      z.mulTo(r2, g[w], r)\n    }\n\n    while (j >= 0 && (e[j] & (1 << i)) == 0) {\n      z.sqrTo(r, r2)\n      t = r\n      r = r2\n      r2 = t\n      if (--i < 0) {\n        i = this.DB - 1\n        --j\n      }\n    }\n  }\n  return z.revert(r)\n}\n\n// (public) gcd(this,a) (HAC 14.54)\nfunction bnGCD(a) {\n  var x = (this.s < 0) ? this.negate() : this.clone()\n  var y = (a.s < 0) ? a.negate() : a.clone()\n  if (x.compareTo(y) < 0) {\n    var t = x\n    x = y\n    y = t\n  }\n  var i = x.getLowestSetBit(),\n    g = y.getLowestSetBit()\n  if (g < 0) return x\n  if (i < g) g = i\n  if (g > 0) {\n    x.rShiftTo(g, x)\n    y.rShiftTo(g, y)\n  }\n  while (x.signum() > 0) {\n    if ((i = x.getLowestSetBit()) > 0) x.rShiftTo(i, x)\n    if ((i = y.getLowestSetBit()) > 0) y.rShiftTo(i, y)\n    if (x.compareTo(y) >= 0) {\n      x.subTo(y, x)\n      x.rShiftTo(1, x)\n    } else {\n      y.subTo(x, y)\n      y.rShiftTo(1, y)\n    }\n  }\n  if (g > 0) y.lShiftTo(g, y)\n  return y\n}\n\n// (protected) this % n, n < 2^26\nfunction bnpModInt(n) {\n  if (n <= 0) return 0\n  var d = this.DV % n,\n    r = (this.s < 0) ? n - 1 : 0\n  if (this.t > 0)\n    if (d == 0) r = this[0] % n\n    else\n      for (var i = this.t - 1; i >= 0; --i) r = (d * r + this[i]) % n\n  return r\n}\n\n// (public) 1/this % m (HAC 14.61)\nfunction bnModInverse(m) {\n  var ac = m.isEven()\n  if (this.signum() === 0) throw new Error('division by zero')\n  if ((this.isEven() && ac) || m.signum() == 0) return BigInteger.ZERO\n  var u = m.clone(),\n    v = this.clone()\n  var a = nbv(1),\n    b = nbv(0),\n    c = nbv(0),\n    d = nbv(1)\n  while (u.signum() != 0) {\n    while (u.isEven()) {\n      u.rShiftTo(1, u)\n      if (ac) {\n        if (!a.isEven() || !b.isEven()) {\n          a.addTo(this, a)\n          b.subTo(m, b)\n        }\n        a.rShiftTo(1, a)\n      } else if (!b.isEven()) b.subTo(m, b)\n      b.rShiftTo(1, b)\n    }\n    while (v.isEven()) {\n      v.rShiftTo(1, v)\n      if (ac) {\n        if (!c.isEven() || !d.isEven()) {\n          c.addTo(this, c)\n          d.subTo(m, d)\n        }\n        c.rShiftTo(1, c)\n      } else if (!d.isEven()) d.subTo(m, d)\n      d.rShiftTo(1, d)\n    }\n    if (u.compareTo(v) >= 0) {\n      u.subTo(v, u)\n      if (ac) a.subTo(c, a)\n      b.subTo(d, b)\n    } else {\n      v.subTo(u, v)\n      if (ac) c.subTo(a, c)\n      d.subTo(b, d)\n    }\n  }\n  if (v.compareTo(BigInteger.ONE) != 0) return BigInteger.ZERO\n  while (d.compareTo(m) >= 0) d.subTo(m, d)\n  while (d.signum() < 0) d.addTo(m, d)\n  return d\n}\n\nvar lowprimes = [\n  2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\n  73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151,\n  157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233,\n  239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317,\n  331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419,\n  421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503,\n  509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607,\n  613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\n  709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811,\n  821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911,\n  919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997\n]\n\nvar lplim = (1 << 26) / lowprimes[lowprimes.length - 1]\n\n// (public) test primality with certainty >= 1-.5^t\nfunction bnIsProbablePrime(t) {\n  var i, x = this.abs()\n  if (x.t == 1 && x[0] <= lowprimes[lowprimes.length - 1]) {\n    for (i = 0; i < lowprimes.length; ++i)\n      if (x[0] == lowprimes[i]) return true\n    return false\n  }\n  if (x.isEven()) return false\n  i = 1\n  while (i < lowprimes.length) {\n    var m = lowprimes[i],\n      j = i + 1\n    while (j < lowprimes.length && m < lplim) m *= lowprimes[j++]\n    m = x.modInt(m)\n    while (i < j) if (m % lowprimes[i++] == 0) return false\n  }\n  return x.millerRabin(t)\n}\n\n// (protected) true if probably prime (HAC 4.24, Miller-Rabin)\nfunction bnpMillerRabin(t) {\n  var n1 = this.subtract(BigInteger.ONE)\n  var k = n1.getLowestSetBit()\n  if (k <= 0) return false\n  var r = n1.shiftRight(k)\n  t = (t + 1) >> 1\n  if (t > lowprimes.length) t = lowprimes.length\n  var a = new BigInteger(null)\n  var j, bases = []\n  for (var i = 0; i < t; ++i) {\n    for (;;) {\n      j = lowprimes[Math.floor(Math.random() * lowprimes.length)]\n      if (bases.indexOf(j) == -1) break\n    }\n    bases.push(j)\n    a.fromInt(j)\n    var y = a.modPow(r, this)\n    if (y.compareTo(BigInteger.ONE) != 0 && y.compareTo(n1) != 0) {\n      var j = 1\n      while (j++ < k && y.compareTo(n1) != 0) {\n        y = y.modPowInt(2, this)\n        if (y.compareTo(BigInteger.ONE) == 0) return false\n      }\n      if (y.compareTo(n1) != 0) return false\n    }\n  }\n  return true\n}\n\n// protected\nproto.chunkSize = bnpChunkSize\nproto.toRadix = bnpToRadix\nproto.fromRadix = bnpFromRadix\nproto.fromNumber = bnpFromNumber\nproto.bitwiseTo = bnpBitwiseTo\nproto.changeBit = bnpChangeBit\nproto.addTo = bnpAddTo\nproto.dMultiply = bnpDMultiply\nproto.dAddOffset = bnpDAddOffset\nproto.multiplyLowerTo = bnpMultiplyLowerTo\nproto.multiplyUpperTo = bnpMultiplyUpperTo\nproto.modInt = bnpModInt\nproto.millerRabin = bnpMillerRabin\n\n// public\nproto.clone = bnClone\nproto.intValue = bnIntValue\nproto.byteValue = bnByteValue\nproto.shortValue = bnShortValue\nproto.signum = bnSigNum\nproto.toByteArray = bnToByteArray\nproto.equals = bnEquals\nproto.min = bnMin\nproto.max = bnMax\nproto.and = bnAnd\nproto.or = bnOr\nproto.xor = bnXor\nproto.andNot = bnAndNot\nproto.not = bnNot\nproto.shiftLeft = bnShiftLeft\nproto.shiftRight = bnShiftRight\nproto.getLowestSetBit = bnGetLowestSetBit\nproto.bitCount = bnBitCount\nproto.testBit = bnTestBit\nproto.setBit = bnSetBit\nproto.clearBit = bnClearBit\nproto.flipBit = bnFlipBit\nproto.add = bnAdd\nproto.subtract = bnSubtract\nproto.multiply = bnMultiply\nproto.divide = bnDivide\nproto.remainder = bnRemainder\nproto.divideAndRemainder = bnDivideAndRemainder\nproto.modPow = bnModPow\nproto.modInverse = bnModInverse\nproto.pow = bnPow\nproto.gcd = bnGCD\nproto.isProbablePrime = bnIsProbablePrime\n\n// JSBN-specific extension\nproto.square = bnSquare\n\n// constants\nBigInteger.ZERO = nbv(0)\nBigInteger.ONE = nbv(1)\nBigInteger.valueOf = nbv\n\nmodule.exports = BigInteger\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","BigInteger","a","b","c","fromNumber","fromString","intAt","s","i","BI_RC","charCodeAt","nbv","r","fromInt","nbits","x","t","Classic","m","Montgomery","mp","invDigit","mpl","mph","um","DB","mt2","op_and","y","op_or","op_xor","op_andnot","NullExp","nNop","Barrett","r2","q3","ONE","dlShiftTo","mu","divide","proto","prototype","__bigi","version","isBigInteger","BigInteger.isBigInteger","obj","check_ver","am","am1","w","j","n","v","Math","floor","dbits","DM","DV","FV","pow","BI_FP","F1","F2","rr","vv","convert","cConvert","compareTo","mod","revert","cRevert","reduce","cReduce","divRemTo","mulTo","cMulTo","multiplyTo","sqrTo","cSqrTo","squareTo","montConvert","abs","ZERO","subTo","montRevert","copyTo","montReduce","u0","clamp","drShiftTo","montMulTo","montSqrTo","bnpCopyTo","bnpFromInt","bnpFromString","k","self","fromRadix","length","mi","sh","charAt","bnpClamp","bnpDLShiftTo","bnpDRShiftTo","max","lShiftTo","bnpLShiftTo","bs","cbs","bm","ds","rShiftTo","bnpRShiftTo","bnpSubTo","min","bnpMultiplyTo","bnpSquareTo","bnpDivRemTo","q","pm","pt","ts","ms","nsh","ys","y0","yt","d1","d2","e","qd","bnpInvDigit","isEven","bnpIsEven","exp","bnpExp","z","g","toString","bnToString","negate","toRadix","km","d","p","BI_RM","bnNegate","bnAbs","bnCompareTo","bitLength","bnBitLength","byteLength","bnByteLength","bnMod","modPowInt","bnModPowInt","nMulTo","nSqrTo","barrettConvert","barrettRevert","barrettReduce","multiplyUpperTo","multiplyLowerTo","dAddOffset","barrettMulTo","barrettSqrTo","lowprimes","lplim","chunkSize","bnpChunkSize","LN2","log","bnpToRadix","signum","cs","intValue","substr","bnpFromRadix","dMultiply","bnpFromNumber","testBit","bitwiseTo","shiftLeft","isProbablePrime","nextBytes","bnpBitwiseTo","op","f","changeBit","bnpChangeBit","addTo","bnpAddTo","bnpDMultiply","bnpDAddOffset","bnpMultiplyLowerTo","bnpMultiplyUpperTo","modInt","bnpModInt","millerRabin","bnpMillerRabin","n1","subtract","getLowestSetBit","shiftRight","bases","random","indexOf","push","modPow","clone","bnClone","bnIntValue","byteValue","bnByteValue","shortValue","bnShortValue","bnSigNum","toByteArray","bnToByteArray","equals","bnEquals","bnMin","bnMax","and","bnAnd","or","bnOr","xor","bnXor","andNot","bnAndNot","not","bnNot","bnShiftLeft","bnShiftRight","bnGetLowestSetBit","bitCount","bnBitCount","bnTestBit","setBit","bnSetBit","clearBit","bnClearBit","flipBit","bnFlipBit","add","bnAdd","bnSubtract","multiply","bnMultiply","bnDivide","remainder","bnRemainder","divideAndRemainder","bnDivideAndRemainder","bnModPow","k1","g2","is1","modInverse","bnModInverse","ac","Error","u","bnPow","gcd","bnGCD","bnIsProbablePrime","square","bnSquare","valueOf"]
}
