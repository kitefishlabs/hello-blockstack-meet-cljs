{
"version":3,
"file":"module$node_modules$validator$lib$isInt.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAGzHC,MAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAAK,QAAA,CAWAC,QAAc,CAACC,GAAD,CAAMC,OAAN,CAAe,CAC3B,CAAC,CAAA,CAAGC,cAAAJ,QAAJ,EAA4BE,GAA5B,CACAC,QAAA,CAAUA,OAAV,EAAqB,EAIrB,KAAIE,MAAQF,OAAAG,eAAA,CAAuB,sBAAvB,CAAA,EAAkD,CAACH,OAAAI,qBAAnD,CAAkFC,GAAlF,CAAwFC,gBAApG,CAGIC,eAAiB,CAACP,OAAAG,eAAA,CAAuB,KAAvB,CAAlBI,EAAmDR,GAAnDQ,EAA0DP,OAAAQ,IAH9D,CAIIC,eAAiB,CAACT,OAAAG,eAAA,CAAuB,KAAvB,CAAlBM,EAAmDV,GAAnDU,EAA0DT,OAAAU,IAJ9D,CAKIC;AAAgB,CAACX,OAAAG,eAAA,CAAuB,IAAvB,CAAjBQ,EAAiDZ,GAAjDY,CAAuDX,OAAAY,GACvDC,QAAAA,CAAgB,CAACb,OAAAG,eAAA,CAAuB,IAAvB,CAAjBU,EAAiDd,GAAjDc,CAAuDb,OAAAc,GAE3D,OAAOZ,MAAAa,KAAA,CAAWhB,GAAX,CAAP,EAA0BQ,cAA1B,EAA4CE,cAA5C,EAA8DE,aAA9D,EAA+EE,OAdpD,CAP7B,KAAIZ,eAE0C,CAJ1Ce,MAI0C,CAJ1B1B,OAAA,CAAQ,qDAAR,CAI0B,GAFF0B,MAESC,WAAP,CAFFD,MAEE,CAA8B,CAAEnB,QAFlCmB,MAEgC,CAF5E,CAIIX,IAAM,8BAJV,CAKIC,iBAAmB,eAkBvBf,OAAAC,QAAA,CAAiBA,OAAA,CAAQ,SAAR,CAjCwG;",
"sources":["node_modules/validator/lib/isInt.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$validator$lib$isInt\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isInt;\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar int = /^(?:[-+]?(?:0|[1-9][0-9]*))$/;\nvar intLeadingZeroes = /^[-+]?[0-9]+$/;\n\nfunction isInt(str, options) {\n  (0, _assertString2.default)(str);\n  options = options || {};\n\n  // Get the regex to use for testing, based on whether\n  // leading zeroes are allowed or not.\n  var regex = options.hasOwnProperty('allow_leading_zeroes') && !options.allow_leading_zeroes ? int : intLeadingZeroes;\n\n  // Check min/max/lt/gt\n  var minCheckPassed = !options.hasOwnProperty('min') || str >= options.min;\n  var maxCheckPassed = !options.hasOwnProperty('max') || str <= options.max;\n  var ltCheckPassed = !options.hasOwnProperty('lt') || str < options.lt;\n  var gtCheckPassed = !options.hasOwnProperty('gt') || str > options.gt;\n\n  return regex.test(str) && minCheckPassed && maxCheckPassed && ltCheckPassed && gtCheckPassed;\n}\nmodule.exports = exports['default'];\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Object","defineProperty","value","default","isInt","str","options","_assertString2","regex","hasOwnProperty","allow_leading_zeroes","int","intLeadingZeroes","minCheckPassed","min","maxCheckPassed","max","ltCheckPassed","lt","gtCheckPassed","gt","test","_assertString","__esModule"]
}
