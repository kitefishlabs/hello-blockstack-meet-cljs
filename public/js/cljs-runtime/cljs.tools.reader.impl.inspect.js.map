{"version":3,"sources":["cljs/tools/reader/impl/inspect.cljs"],"sourcesContent":[";;   Copyright (c) Russ Olsen, Nicola Mometto, Rich Hickey & contributors.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.tools.reader.impl.inspect)\n\n(declare inspect*)\n\n(defn- inspect*-col [truncate col start end]\n  (let [n (count col)\n        l (if truncate 0 (min 10 n))\n        elements (map (partial inspect* true) (take l col))\n        content (apply str (interpose \" \" elements))\n        suffix (if (< l n) \"...\")]\n    (str start content suffix end)))\n\n(defn- dispatch-inspect\n  [_ x]\n  (cond\n   (nil? x) :nil\n   (string? x) :string\n   (keyword? x) :strable\n   (number? x) :strable\n   (symbol? x) :strable\n   (vector? x) :vector\n   (list? x)  :list\n   (map? x) :map\n   (set? x) :set\n   (= x true) :strable\n   (= x false) :strable\n   :default (type x)))\n\n(defmulti inspect* dispatch-inspect)\n\n(defmethod inspect* :string [truncate ^String x]\n  (let [n (if truncate 5 20)\n        suffix (if (> (.-length x) n) \"...\\\"\" \"\\\"\")]\n    (str\n      \\\"\n      (.substring ^String x 0 (min n (.-length x)))\n      suffix)))\n\n(defmethod inspect* :strable [truncate x] (str x))\n\n(defmethod inspect* cljs.core/IndexedSeq [truncate x]\n  \"<indexed seq>\")\n\n(defmethod inspect* cljs.core/PersistentArrayMapSeq [truncate x]\n  \"<map seq>\")\n\n(defmethod inspect* cljs.core/NodeSeq [truncate x]\n  \"<map seq>\")\n\n(defmethod inspect* cljs.core/Cons [truncate x] \"<cons>\")\n\n(defmethod inspect* cljs.core/LazySeq [truncate x] \"<lazy seq>\")\n\n(defmethod inspect* :nil [_ _] \"nil\")\n\n(defmethod inspect* :list [truncate col]\n  (inspect*-col truncate col \\( \\)))\n\n(defmethod inspect* :map [truncate m]\n  (let [len (count m)\n        n-shown (if truncate 0 len)\n        contents (apply concat (take n-shown m))\n        suffix (if (> len n-shown) \"...}\" \\})]\n    (inspect*-col truncate contents \\{ suffix)))\n\n(defmethod inspect* :set [truncate col]\n  (inspect*-col truncate col \"#{\" \\}))\n\n(defmethod inspect* :vector [truncate col]\n  (inspect*-col truncate col \\[ \\]))\n\n(defmethod inspect* :default [truncate x]\n  (pr-str (type x)))\n\n(defn inspect\n  \"Return a string description of the value supplied.\n   May be the a string version of the value itself (e.g. \\\"true\\\")\n   or it may be a description (e.g. \\\"an instance of Foo\\\").\n   If truncate is true then return a very terse version of\n   the inspection.\"\n  ([x] (inspect* false x))\n  ([truncate x] (inspect* truncate x)))\n"],"mappings":"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","names":["cljs.tools.reader.impl.inspect/inspect*-col","cljs.core/count","col","truncate","x__4138__auto__","y__4139__auto__","n","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.tools.reader.impl.inspect/inspect*","cljs.core.take.cljs$core$IFn$_invoke$arity$2","l","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/str","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","elements","start","content","suffix","end","cljs.tools.reader.impl.inspect/dispatch-inspect","x","cljs.core/Keyword","cljs.core/Symbol","cljs.core/vector?","cljs.core/list?","cljs.core/map?","cljs.core/set?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/type","js/cljs","js/cljs.tools","js/cljs.tools.reader","js/cljs.tools.reader.impl","js/cljs.tools.reader.impl.inspect","js/cljs.tools.reader.impl.inspect.inspect*","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$3","fexpr__15241","cljs.core/MultiFn","cljs.core.symbol.cljs$core$IFn$_invoke$arity$2","hierarchy__4528__auto__","method-table__4524__auto__","prefer-table__4525__auto__","method-cache__4526__auto__","cached-hierarchy__4527__auto__","cljs.core/IndexedSeq","cljs.core/PersistentArrayMapSeq","cljs.core/NodeSeq","cljs.core/Cons","cljs.core/LazySeq","m","len","cljs.core/concat","n-shown","contents","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","G__15266","cljs.tools.reader.impl.inspect/inspect","js/Error"]}