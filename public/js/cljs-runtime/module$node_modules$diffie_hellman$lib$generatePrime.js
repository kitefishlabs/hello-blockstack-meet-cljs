shadow$provide.module$node_modules$diffie_hellman$lib$generatePrime=function(global,process,require,module,exports,shadow$shims){function simpleSieve(p){if(null!==primes$jscomp$0)var primes=primes$jscomp$0;else{primes=[2];for(var i=1,k=3;1048576>k;k+=2){for(var sqrt=Math.ceil(Math.sqrt(k)),j=0;j<i&&primes[j]<=sqrt&&0!==k%primes[j];j++);i!==j&&primes[j]<=sqrt||(primes[i++]=k)}primes$jscomp$0=primes}for(i=0;i<primes.length;i++)if(0===p.modn(primes[i]))if(0===p.cmpn(primes[i]))break;else return!1;return!0}
function fermatTest(p){var red=BN.mont(p);return 0===TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1)}function findPrime(bits,gen){if(16>bits)return 2===gen||5===gen?new BN([140,123]):new BN([140,39]);gen=new BN(gen);for(var num,n2;;){for(num=new BN(randomBytes(Math.ceil(bits/8)));num.bitLength()>bits;)num.ishrn(1);num.isEven()&&num.iadd(ONE);num.testn(1)||num.iadd(TWO);if(!gen.cmp(TWO))for(;num.mod(TWENTYFOUR).cmp(ELEVEN);)num.iadd(FOUR);else if(!gen.cmp(FIVE))for(;num.mod(TEN).cmp(THREE);)num.iadd(FOUR);
n2=num.shrn(1);if(simpleSieve(n2)&&simpleSieve(num)&&fermatTest(n2)&&fermatTest(num)&&millerRabin.test(n2)&&millerRabin.test(num))return num}}var randomBytes=require("module$node_modules$randombytes$browser");module.exports=findPrime;findPrime.simpleSieve=simpleSieve;findPrime.fermatTest=fermatTest;var BN=require("module$node_modules$bn_DOT_js$lib$bn"),TWENTYFOUR=new BN(24),millerRabin=new (require("module$node_modules$miller_rabin$lib$mr")),ONE=new BN(1),TWO=new BN(2),FIVE=new BN(5);new BN(16);new BN(8);
var TEN=new BN(10),THREE=new BN(3);new BN(7);var ELEVEN=new BN(11),FOUR=new BN(4);new BN(12);var primes$jscomp$0=null}
//# sourceMappingURL=module$node_modules$diffie_hellman$lib$generatePrime.js.map
