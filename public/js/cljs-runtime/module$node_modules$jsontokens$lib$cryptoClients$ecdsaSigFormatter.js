shadow$provide.module$node_modules$jsontokens$lib$cryptoClients$ecdsaSigFormatter=function(global,process,require,module,exports,shadow$shims){function getParamSize(keySize){return(keySize/8|0)+(0===keySize%8?0:1)}function getParamBytesForAlg(alg){var paramBytes=paramBytesForAlg[alg];if(paramBytes)return paramBytes;throw Error('Unknown algorithm "'+alg+'"');}function signatureAsBuffer(signature){if(shadow$shims.Buffer.isBuffer(signature))return new shadow$shims.Buffer(signature);if("string"===typeof signature)return new shadow$shims.Buffer(signature,
"base64");throw new TypeError("ECDSA signature must be a Base64 string or a Buffer");}function reduceBuffer(buf){for(var padding=0,n=buf.length;padding<n&&0===buf[padding];)++padding;return 128<=buf[padding]&&(--padding,0>padding)?(padding=buf,buf=new shadow$shims.Buffer(1+buf.length),buf[0]=0,padding.copy(buf,1),buf):0===padding?buf:buf=buf.slice(padding)}Object.defineProperty(exports,"__esModule",{value:!0});exports.derToJose=function(signature,alg){signature=signatureAsBuffer(signature);var paramBytes=
getParamBytesForAlg(alg);signature=ECDSASigValue.decode(signature,"der");alg=new shadow$shims.Buffer(signature.r.toString("hex",paramBytes),"hex");signature=new shadow$shims.Buffer(signature.s.toString("hex",paramBytes),"hex");signature=shadow$shims.Buffer.concat([alg,signature],alg.length+signature.length);signature=signature.toString("base64");return signature=signature.replace(/\+/g,"-").replace(/\//g,"_").replace(/=/g,"")};exports.joseToDer=function(signature,alg){signature=signatureAsBuffer(signature);
var paramBytes=getParamBytesForAlg(alg),signatureBytes=signature.length;if(signatureBytes!==2*paramBytes)throw new TypeError('"'+alg+'" signatures must be "'+2*paramBytes+'" bytes, saw "'+signatureBytes+'"');alg=reduceBuffer(signature.slice(0,paramBytes));paramBytes=reduceBuffer(signature.slice(paramBytes));signatureBytes=2+alg.length+1+1+paramBytes.length;var oneByteLength=128>signatureBytes;signature=new shadow$shims.Buffer((oneByteLength?2:3)+signatureBytes);var offset=0;signature[offset++]=seq|
32;oneByteLength?signature[offset++]=signatureBytes:(signature[offset++]=129,signature[offset++]=signatureBytes&255);signature[offset++]=int|0;signature[offset++]=alg.length;alg.copy(signature,offset);offset+=alg.length;signature[offset++]=int|0;signature[offset++]=paramBytes.length;paramBytes.copy(signature,offset);return signature};var ECDSASigValue=require("module$node_modules$asn1_DOT_js$lib$asn1").define("ECDSASigValue",function(){this.seq().obj(this.key("r").int(),this.key("s").int())}),seq=
16,int=2,paramBytesForAlg={ES256:getParamSize(256),ES384:getParamSize(384),ES512:getParamSize(512)}}
//# sourceMappingURL=module$node_modules$jsontokens$lib$cryptoClients$ecdsaSigFormatter.js.map
