{
"version":3,
"file":"module$node_modules$blockstack$lib$operations$utils.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/blockstack/lib/operations/utils.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockstack$lib$operations$utils\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DUST_MINIMUM = undefined;\nexports.hash160 = hash160;\nexports.hash128 = hash128;\nexports.estimateTXBytes = estimateTXBytes;\nexports.sumOutputValues = sumOutputValues;\nexports.decodeB40 = decodeB40;\nexports.addUTXOsToFund = addUTXOsToFund;\nexports.signInputs = signInputs;\n\nvar _bitcoinjsLib = require('bitcoinjs-lib');\n\nvar _bitcoinjsLib2 = _interopRequireDefault(_bitcoinjsLib);\n\nvar _ripemd = require('ripemd160');\n\nvar _ripemd2 = _interopRequireDefault(_ripemd);\n\nvar _bigi = require('bigi');\n\nvar _bigi2 = _interopRequireDefault(_bigi);\n\nvar _errors = require('../errors');\n\nvar _signers = require('./signers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar DUST_MINIMUM = exports.DUST_MINIMUM = 5500;\n\nfunction hash160(buff) {\n  var sha256 = _bitcoinjsLib2.default.crypto.sha256(buff);\n  return new _ripemd2.default().update(sha256).digest();\n}\n\nfunction hash128(buff) {\n  return Buffer.from(_bitcoinjsLib2.default.crypto.sha256(buff).slice(0, 16));\n}\n\n// COPIED FROM coinselect, because 1 byte matters sometimes.\n// baseline estimates, used to improve performance\nvar TX_EMPTY_SIZE = 4 + 1 + 1 + 4;\nvar TX_INPUT_BASE = 32 + 4 + 1 + 4;\nvar TX_INPUT_PUBKEYHASH = 107;\nvar TX_OUTPUT_BASE = 8 + 1;\nvar TX_OUTPUT_PUBKEYHASH = 25;\n\nfunction inputBytes(input) {\n  if (input && input.script && input.script.length > 0) {\n    return TX_INPUT_BASE + input.script.length;\n  } else {\n    return TX_INPUT_BASE + TX_INPUT_PUBKEYHASH;\n  }\n}\n\nfunction outputBytes(output) {\n  if (output && output.script && output.script.length > 0) {\n    return TX_OUTPUT_BASE + output.script.length;\n  } else {\n    return TX_OUTPUT_BASE + TX_OUTPUT_PUBKEYHASH;\n  }\n}\n\nfunction transactionBytes(inputs, outputs) {\n  return TX_EMPTY_SIZE + inputs.reduce(function (a, x) {\n    return a + inputBytes(x);\n  }, 0) + outputs.reduce(function (a, x) {\n    return a + outputBytes(x);\n  }, 0);\n}\n\n//\n\nfunction estimateTXBytes(txIn, additionalInputs, additionalOutputs) {\n  var innerTx = txIn;\n  if (txIn instanceof _bitcoinjsLib2.default.TransactionBuilder) {\n    innerTx = txIn.__tx;\n  }\n  var dummyInputs = new Array(additionalInputs);\n  dummyInputs.fill(null);\n  var dummyOutputs = new Array(additionalOutputs);\n  dummyOutputs.fill(null);\n\n  var inputs = [].concat(innerTx.ins, dummyInputs);\n  var outputs = [].concat(innerTx.outs, dummyOutputs);\n\n  return transactionBytes(inputs, outputs);\n}\n\nfunction sumOutputValues(txIn) {\n  var innerTx = txIn;\n  if (txIn instanceof _bitcoinjsLib2.default.TransactionBuilder) {\n    innerTx = txIn.__tx;\n  }\n\n  return innerTx.outs.reduce(function (agg, x) {\n    return agg + x.value;\n  }, 0);\n}\n\nfunction decodeB40(input) {\n  // treat input as a base40 integer, and output a hex encoding\n  // of that integer.\n  //\n  //   for each digit of the string, find its location in `characters`\n  //    to get the value of the digit, then multiply by 40^(-index in input)\n  // e.g.,\n  // the 'right-most' character has value: (digit-value) * 40^0\n  //  the next character has value: (digit-value) * 40^1\n  //\n  // hence, we reverse the characters first, and use the index\n  //  to compute the value of each digit, then sum\n  var characters = '0123456789abcdefghijklmnopqrstuvwxyz-_.+';\n  var base = _bigi2.default.valueOf(40);\n  var inputDigits = input.split('').reverse();\n  var digitValues = inputDigits.map(function (character, exponent) {\n    return _bigi2.default.valueOf(characters.indexOf(character)).multiply(base.pow(_bigi2.default.valueOf(exponent)));\n  });\n  var sum = digitValues.reduce(function (agg, cur) {\n    return agg.add(cur);\n  }, _bigi2.default.ZERO);\n  return sum.toHex();\n}\n\n/**\n * Adds UTXOs to fund a transaction\n * @param {TransactionBuilder} txBuilderIn - a transaction builder object to add the inputs to. this\n *    object is _always_ mutated. If not enough UTXOs exist to fund, the tx builder object\n *    will still contain as many inputs as could be found.\n * @param {Array<{value: number, tx_hash: string, tx_output_n}>} utxos - the utxo set for the\n *    payer's address.\n * @param {number} amountToFund - the amount of satoshis to fund in the transaction. the payer's\n *    utxos will be included to fund up to this amount of *output* and the corresponding *fees*\n *    for those additional inputs\n * @param {number} feeRate - the satoshis/byte fee rate to use for fee calculation\n * @param {boolean} fundNewFees - if true, this function will fund `amountToFund` and any new fees\n *    associated with including the new inputs.\n *    if false, this function will fund _at most_ `amountToFund`\n * @returns {number} - the amount of leftover change (in satoshis)\n * @private\n */\nfunction addUTXOsToFund(txBuilderIn, utxos, amountToFund, feeRate) {\n  var fundNewFees = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n\n  if (utxos.length === 0) {\n    throw new _errors.NotEnoughFundsError(amountToFund);\n  }\n\n  // how much are we increasing fees by adding an input ?\n  var newFees = feeRate * (estimateTXBytes(txBuilderIn, 1, 0) - estimateTXBytes(txBuilderIn, 0, 0));\n  var utxoThreshhold = amountToFund;\n  if (fundNewFees) {\n    utxoThreshhold += newFees;\n  }\n\n  var goodUtxos = utxos.filter(function (utxo) {\n    return utxo.value >= utxoThreshhold;\n  });\n  if (goodUtxos.length > 0) {\n    goodUtxos.sort(function (a, b) {\n      return a.value - b.value;\n    });\n    var selected = goodUtxos[0];\n    var change = selected.value - amountToFund;\n    if (fundNewFees) {\n      change -= newFees;\n    }\n\n    txBuilderIn.addInput(selected.tx_hash, selected.tx_output_n);\n    return change;\n  } else {\n    utxos.sort(function (a, b) {\n      return b.value - a.value;\n    });\n    var largest = utxos[0];\n\n    if (newFees >= largest.value) {\n      throw new _errors.NotEnoughFundsError(amountToFund);\n    }\n\n    txBuilderIn.addInput(largest.tx_hash, largest.tx_output_n);\n\n    var remainToFund = amountToFund - largest.value;\n    if (fundNewFees) {\n      remainToFund += newFees;\n    }\n\n    return addUTXOsToFund(txBuilderIn, utxos.slice(1), remainToFund, feeRate, fundNewFees);\n  }\n}\n\nfunction signInputs(txB, defaultSigner, otherSigners) {\n  var signerArray = txB.__tx.ins.map(function () {\n    return defaultSigner;\n  });\n  if (otherSigners) {\n    otherSigners.forEach(function (signerPair) {\n      signerArray[signerPair.index] = signerPair.signer;\n    });\n  }\n  var signingPromise = Promise.resolve();\n\n  var _loop = function _loop(i) {\n    signingPromise = signingPromise.then(function () {\n      return signerArray[i].signTransaction(txB, i);\n    });\n  };\n\n  for (var i = 0; i < txB.__tx.ins.length; i++) {\n    _loop(i);\n  }\n  return signingPromise.then(function () {\n    return txB;\n  });\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","_interopRequireDefault","obj","__esModule","default","transactionBytes","inputs","outputs","TX_EMPTY_SIZE","reduce","a","x","script","length","TX_INPUT_BASE","TX_INPUT_PUBKEYHASH","TX_OUTPUT_BASE","TX_OUTPUT_PUBKEYHASH","estimateTXBytes","txIn","additionalInputs","additionalOutputs","innerTx","_bitcoinjsLib2","TransactionBuilder","__tx","dummyInputs","Array","fill","dummyOutputs","concat","ins","outs","addUTXOsToFund","txBuilderIn","utxos","amountToFund","feeRate","fundNewFees","arguments","undefined","_errors","NotEnoughFundsError","newFees","utxoThreshhold","goodUtxos","filter","utxo","value","sort","b","selected","change","addInput","tx_hash","tx_output_n","largest","remainToFund","slice","Object","defineProperty","DUST_MINIMUM","hash160","buff","sha256","crypto","update","_ripemd2","digest","hash128","Buffer","from","sumOutputValues","agg","decodeB40","input","base","_bigi2","valueOf","split","reverse","inputDigits","map","digitValues","character","exponent","characters","indexOf","multiply","pow","sum","cur","add","ZERO","toHex","signInputs","txB","defaultSigner","otherSigners","signerArray","forEach","signerPair","index","signer","signingPromise","Promise","resolve","_loop","i","then","signTransaction","_bitcoinjsLib","_ripemd","_bigi"]
}
