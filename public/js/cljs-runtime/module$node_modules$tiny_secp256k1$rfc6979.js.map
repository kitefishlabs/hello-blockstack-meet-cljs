{
"version":3,
"file":"module$node_modules$tiny_secp256k1$rfc6979.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAC5H,IAAMC,WAAaJ,OAAA,CAAQ,yCAAR,CAAnB,CAEMK,KAAOC,mBAAAC,MAAA,CAAa,CAAb,CAAgB,CAAhB,CAFb,CAGMC,MAAQF,mBAAAC,MAAA,CAAa,CAAb,CAAgB,CAAhB,CAwDdN,OAAAC,QAAA,CArDAO,QAAgC,CAACC,IAAD,CAAOC,CAAP,CAAUC,QAAV,CAAoBC,SAApB,CAA+B,CAI7D,IAAIC,EAAIR,mBAAAC,MAAA,CAAa,EAAb,CAAiB,CAAjB,CAAR,CACIQ,EAAIT,mBAAAC,MAAA,CAAa,EAAb,CAAiB,CAAjB,CAGRO,EAAA,CAAIV,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CACMD,CADN,CAAAC,OAAA,CAEMR,KAFN,CAAAQ,OAAA,CAGML,CAHN,CAAAK,OAAA,CAIMN,IAJN,CAAAO,OAAA,EAQJF,EAAA,CAAIX,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CAA+BD,CAA/B,CAAAE,OAAA,EAGJH;CAAA,CAAIV,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CACMD,CADN,CAAAC,OAAA,CAEMX,IAFN,CAAAW,OAAA,CAGML,CAHN,CAAAK,OAAA,CAIMN,IAJN,CAAAO,OAAA,EAQJF,EAAA,CAAIX,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CAA+BD,CAA/B,CAAAE,OAAA,EASJ,KAHIC,IAGJ,CALAH,CAKA,CALIX,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CAA+BD,CAA/B,CAAAE,OAAA,EAKJ,CAAO,CAACJ,SAAA,CAAUK,IAAV,CAAR,EAAwB,CAACN,QAAA,CAASM,IAAT,CAAzB,CAAA,CACEJ,CAUA,CAVIV,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CACMD,CADN,CAAAC,OAAA,CAEMR,KAFN,CAAAS,OAAA,EAUJ,CALAF,CAKA,CALIX,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CAA+BD,CAA/B,CAAAE,OAAA,EAKJ,CAAAC,IAAA,CADAH,CACA,CADIX,UAAA,CAAW,QAAX,CAAqBU,CAArB,CAAAE,OAAA,CAA+BD,CAA/B,CAAAE,OAAA,EAIN,OAAOC,KAlDsD,CAP6D;",
"sources":["node_modules/tiny-secp256k1/rfc6979.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$tiny_secp256k1$rfc6979\"] = function(global,process,require,module,exports,shadow$shims) {\nconst createHmac = require('create-hmac')\n\nconst ONE1 = Buffer.alloc(1, 1)\nconst ZERO1 = Buffer.alloc(1, 0)\n\n// https://tools.ietf.org/html/rfc6979#section-3.2\nfunction deterministicGenerateK (hash, x, checkSig, isPrivate) {\n  // Step A, ignored as hash already provided\n  // Step B\n  // Step C\n  let k = Buffer.alloc(32, 0)\n  let v = Buffer.alloc(32, 1)\n\n  // Step D\n  k = createHmac('sha256', k)\n    .update(v)\n    .update(ZERO1)\n    .update(x)\n    .update(hash)\n    .digest()\n\n  // Step E\n  v = createHmac('sha256', k).update(v).digest()\n\n  // Step F\n  k = createHmac('sha256', k)\n    .update(v)\n    .update(ONE1)\n    .update(x)\n    .update(hash)\n    .digest()\n\n  // Step G\n  v = createHmac('sha256', k).update(v).digest()\n\n  // Step H1/H2a, ignored as tlen === qlen (256 bit)\n  // Step H2b\n  v = createHmac('sha256', k).update(v).digest()\n\n  let T = v\n\n  // Step H3, repeat until T is within the interval [1, n - 1] and is suitable for ECDSA\n  while (!isPrivate(T) || !checkSig(T)) {\n    k = createHmac('sha256', k)\n      .update(v)\n      .update(ZERO1)\n      .digest()\n\n    v = createHmac('sha256', k).update(v).digest()\n\n    // Step H1/H2a, again, ignored as tlen === qlen (256 bit)\n    // Step H2b again\n    v = createHmac('sha256', k).update(v).digest()\n    T = v\n  }\n\n  return T\n}\n\nmodule.exports = deterministicGenerateK\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","createHmac","ONE1","Buffer","alloc","ZERO1","deterministicGenerateK","hash","x","checkSig","isPrivate","k","v","update","digest","T"]
}
