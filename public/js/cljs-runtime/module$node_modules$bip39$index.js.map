{
"version":3,
"file":"module$node_modules$bip39$index.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/bip39/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bip39$index\"] = function(global,process,require,module,exports,shadow$shims) {\nvar Buffer = require('safe-buffer').Buffer\nvar createHash = require('create-hash')\nvar pbkdf2 = require('pbkdf2').pbkdf2Sync\nvar randomBytes = require('randombytes')\n\n// use unorm until String.prototype.normalize gets better browser support\nvar unorm = require('unorm')\n\nvar CHINESE_SIMPLIFIED_WORDLIST = require('./wordlists/chinese_simplified.json')\nvar CHINESE_TRADITIONAL_WORDLIST = require('./wordlists/chinese_traditional.json')\nvar ENGLISH_WORDLIST = require('./wordlists/english.json')\nvar FRENCH_WORDLIST = require('./wordlists/french.json')\nvar ITALIAN_WORDLIST = require('./wordlists/italian.json')\nvar JAPANESE_WORDLIST = require('./wordlists/japanese.json')\nvar KOREAN_WORDLIST = require('./wordlists/korean.json')\nvar SPANISH_WORDLIST = require('./wordlists/spanish.json')\nvar DEFAULT_WORDLIST = ENGLISH_WORDLIST\n\nvar INVALID_MNEMONIC = 'Invalid mnemonic'\nvar INVALID_ENTROPY = 'Invalid entropy'\nvar INVALID_CHECKSUM = 'Invalid mnemonic checksum'\n\nfunction lpad (str, padString, length) {\n  while (str.length < length) str = padString + str\n  return str\n}\n\nfunction binaryToByte (bin) {\n  return parseInt(bin, 2)\n}\n\nfunction bytesToBinary (bytes) {\n  return bytes.map(function (x) {\n    return lpad(x.toString(2), '0', 8)\n  }).join('')\n}\n\nfunction deriveChecksumBits (entropyBuffer) {\n  var ENT = entropyBuffer.length * 8\n  var CS = ENT / 32\n  var hash = createHash('sha256').update(entropyBuffer).digest()\n\n  return bytesToBinary([].slice.call(hash)).slice(0, CS)\n}\n\nfunction salt (password) {\n  return 'mnemonic' + (password || '')\n}\n\nfunction mnemonicToSeed (mnemonic, password) {\n  var mnemonicBuffer = Buffer.from(unorm.nfkd(mnemonic), 'utf8')\n  var saltBuffer = Buffer.from(salt(unorm.nfkd(password)), 'utf8')\n\n  return pbkdf2(mnemonicBuffer, saltBuffer, 2048, 64, 'sha512')\n}\n\nfunction mnemonicToSeedHex (mnemonic, password) {\n  return mnemonicToSeed(mnemonic, password).toString('hex')\n}\n\nfunction mnemonicToEntropy (mnemonic, wordlist) {\n  wordlist = wordlist || DEFAULT_WORDLIST\n\n  var words = unorm.nfkd(mnemonic).split(' ')\n  if (words.length % 3 !== 0) throw new Error(INVALID_MNEMONIC)\n\n  // convert word indices to 11 bit binary strings\n  var bits = words.map(function (word) {\n    var index = wordlist.indexOf(word)\n    if (index === -1) throw new Error(INVALID_MNEMONIC)\n\n    return lpad(index.toString(2), '0', 11)\n  }).join('')\n\n  // split the binary string into ENT/CS\n  var dividerIndex = Math.floor(bits.length / 33) * 32\n  var entropyBits = bits.slice(0, dividerIndex)\n  var checksumBits = bits.slice(dividerIndex)\n\n  // calculate the checksum and compare\n  var entropyBytes = entropyBits.match(/(.{1,8})/g).map(binaryToByte)\n  if (entropyBytes.length < 16) throw new Error(INVALID_ENTROPY)\n  if (entropyBytes.length > 32) throw new Error(INVALID_ENTROPY)\n  if (entropyBytes.length % 4 !== 0) throw new Error(INVALID_ENTROPY)\n\n  var entropy = Buffer.from(entropyBytes)\n  var newChecksum = deriveChecksumBits(entropy)\n  if (newChecksum !== checksumBits) throw new Error(INVALID_CHECKSUM)\n\n  return entropy.toString('hex')\n}\n\nfunction entropyToMnemonic (entropy, wordlist) {\n  if (!Buffer.isBuffer(entropy)) entropy = Buffer.from(entropy, 'hex')\n  wordlist = wordlist || DEFAULT_WORDLIST\n\n  // 128 <= ENT <= 256\n  if (entropy.length < 16) throw new TypeError(INVALID_ENTROPY)\n  if (entropy.length > 32) throw new TypeError(INVALID_ENTROPY)\n  if (entropy.length % 4 !== 0) throw new TypeError(INVALID_ENTROPY)\n\n  var entropyBits = bytesToBinary([].slice.call(entropy))\n  var checksumBits = deriveChecksumBits(entropy)\n\n  var bits = entropyBits + checksumBits\n  var chunks = bits.match(/(.{1,11})/g)\n  var words = chunks.map(function (binary) {\n    var index = binaryToByte(binary)\n    return wordlist[index]\n  })\n\n  return wordlist === JAPANESE_WORDLIST ? words.join('\\u3000') : words.join(' ')\n}\n\nfunction generateMnemonic (strength, rng, wordlist) {\n  strength = strength || 128\n  if (strength % 32 !== 0) throw new TypeError(INVALID_ENTROPY)\n  rng = rng || randomBytes\n\n  return entropyToMnemonic(rng(strength / 8), wordlist)\n}\n\nfunction validateMnemonic (mnemonic, wordlist) {\n  try {\n    mnemonicToEntropy(mnemonic, wordlist)\n  } catch (e) {\n    return false\n  }\n\n  return true\n}\n\nmodule.exports = {\n  mnemonicToSeed: mnemonicToSeed,\n  mnemonicToSeedHex: mnemonicToSeedHex,\n  mnemonicToEntropy: mnemonicToEntropy,\n  entropyToMnemonic: entropyToMnemonic,\n  generateMnemonic: generateMnemonic,\n  validateMnemonic: validateMnemonic,\n  wordlists: {\n    EN: ENGLISH_WORDLIST,\n    JA: JAPANESE_WORDLIST,\n\n    chinese_simplified: CHINESE_SIMPLIFIED_WORDLIST,\n    chinese_traditional: CHINESE_TRADITIONAL_WORDLIST,\n    english: ENGLISH_WORDLIST,\n    french: FRENCH_WORDLIST,\n    italian: ITALIAN_WORDLIST,\n    japanese: JAPANESE_WORDLIST,\n    korean: KOREAN_WORDLIST,\n    spanish: SPANISH_WORDLIST\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","lpad","str","padString","length","binaryToByte","bin","parseInt","bytesToBinary","bytes","map","x","toString","join","deriveChecksumBits","entropyBuffer","CS","hash","createHash","update","digest","slice","call","salt","password","mnemonicToSeed","mnemonic","mnemonicBuffer","Buffer","from","unorm","nfkd","saltBuffer","pbkdf2","mnemonicToEntropy","wordlist","DEFAULT_WORDLIST","words","split","Error","INVALID_MNEMONIC","bits","word","index","indexOf","dividerIndex","Math","floor","entropyBits","checksumBits","entropyBytes","match","INVALID_ENTROPY","entropy","newChecksum","INVALID_CHECKSUM","entropyToMnemonic","isBuffer","TypeError","chunks","binary","JAPANESE_WORDLIST","pbkdf2Sync","randomBytes","CHINESE_SIMPLIFIED_WORDLIST","CHINESE_TRADITIONAL_WORDLIST","ENGLISH_WORDLIST","FRENCH_WORDLIST","ITALIAN_WORDLIST","KOREAN_WORDLIST","SPANISH_WORDLIST","mnemonicToSeedHex","generateMnemonic","strength","rng","validateMnemonic","e","wordlists","EN","JA","chinese_simplified","chinese_traditional","english","french","italian","japanese","korean","spanish"]
}
