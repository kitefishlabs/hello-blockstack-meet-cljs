{"version":3,"sources":["devtools/formatters/printing.cljs"],"sourcesContent":["(ns devtools.formatters.printing\n  (:require-macros [devtools.oops :refer [safe-call]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.format :refer [IDevtoolsFormat]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.state :refer [push-object-to-current-history! *current-state* get-current-state\n                                               is-circular? get-managed-print-level set-managed-print-level\n                                               update-current-state!]]\n            [devtools.formatters.helpers :refer [cljs-value? expandable? abbreviated? directly-printable? should-render?]]))\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn markup? [value]\n  (::markup (meta value)))\n\n(defn mark-as-markup [value]\n  (with-meta value {::markup true}))\n\n(defn build-markup [markup-db fn-key & args]\n  (let [f (get markup-db fn-key)]\n    (assert f (str \"missing markup method in markup-db: \" fn-key))\n    (mark-as-markup (apply f args))))\n\n(defn wrap-value-as-reference-if-needed [markup-db value]\n  (if (or (directly-printable? value) (markup? value))\n    value\n    (build-markup markup-db :reference-surrogate value)))\n\n; -- TemplateWriter ---------------------------------------------------------------------------------------------------------\n\n(deftype TemplateWriter [^:mutable group markup-db]\n  Object\n  (merge [_ a] (set! group (concat group a)))\n  (get-group [_] group)\n  IWriter\n  (-write [_ o] (set! group (concat group [(wrap-value-as-reference-if-needed markup-db o)])))                                ; issue #21\n  (-flush [_] nil))\n\n(defn make-template-writer [markup-db]\n  (TemplateWriter. [] markup-db))\n\n; -- post-processing --------------------------------------------------------------------------------------------------------\n\n(defn already-reference? [group]\n  (if-let [tag (first (first group))]\n    (= tag \"reference\")))\n\n(defn wrap-group-in-reference-if-needed [group obj markup-db]\n  (if (and (not (already-reference? group))\n           (or (expandable? obj) (abbreviated? group)))\n    (let [expandable-markup (apply build-markup markup-db :expandable group)\n          surrogate-markup (build-markup markup-db :raw-surrogate obj expandable-markup :target)\n          reference-markup (build-markup markup-db :reference surrogate-markup)]\n      [reference-markup])\n    group))\n\n(defn wrap-group-in-circular-warning-if-needed [group markup-db circular?]\n  (if circular?\n    [(apply build-markup markup-db :circular-reference group)]\n    group))\n\n(defn wrap-group-in-meta-if-needed [group value markup-db]\n  (if (should-render? :render-metas value #(some? (meta %)))\n    [(apply (partial (:meta-wrapper markup-db) (meta value)) group)]\n    group))\n\n; default printer implementation can do this:\n;   :else (write-all writer \"#<\" (str obj) \">\")\n; we want to wrap stringified obj in a reference for further inspection\n;\n; this behaviour changed in https://github.com/clojure/clojurescript/commit/34c3b8985ed8197d90f441c46d168c4024a20eb8\n; newly functions and :else branch print \"#object [\" ... \"]\"\n;\n; in some situations obj can still be a clojurescript value (e.g. deftypes)\n; we have to implement a special flag to prevent infinite recursion\n; see https://github.com/binaryage/cljs-devtools/issues/2\n;     https://github.com/binaryage/cljs-devtools/issues/8\n(defn detect-edge-case-and-patch-it [group obj markup-db]\n  (cond\n    (or\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"\\\"]\"))                                          ; function case\n      (and (= (count group) 5) (= (nth group 0) \"#object[\") (= (nth group 4) \"]\"))                                            ; :else -constructor case\n      (and (= (count group) 3) (= (nth group 0) \"#object[\") (= (nth group 2) \"]\")))                                           ; :else -cljs$lang$ctorStr case\n    [(build-markup markup-db :native-reference obj)]\n\n    (and (= (count group) 3) (= (nth group 0) \"#<\") (= (str obj) (nth group 1)) (= (nth group 2) \">\"))                        ; old code prior r1.7.28\n    [(nth group 0) (build-markup :native-reference obj) (nth group 2)]\n\n    :else group))\n\n(defn post-process-printed-output [output-group obj markup-db circular?]\n  (-> output-group\n      (detect-edge-case-and-patch-it obj markup-db)                                                                           ; an ugly hack\n      (wrap-group-in-reference-if-needed obj markup-db)\n      (wrap-group-in-circular-warning-if-needed markup-db circular?)\n      (wrap-group-in-meta-if-needed obj markup-db)))\n\n; -- alternative printer ----------------------------------------------------------------------------------------------------\n\n(defn alt-printer-job [obj writer opts]\n  (let [{:keys [markup-db]} opts]\n    (if (or (safe-call satisfies? false IDevtoolsFormat obj)\n            (safe-call satisfies? false IFormat obj))                                                                         ; we have to wrap value in reference if detected IFormat\n      (-write writer (build-markup markup-db :reference obj))\n      (if-let [atomic-markup (build-markup markup-db :atomic obj)]\n        (-write writer atomic-markup)\n        (let [default-impl (:fallback-impl opts)\n              ; we want to limit print-level, at max-print-level level use maximal abbreviation e.g. [...] or {...}\n              inner-opts (if (= *print-level* 1) (assoc opts :print-length 0) opts)]\n          (default-impl obj writer inner-opts))))))\n\n(defn alt-printer-impl [obj writer opts]\n  (binding [*current-state* (get-current-state)]\n    (let [{:keys [markup-db]} opts\n          circular? (is-circular? obj)\n          inner-writer (make-template-writer (:markup-db opts))]\n      (push-object-to-current-history! obj)\n      (alt-printer-job obj inner-writer opts)\n      (.merge writer (post-process-printed-output (.get-group inner-writer) obj markup-db circular?)))))\n\n; -- common code for managed printing ---------------------------------------------------------------------------------------\n\n(defn managed-print [tag markup-db printer]\n  (let [writer (make-template-writer markup-db)\n        opts {:alt-impl     alt-printer-impl\n              :markup-db    markup-db\n              :print-length (pref :max-header-elements)\n              :more-marker  (pref :more-marker)}\n        job-fn #(printer writer opts)]\n    (if-let [managed-print-level (get-managed-print-level)]\n      (binding [*print-level* managed-print-level]\n        (update-current-state! #(set-managed-print-level % nil))                                                              ; reset managed-print-level so it does not propagate further down in expaded data\n        (job-fn))\n      (job-fn))\n    (concat [(pref tag)] (.get-group writer))))\n\n; -- public printing API ----------------------------------------------------------------------------------------------------\n\n(defn managed-print-via-writer [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (pr-seq-writer [value] writer opts))))                                                       ; note we use pr-seq-writer becasue pr-writer is private for some reason\n\n(defn managed-print-via-protocol [value tag markup-db]\n  (managed-print tag markup-db (fn [writer opts]\n                                 (-pr-writer value writer opts))))\n"],"mappings":"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","names":["devtools.formatters.printing/markup?","cljs.core/meta","value","devtools.formatters.printing/mark-as-markup","cljs.core/with-meta","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","devtools.formatters.printing/build-markup","argseq__4648__auto__","cljs.core/first","seq13234","cljs.core/next","self__4628__auto__","G__13235","G__13236","cljs.core.get.cljs$core$IFn$_invoke$arity$2","markup-db","fn-key","js/Error","f","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","args","devtools.formatters.printing/wrap-value-as-reference-if-needed","or__4047__auto__","devtools.formatters.helpers/directly-printable?","devtools.formatters.printing.build_markup.cljs$core$IFn$_invoke$arity$variadic","cljs.core/-write","writer__4291__auto__","devtools.formatters.printing/TemplateWriter","devtools.formatters.printing/->TemplateWriter","group","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","a","o","devtools.formatters.printing/make-template-writer","devtools.formatters.printing/already-reference?","temp__5455__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","tag","devtools.formatters.printing/wrap-group-in-reference-if-needed","and__4036__auto__","cljs.core/not","devtools.formatters.helpers/expandable?","obj","devtools.formatters.helpers/abbreviated?","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","expandable-markup","surrogate-markup","reference-markup","devtools.formatters.printing/wrap-group-in-circular-warning-if-needed","circular?","devtools.formatters.printing/wrap-group-in-meta-if-needed","devtools.formatters.helpers/should-render?","p1__13257#","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/detect-edge-case-and-patch-it","cljs.core/count","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","devtools.formatters.printing/post-process-printed-output","output-group","devtools.formatters.printing/alt-printer-job","map__13265","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","opts","cljs.core/native-satisfies?","e13274","devtools.format/IDevtoolsFormat","e13276","devtools.protocols/IFormat","writer","atomic-markup","cljs.core/*print-level*","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","default-impl","inner-opts","devtools.formatters.printing/alt-printer-impl","*current-state*-temp-val__13286","*current-state*-orig-val__13285","devtools.formatters.state/*current-state*","devtools.formatters.state/get-current-state","map__13287","devtools.formatters.state/is-circular?","devtools.formatters.state/push-object-to-current-history!","inner-writer","devtools.formatters.printing/managed-print","devtools.prefs/pref","printer","devtools.formatters.state/get-managed-print-level","*print-level*-temp-val__13292","*print-level*-orig-val__13291","managed-print-level","devtools.formatters.state/update-current-state!","p1__13289#","devtools.formatters.state/set-managed-print-level","job-fn","devtools.formatters.printing/managed-print-via-writer","cljs.core/pr-seq-writer","devtools.formatters.printing/managed-print-via-protocol","cljs.core/-pr-writer"]}