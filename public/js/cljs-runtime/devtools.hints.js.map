{"version":3,"sources":["devtools/hints.cljs"],"sourcesContent":["(ns devtools.hints\n  (:require-macros [devtools.compiler :refer [check-compiler-options!]]\n                   [devtools.oops :refer [unchecked-aget]])\n  (:require [devtools.prefs :refer [pref]]\n            [devtools.context :as context]\n            [cljs.stacktrace :as stacktrace]))\n\n; cljs.stacktrace does not play well in :advanced mode optimizations, see https://github.com/binaryage/cljs-devtools/issues/37\n(check-compiler-options!)\n\n(defn ^:dynamic available? []\n  true)\n\n; Question: How much time have you lost staring at \"Cannot read property 'call' of null\" kind of errors?\n;\n; ---------------------------------------------------------------------------------------------------------------------------\n;\n; The idea is to try enhance error object's .stack and .message fields with additional info about\n; the call site causing null type error. With optimizations :none the name of the null call site can be seen.\n;\n; The enhancing handler function tries to:\n; 1) parse error's stack trace.\n; 2) look original javascript source file up (via sync AJAX fetch by default).\n; 3) locate reported line and column.\n; 4) presents problematic line with a column hint as addition to .stack or .message strings.\n\n; Technically the trick here is to override TypeError.prototype.toString\n; and global window.onerror handler to enhance uncaught errors.\n;\n; With that we should handle two situations:\n; 1) either error gets printed (typically in user's catch via console), so patched toString() method gets called.\n; 2) or it is uncaught and our global error handler should take care of possible enhancement\n;    before devtools present it to the user themselves.\n;\n; note: Tested under Chrome only\n\n(def ^:dynamic *installed* false)\n(def ^:dynamic *original-global-error-handler* nil)\n(def ^:dynamic *original-type-error-prototype-to-string* nil)\n\n(def processed-errors (volatile! nil))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn set-processed-errors! [val]\n  (vreset! processed-errors val))\n\n(defn get-processed-errors! []\n  (if-let [val @processed-errors]\n    val\n    (if (exists? js/WeakSet)\n      (set-processed-errors! (js/WeakSet.)))))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn empty-as-nil [str]\n  (if (empty? str) nil str))\n\n(defn ajax-reader [url]\n  (let [xhr (js/XMLHttpRequest.)]\n    (.open xhr \"GET\" url false)\n    (.send xhr)\n    (empty-as-nil (.-responseText xhr))))\n\n(defn retrieve-javascript-source [where]\n  (let [reader (or (pref :file-reader) ajax-reader)]\n    (reader where)))\n\n(defn get-line [lines line-number]\n  (unchecked-aget lines (dec line-number)))                                                                                   ; line numbering is 1-based\n\n(defn extend-content [content lines line-number min-length]\n  (if (or (> (count content) min-length)\n          (not (pos? line-number)))\n    content\n    (let [prev-line-number (dec line-number)\n          prev-line (get-line lines prev-line-number)\n          new-content (str prev-line \"\\n\" content)]\n      (extend-content new-content lines prev-line-number min-length))))\n\n(defn mark-call-closed-at-column [line column]\n  (let [n (dec column)                                                                                                        ; column number is 1-based\n        prefix (.substring line 0 n)\n        postfix (.substring line n)]\n    (str prefix \" <<< \u2622 NULL \u2622 <<< \" postfix)))\n\n(defn mark-null-call-site-location [file line-number column]\n  (let [content (retrieve-javascript-source file)\n        lines (.split content \"\\n\")\n        line (get-line lines line-number)\n        marked-line (mark-call-closed-at-column line column)\n        min-length (or (pref :sanity-hint-min-length) 128)]\n    (extend-content marked-line lines line-number min-length)))\n\n(defn make-sense-of-the-error [message file line-number column]\n  (cond\n    (re-matches #\"Cannot read property 'call' of.*\" message) (mark-null-call-site-location file line-number column)\n    :else nil))\n\n(defn parse-stacktrace [native-stack-trace]\n  (stacktrace/parse-stacktrace {} native-stack-trace {:ua-product :chrome} {:asset-root \"\"}))\n\n(defn error-object-sense [error]\n  (try\n    (let [native-stack-trace (.-stack error)\n          stack-trace (parse-stacktrace native-stack-trace)\n          top-item (second stack-trace)                                                                                       ; first line is just an error message\n          {:keys [file line column]} top-item]\n      (make-sense-of-the-error (.-message error) file line column))\n    (catch :default _e\n      ; silently fail in case of troubles parsing stack trace\n      false)))\n\n(defn type-error-to-string [self]\n  (if-let [seen-errors (get-processed-errors!)]\n    (when-not (.has seen-errors self)\n      (.add seen-errors self)\n      (when-let [sense (error-object-sense self)]\n        (set! (.-message self) (str (.-message self) \", a sanity hint:\\n\" sense)))))                                          ; this is dirty, patch message field before it gets used\n  (.call *original-type-error-prototype-to-string* self))\n\n(defn global-error-handler [message url line column error]\n  (let [res (if *original-global-error-handler*\n              (*original-global-error-handler* message url line column error))]\n    (if-not res\n      (when-let [sense (error-object-sense error)]\n        (.info (context/get-console) \"A sanity hint for incoming uncaught error:\\n\" sense)\n        false)\n      true)))\n\n(defn install-type-error-enhancer []\n  (set! *original-global-error-handler* (.-onerror (context/get-root)))\n  (set! (.-onerror (context/get-root)) global-error-handler)\n  (let [prototype (.-prototype js/TypeError)]\n    (set! *original-type-error-prototype-to-string* (.-toString prototype))\n    (set! (.-toString prototype) #(this-as self (type-error-to-string self)))))                                               ; work around http://dev.clojure.org/jira/browse/CLJS-1545\n\n; -- installation -----------------------------------------------------------------------------------------------------------\n\n(defn installed? []\n  *installed*)\n\n(defn install! []\n  (when-not *installed*\n    (set! *installed* true)\n    (install-type-error-enhancer)\n    true))\n\n(defn uninstall! []\n  (when *installed*\n    (set! *installed* false)\n    (assert *original-type-error-prototype-to-string*)\n    (set! (.-onerror (context/get-root)) *original-global-error-handler*)\n    (let [prototype (.-prototype js/TypeError)]\n      (set! (.-toString prototype) *original-type-error-prototype-to-string*))))\n"],"mappings":"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","names":["devtools.hints/available?","devtools.hints/*installed*","devtools.hints/*original-global-error-handler*","devtools.hints/*original-type-error-prototype-to-string*","devtools.hints/processed-errors","cljs.core/volatile!","devtools.hints/set-processed-errors!","cljs.core/vreset!","val","devtools.hints/get-processed-errors!","cljs.core/deref","temp__5455__auto__","js/WeakSet","devtools.hints/empty-as-nil","cljs.core/empty?","str","devtools.hints/ajax-reader","js/XMLHttpRequest","xhr","url","devtools.hints/retrieve-javascript-source","or__4047__auto__","devtools.prefs/pref","reader","where","devtools.hints/get-line","lines","line-number","devtools.hints/extend-content","cljs.core/count","content","min-length","prev-line-number","prev-line","new-content","devtools.hints/mark-call-closed-at-column","column","line","n","prefix","postfix","devtools.hints/mark-null-call-site-location","file","marked-line","devtools.hints/make-sense-of-the-error","cljs.core/re-matches","message","devtools.hints/parse-stacktrace","G__12933","G__12934","G__12935","G__12936","cljs.stacktrace/parse-stacktrace","native-stack-trace","devtools.hints/error-object-sense","e12937","map__12938","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","error","cljs.core/second","stack-trace","top-item","devtools.hints/type-error-to-string","seen-errors","self","temp__5457__auto__","sense","devtools.hints/global-error-handler","cljs.core/not","res","devtools.context/get-console","devtools.hints/install-type-error-enhancer","devtools.context/get-root","js/TypeError","prototype","devtools.hints/installed?","devtools.hints/install!","devtools.hints/uninstall!","js/Error"]}