{
"version":3,
"file":"module$node_modules$blockstack$lib$profiles$profileProofs.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,0DAAA,CAA8E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAG3IC,MAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAAK,eAAA,CAaAA,QAAuB,CAACC,OAAD,CAAUC,YAAV,CAAwB,CAC7C,IAAIC,KAA0B,CAAnB,CAAAC,SAAAC,OAAA,EAAyCC,IAAAA,EAAzC,GAAwBF,SAAA,CAAU,CAAV,CAAxB,CAAqDA,SAAA,CAAU,CAAV,CAArD,CAAoE,IAE/E,IAAI,CAACH,OAAL,CACE,KAAUM,MAAJ,CAAU,0BAAV,CAAN,CAGF,IAAIC,SAAW,EAAf,CACIC,iBAAmB,EAEvB,IAAIR,OAAAS,eAAA,CAAuB,SAAvB,CAAJ,CACEF,QAAA,CAAWP,OAAAU,QADb,KAGE,OAAO,KAAIC,OAAJ,CAAY,QAAS,CAACC,OAAD,CAAU,CACpCA,OAAA,CAAQ,EAAR,CADoC,CAA/B,CAKTL;QAAAM,QAAA,CAAiB,QAAS,CAACH,OAAD,CAAU,CAElC,CAAI,CAAAA,OAAAD,eAAA,CAAuB,SAAvB,CAAJ,EAA0CK,SAAAC,gBAAAN,eAAA,CAAyCC,OAAAM,QAAzC,CAA1C,GAIMN,OAAAD,eAAA,CAAuB,WAAvB,CAJN,EAImE,MAJnE,GAI6CC,OAAAO,UAJ7C,EAI6EP,OAAAD,eAAA,CAAuB,UAAvB,CAJ7E,EAeAD,gBAAAU,KAAA,CAAsBJ,SAAAC,gBAAA,CAA0BL,OAAAM,QAA1B,CAAAG,cAAA,CAPVC,CACVJ,QAASN,OAAAM,QADCI,CAEVC,UAAWX,OAAAY,SAFDF,CAGVG,WAAYb,OAAAa,WAHFH,CAIVI,MAAO,CAAA,CAJGJ,CAOU,CAAgEnB,YAAhE,CAA8EC,IAA9E,CAAtB,CAjBkC,CAApC,CAoBA,OAAOS,QAAAc,IAAA,CAAYjB,gBAAZ,CAtCsC,CAX/C,KAAIM,UAAYtB,OAAA,CAAQ,4DAAR,CAR2H;",
"sources":["node_modules/blockstack/lib/profiles/profileProofs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockstack$lib$profiles$profileProofs\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateProofs = validateProofs;\n\nvar _services = require('./services');\n\n/**\n * Validates the social proofs in a user's profile. Currently supports validation of \n * Facebook, Twitter, GitHub, Instagram, LinkedIn and HackerNews accounts.\n *\n * @param {Object} profile The JSON of the profile to be validated\n * @param {string} ownerAddress The owner bitcoin address to be validated\n * @param {string} [name=null] The Blockstack name to be validated \n * @returns {Promise} that resolves to an array of validated proof objects\n */\nfunction validateProofs(profile, ownerAddress) {\n  var name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (!profile) {\n    throw new Error('Profile must not be null');\n  }\n\n  var accounts = [];\n  var proofsToValidate = [];\n\n  if (profile.hasOwnProperty('account')) {\n    accounts = profile.account;\n  } else {\n    return new Promise(function (resolve) {\n      resolve([]);\n    });\n  }\n\n  accounts.forEach(function (account) {\n    // skip if proof service is not supported\n    if (account.hasOwnProperty('service') && !_services.profileServices.hasOwnProperty(account.service)) {\n      return;\n    }\n\n    if (!(account.hasOwnProperty('proofType') && account.proofType === 'http' && account.hasOwnProperty('proofUrl'))) {\n      return;\n    }\n\n    var proof = {\n      service: account.service,\n      proof_url: account.proofUrl,\n      identifier: account.identifier,\n      valid: false\n    };\n\n    proofsToValidate.push(_services.profileServices[account.service].validateProof(proof, ownerAddress, name));\n  });\n\n  return Promise.all(proofsToValidate);\n}\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Object","defineProperty","value","validateProofs","profile","ownerAddress","name","arguments","length","undefined","Error","accounts","proofsToValidate","hasOwnProperty","account","Promise","resolve","forEach","_services","profileServices","service","proofType","push","validateProof","proof","proof_url","proofUrl","identifier","valid","all"]
}
