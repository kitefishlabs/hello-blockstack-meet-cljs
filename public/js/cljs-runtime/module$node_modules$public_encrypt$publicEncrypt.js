shadow$provide.module$node_modules$public_encrypt$publicEncrypt=function(global,process,require,module,exports,shadow$shims){var parseKeys=require("module$node_modules$parse_asn1$index"),randomBytes=require("module$node_modules$randombytes$browser"),createHash=require("module$node_modules$create_hash$browser"),mgf=require("module$node_modules$public_encrypt$mgf"),xor=require("module$node_modules$public_encrypt$xor"),BN=require("module$node_modules$bn_DOT_js$lib$bn"),withPublic=require("module$node_modules$public_encrypt$withPublic"),
crt=require("module$node_modules$browserify_rsa$index"),Buffer=require("module$node_modules$safe_buffer$index").Buffer;module.exports=function(publicKey,msg,reverse){var padding=publicKey.padding?publicKey.padding:reverse?1:4;publicKey=parseKeys(publicKey);if(4===padding){padding=publicKey.modulus.byteLength();var mLen=msg.length,iHash=createHash("sha1").update(Buffer.alloc(0)).digest(),hLen=iHash.length,hLen2=2*hLen;if(mLen>padding-hLen2-2)throw Error("message too long");hLen2=Buffer.alloc(padding-
mLen-hLen2-2);var dblen=padding-hLen-1;mLen=randomBytes(hLen);msg=xor(Buffer.concat([iHash,hLen2,Buffer.alloc(1,1),msg],dblen),mgf(mLen,dblen));hLen=xor(mLen,mgf(msg,hLen));msg=new BN(Buffer.concat([Buffer.alloc(1),hLen,msg],padding))}else if(1===padding){hLen=msg.length;padding=publicKey.modulus.byteLength();if(hLen>padding-11)throw Error("message too long");if(reverse)hLen=Buffer.alloc(padding-hLen-3,255);else{hLen=padding-hLen-3;iHash=Buffer.allocUnsafe(hLen);mLen=0;hLen2=randomBytes(2*hLen);dblen=
0;for(var num;mLen<hLen;)dblen===hLen2.length&&(hLen2=randomBytes(2*hLen),dblen=0),(num=hLen2[dblen++])&&(iHash[mLen++]=num);hLen=iHash}msg=new BN(Buffer.concat([Buffer.from([0,reverse?1:2]),hLen,Buffer.alloc(1),msg],padding))}else if(3===padding){if(msg=new BN(msg),0<=msg.cmp(publicKey.modulus))throw Error("data too long for modulus");}else throw Error("unknown padding");return reverse?crt(msg,publicKey):withPublic(msg,publicKey)}}
//# sourceMappingURL=module$node_modules$public_encrypt$publicEncrypt.js.map
