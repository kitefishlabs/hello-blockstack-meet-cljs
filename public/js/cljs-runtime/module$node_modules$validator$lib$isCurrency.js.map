{
"version":3,
"file":"module$node_modules$validator$lib$isCurrency.js",
"lineCount":4,
"mappings":"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAG9HC,MAAAC,eAAA,CAAsBH,OAAtB,CAA+B,YAA/B,CAA6C,CAC3CI,MAAO,CAAA,CADoC,CAA7C,CAGAJ,QAAAK,QAAA,CA0EAC,QAAmB,CAACC,GAAD,CAAMC,OAAN,CAAe,CAChC,CAAC,CAAA,CAAGC,cAAAJ,QAAJ,EAA4BE,GAA5B,CACAC,QAAA,CAAU,CAAC,CAAA,CAAGE,OAAAL,QAAJ,EAAqBG,OAArB,CAA8BG,wBAA9B,CAhEoB,KAC1BC,OAAS,KAATA,CAAiBJ,OAAAI,OAAAC,QAAA,CAAuB,KAAvB,CAA8B,KAA9B,CAAjBD,CAAwD,GAAxDA,EAA+DJ,OAAAM,eAAA,CAAyB,EAAzB,CAA8B,GAA7FF,CAD0B,CAQ1BG,QAFsB,GAEtBA,CAH6BC,CAFKC,aAELD,CADE,kBACFA,CADuBR,OAAAU,oBACvBF,CADqD,UACrDA,CACDG,KAAA,CAAgC,GAAhC,CAE5BJ,CAFmE,IAEnEA,EADiB,KACjBA;AADyBP,OAAAY,kBACzBL,CADqD,UACrDA,CAGAP,QAAAa,gBAAJ,EAA+B,CAACb,OAAAc,qBAAhC,GACMd,OAAAe,2BAAJ,CACER,OADF,EAVaS,IAUb,CAEWhB,OAAAiB,4BAFX,GAGEV,OAHF,CAVaS,IAUb,CAGuBT,OAHvB,CADF,CASIP,QAAAkB,gCAAJ,CACEX,OADF,CACY,aADZ,CAC4BA,OAD5B,CAEWP,OAAAmB,yBAAJ,CACLZ,OADK,CACK,IADL,CACYA,OADZ,CAEIP,OAAAoB,yBAFJ,GAGLb,OAHK,EAGM,WAHN,CAOLA,QAAA,CADEP,OAAAqB,oBAAJ,CACEd,OADF,CACaH,MADb,CAGYA,MAHZ,CAGqBG,OAGjBP,QAAAa,gBAAJ,GACMb,OAAAc,qBAAJ;AACEP,OADF,CACY,MADZ,CACqBA,OADrB,CAC+B,MAD/B,CACwCA,OADxC,CACkD,GADlD,CAEaP,OAAAiB,4BAFb,EAEoDjB,OAAAe,2BAFpD,GAGER,OAHF,CAjCaS,IAiCb,CAGuBT,OAHvB,CADF,CA+BA,OAAOe,CArBA,IAAIC,MAAJ,CAAW,sBAAX,CAAiChB,OAAjC,CAA2C,GAA3C,CAqBAe,MAAA,CAA4BvB,GAA5B,CAHyB,CAtElC,KAAIG,QAM0C,CAR1CsB,MAQ0C,CARjClC,OAAA,CAAQ,8CAAR,CAQiC,GANTkC,MAMgBC,WAAP,CANTD,MAMS,CAA8B,CAAE3B,QANzC2B,MAMuC,CAN5E,CAIIvB,eAE0C,CAJ1CyB,OAI0C,CAJ1BpC,OAAA,CAAQ,qDAAR,CAI0B,GAFFoC,OAESD,WAAP,CAFFC,OAEE,CAA8B,CAAE7B,QAFlC6B,OAEgC,CAN5E,CAuDIvB,yBAA2B,CAC7BC,OAAQ,GADqB,CAE7BE,eAAgB,CAAA,CAFa;AAG7Ba,yBAA0B,CAAA,CAHG,CAI7BE,oBAAqB,CAAA,CAJQ,CAK7BR,gBAAiB,CAAA,CALY,CAM7BC,qBAAsB,CAAA,CANO,CAO7BG,4BAA6B,CAAA,CAPA,CAQ7BF,2BAA4B,CAAA,CARC,CAS7BG,gCAAiC,CAAA,CATJ,CAU7BR,oBAAqB,GAVQ,CAW7BE,kBAAmB,GAXU,CAY7BQ,yBAA0B,CAAA,CAZG,CAoB/B7B,OAAAC,QAAA,CAAiBA,OAAA,CAAQ,SAAR,CArF6G;",
"sources":["node_modules/validator/lib/isCurrency.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$validator$lib$isCurrency\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = isCurrency;\n\nvar _merge = require('./util/merge');\n\nvar _merge2 = _interopRequireDefault(_merge);\n\nvar _assertString = require('./util/assertString');\n\nvar _assertString2 = _interopRequireDefault(_assertString);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction currencyRegex(options) {\n  var symbol = '(\\\\' + options.symbol.replace(/\\./g, '\\\\.') + ')' + (options.require_symbol ? '' : '?'),\n      negative = '-?',\n      whole_dollar_amount_without_sep = '[1-9]\\\\d*',\n      whole_dollar_amount_with_sep = '[1-9]\\\\d{0,2}(\\\\' + options.thousands_separator + '\\\\d{3})*',\n      valid_whole_dollar_amounts = ['0', whole_dollar_amount_without_sep, whole_dollar_amount_with_sep],\n      whole_dollar_amount = '(' + valid_whole_dollar_amounts.join('|') + ')?',\n      decimal_amount = '(\\\\' + options.decimal_separator + '\\\\d{2})?';\n  var pattern = whole_dollar_amount + decimal_amount;\n\n  // default is negative sign before symbol, but there are two other options (besides parens)\n  if (options.allow_negatives && !options.parens_for_negatives) {\n    if (options.negative_sign_after_digits) {\n      pattern += negative;\n    } else if (options.negative_sign_before_digits) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // South African Rand, for example, uses R 123 (space) and R-123 (no space)\n  if (options.allow_negative_sign_placeholder) {\n    pattern = '( (?!\\\\-))?' + pattern;\n  } else if (options.allow_space_after_symbol) {\n    pattern = ' ?' + pattern;\n  } else if (options.allow_space_after_digits) {\n    pattern += '( (?!$))?';\n  }\n\n  if (options.symbol_after_digits) {\n    pattern += symbol;\n  } else {\n    pattern = symbol + pattern;\n  }\n\n  if (options.allow_negatives) {\n    if (options.parens_for_negatives) {\n      pattern = '(\\\\(' + pattern + '\\\\)|' + pattern + ')';\n    } else if (!(options.negative_sign_before_digits || options.negative_sign_after_digits)) {\n      pattern = negative + pattern;\n    }\n  }\n\n  // ensure there's a dollar and/or decimal amount, and that\n  // it doesn't start with a space or a negative sign followed by a space\n  return new RegExp('^(?!-? )(?=.*\\\\d)' + pattern + '$');\n}\n\nvar default_currency_options = {\n  symbol: '$',\n  require_symbol: false,\n  allow_space_after_symbol: false,\n  symbol_after_digits: false,\n  allow_negatives: true,\n  parens_for_negatives: false,\n  negative_sign_before_digits: false,\n  negative_sign_after_digits: false,\n  allow_negative_sign_placeholder: false,\n  thousands_separator: ',',\n  decimal_separator: '.',\n  allow_space_after_digits: false\n};\n\nfunction isCurrency(str, options) {\n  (0, _assertString2.default)(str);\n  options = (0, _merge2.default)(options, default_currency_options);\n  return currencyRegex(options).test(str);\n}\nmodule.exports = exports['default'];\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Object","defineProperty","value","default","isCurrency","str","options","_assertString2","_merge2","default_currency_options","symbol","replace","require_symbol","pattern","valid_whole_dollar_amounts","whole_dollar_amount_without_sep","thousands_separator","join","decimal_separator","allow_negatives","parens_for_negatives","negative_sign_after_digits","negative","negative_sign_before_digits","allow_negative_sign_placeholder","allow_space_after_symbol","allow_space_after_digits","symbol_after_digits","test","RegExp","_merge","__esModule","_assertString"]
}
