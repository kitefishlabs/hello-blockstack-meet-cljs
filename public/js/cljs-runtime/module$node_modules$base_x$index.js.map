{
"version":3,
"file":"module$node_modules$base_x$index.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/base-x/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$base_x$index\"] = function(global,process,require,module,exports,shadow$shims) {\n// base-x encoding / decoding\n// Copyright (c) 2018 base-x contributors\n// Copyright (c) 2014-2018 The Bitcoin Core developers (base58.cpp)\n// Distributed under the MIT software license, see the accompanying\n// file LICENSE or http://www.opensource.org/licenses/mit-license.php.\n\nconst Buffer = require('safe-buffer').Buffer\n\nmodule.exports = function base (ALPHABET) {\n  if (ALPHABET.length >= 255) throw new TypeError('Alphabet too long')\n\n  const BASE_MAP = new Uint8Array(256)\n  BASE_MAP.fill(255)\n\n  for (let i = 0; i < ALPHABET.length; i++) {\n    const x = ALPHABET.charAt(i)\n    const xc = x.charCodeAt(0)\n\n    if (BASE_MAP[xc] !== 255) throw new TypeError(x + ' is ambiguous')\n    BASE_MAP[xc] = i\n  }\n\n  const BASE = ALPHABET.length\n  const LEADER = ALPHABET.charAt(0)\n  const FACTOR = Math.log(BASE) / Math.log(256) // log(BASE) / log(256), rounded up\n  const iFACTOR = Math.log(256) / Math.log(BASE) // log(256) / log(BASE), rounded up\n\n  function encode (source) {\n    if (!Buffer.isBuffer(source)) throw new TypeError('Expected Buffer')\n    if (source.length === 0) return ''\n\n    // Skip & count leading zeroes.\n    let zeroes = 0\n    let length = 0\n    let pbegin = 0\n    const pend = source.length\n\n    while (pbegin !== pend && source[pbegin] === 0) {\n      pbegin++\n      zeroes++\n    }\n\n    // Allocate enough space in big-endian base58 representation.\n    const size = ((pend - pbegin) * iFACTOR + 1) >>> 0\n    const b58 = new Uint8Array(size)\n\n    // Process the bytes.\n    while (pbegin !== pend) {\n      let carry = source[pbegin]\n\n      // Apply \"b58 = b58 * 256 + ch\".\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (256 * b58[it]) >>> 0\n        b58[it] = (carry % BASE) >>> 0\n        carry = (carry / BASE) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      pbegin++\n    }\n\n    // Skip leading zeroes in base58 result.\n    let it = size - length\n    while (it !== size && b58[it] === 0) {\n      it++\n    }\n\n    // Translate the result into a string.\n    let str = LEADER.repeat(zeroes)\n    for (; it < size; ++it) str += ALPHABET.charAt(b58[it])\n\n    return str\n  }\n\n  function decodeUnsafe (source) {\n    if (typeof source !== 'string') throw new TypeError('Expected String')\n    if (source.length === 0) return Buffer.alloc(0)\n\n    let psz = 0\n\n    // Skip leading spaces.\n    if (source[psz] === ' ') return\n\n    // Skip and count leading '1's.\n    let zeroes = 0\n    let length = 0\n    while (source[psz] === LEADER) {\n      zeroes++\n      psz++\n    }\n\n    // Allocate enough space in big-endian base256 representation.\n    const size = (((source.length - psz) * FACTOR) + 1) >>> 0 // log(58) / log(256), rounded up.\n    const b256 = new Uint8Array(size)\n\n    // Process the characters.\n    while (source[psz]) {\n      // Decode character\n      let carry = BASE_MAP[source.charCodeAt(psz)]\n\n      // Invalid character\n      if (carry === 255) return\n\n      let i = 0\n      for (let it = size - 1; (carry !== 0 || i < length) && (it !== -1); it--, i++) {\n        carry += (BASE * b256[it]) >>> 0\n        b256[it] = (carry % 256) >>> 0\n        carry = (carry / 256) >>> 0\n      }\n\n      if (carry !== 0) throw new Error('Non-zero carry')\n      length = i\n      psz++\n    }\n\n    // Skip trailing spaces.\n    if (source[psz] === ' ') return\n\n    // Skip leading zeroes in b256.\n    let it = size - length\n    while (it !== size && b256[it] === 0) {\n      it++\n    }\n\n    const vch = Buffer.allocUnsafe(zeroes + (size - it))\n    vch.fill(0x00, 0, zeroes)\n\n    let j = zeroes\n    while (it !== size) {\n      vch[j++] = b256[it++]\n    }\n\n    return vch\n  }\n\n  function decode (string) {\n    const buffer = decodeUnsafe(string)\n    if (buffer) return buffer\n\n    throw new Error('Non-base' + BASE + ' character')\n  }\n\n  return {\n    encode: encode,\n    decodeUnsafe: decodeUnsafe,\n    decode: decode\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Buffer","module.exports","ALPHABET","decodeUnsafe","source","TypeError","length","alloc","psz","zeroes","LEADER","size","FACTOR","b256","Uint8Array","carry","BASE_MAP","charCodeAt","i","it","BASE","Error","vch","allocUnsafe","fill","j","x","charAt","xc","Math","log","iFACTOR","encode","isBuffer","pbegin","pend","b58","str","repeat","decode","string","buffer"]
}
