{
"version":3,
"file":"module$node_modules$jsontokens$lib$cryptoClients$secp256k1.js",
"lineCount":8,
"mappings":"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",
"sources":["node_modules/jsontokens/lib/cryptoClients/secp256k1.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$jsontokens$lib$cryptoClients$secp256k1\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SECP256K1Client = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _elliptic = require('elliptic');\n\nvar _crypto = require('crypto');\n\nvar _keyEncoder = require('key-encoder');\n\nvar _keyEncoder2 = _interopRequireDefault(_keyEncoder);\n\nvar _validator = require('validator');\n\nvar _ecdsaSigFormatter = require('./ecdsaSigFormatter');\n\nvar _errors = require('../errors');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SECP256K1Client = exports.SECP256K1Client = function () {\n  function SECP256K1Client() {\n    _classCallCheck(this, SECP256K1Client);\n  }\n\n  _createClass(SECP256K1Client, null, [{\n    key: 'createHash',\n    value: function createHash(signingInput) {\n      return (0, _crypto.createHash)('sha256').update(signingInput).digest();\n    }\n  }, {\n    key: 'loadPrivateKey',\n    value: function loadPrivateKey(rawPrivateKey) {\n      if (rawPrivateKey.length === 66) {\n        rawPrivateKey = rawPrivateKey.slice(0, 64);\n      }\n      return SECP256K1Client.ec.keyFromPrivate(rawPrivateKey);\n    }\n  }, {\n    key: 'loadPublicKey',\n    value: function loadPublicKey(rawPublicKey) {\n      return SECP256K1Client.ec.keyFromPublic(rawPublicKey, 'hex');\n    }\n  }, {\n    key: 'encodePublicKey',\n    value: function encodePublicKey(publicKey, originalFormat, destinationFormat) {\n      return SECP256K1Client.keyEncoder.encodePublic(publicKey, originalFormat, destinationFormat);\n    }\n  }, {\n    key: 'derivePublicKey',\n    value: function derivePublicKey(privateKey, compressed) {\n      if (typeof privateKey !== 'string') {\n        throw Error('private key must be a string');\n      }\n      if (!(0, _validator.isHexadecimal)(privateKey)) {\n        throw Error('private key must be a hex string');\n      }\n      if (privateKey.length == 66) {\n        privateKey = privateKey.slice(0, 64);\n      } else if (privateKey.length <= 64) {\n        // do nothing\n      } else {\n        throw Error('private key must be 66 characters or less');\n      }\n      if (compressed === undefined) {\n        compressed = true;\n      }\n      var keypair = SECP256K1Client.ec.keyFromPrivate(privateKey);\n      return keypair.getPublic(compressed, 'hex');\n    }\n  }, {\n    key: 'signHash',\n    value: function signHash(signingInputHash, rawPrivateKey) {\n      var format = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'jose';\n\n      // make sure the required parameters are provided\n      if (!(signingInputHash && rawPrivateKey)) {\n        throw new _errors.MissingParametersError('a signing input hash and private key are all required');\n      }\n      // prepare the private key\n      var privateKeyObject = SECP256K1Client.loadPrivateKey(rawPrivateKey);\n      // calculate the signature\n      var signatureObject = privateKeyObject.sign(signingInputHash);\n      var derSignature = new Buffer(signatureObject.toDER());\n\n      if (format === 'der') {\n        return derSignature.toString('hex');\n      } else if (format === 'jose') {\n        // return the JOSE-formatted signature\n        return (0, _ecdsaSigFormatter.derToJose)(derSignature, 'ES256');\n      } else {\n        throw Error('Invalid signature format');\n      }\n    }\n  }, {\n    key: 'loadSignature',\n    value: function loadSignature(joseSignature) {\n      // create and return the DER-formatted signature buffer\n      return (0, _ecdsaSigFormatter.joseToDer)(joseSignature, 'ES256');\n    }\n  }, {\n    key: 'verifyHash',\n    value: function verifyHash(signingInputHash, derSignatureBuffer, rawPublicKey) {\n      // make sure the required parameters are provided\n      if (!(signingInputHash && derSignatureBuffer && rawPublicKey)) {\n        throw new _errors.MissingParametersError('a signing input hash, der signature, and public key are all required');\n      }\n      // prepare the public key\n      var publicKeyObject = SECP256K1Client.loadPublicKey(rawPublicKey);\n      // verify the token\n      return publicKeyObject.verify(signingInputHash, derSignatureBuffer);\n    }\n  }]);\n\n  return SECP256K1Client;\n}();\n\nSECP256K1Client.algorithmName = 'ES256K';\nSECP256K1Client.ec = new _elliptic.ec('secp256k1');\nSECP256K1Client.keyEncoder = new _keyEncoder2.default({\n  curveParameters: [1, 3, 132, 0, 10],\n  privatePEMOptions: { label: 'EC PRIVATE KEY' },\n  publicPEMOptions: { label: 'PUBLIC KEY' },\n  curve: SECP256K1Client.ec\n});\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","Object","defineProperty","value","SECP256K1Client","undefined","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","key","Constructor","protoProps","staticProps","prototype","_elliptic","_crypto","_keyEncoder2","_keyEncoder","__esModule","default","_validator","_ecdsaSigFormatter","_errors","instance","TypeError","createHash","signingInput","update","digest","loadPrivateKey","rawPrivateKey","slice","ec","keyFromPrivate","loadPublicKey","rawPublicKey","keyFromPublic","encodePublicKey","publicKey","originalFormat","destinationFormat","keyEncoder","encodePublic","derivePublicKey","privateKey","compressed","Error","isHexadecimal","keypair","getPublic","signHash","signingInputHash","format","arguments","MissingParametersError","signatureObject","privateKeyObject","sign","derSignature","Buffer","toDER","toString","derToJose","loadSignature","joseSignature","joseToDer","verifyHash","derSignatureBuffer","publicKeyObject","verify","algorithmName","curveParameters","privatePEMOptions","label","publicPEMOptions","curve"]
}
