{"version":3,"sources":["devtools/reporter.cljs"],"sourcesContent":["(ns devtools.reporter\n  (:require-macros [devtools.oops :refer [oget]])\n  (:require [devtools.util :as util]\n            [devtools.context :as context]))\n\n(def issues-url \"https://github.com/binaryage/cljs-devtools/issues\")\n\n; -- internal errors  -------------------------------------------------------------------------------------------------------\n\n(defn report-internal-error! [e & [context footer]]\n  (let [console (context/get-console)]\n    (try\n      (let [message (if (instance? js/Error e)\n                      (or (.-message e) e)\n                      e)\n            header #js [\"%cCLJS DevTools Error%c%s\"\n                        \"background-color:red;color:white;font-weight:bold;padding:0px 3px;border-radius:2px;\"\n                        \"color:red\"\n                        (str \" \" message)]\n            context-msg (str \"In \" (util/get-lib-info) (if context (str \", \" context \".\") \".\") \"\\n\\n\")\n            footer-msg (if (some? footer)\n                         footer\n                         (str \"\\n\\n\" \"---\\n\" \"Please report the issue here: \" issues-url))\n            details #js [context-msg e footer-msg]]\n        (let [group-collapsed (oget console \"groupCollapsed\")\n              log (oget console \"log\")\n              group-end (oget console \"groupEnd\")]\n          (assert group-collapsed)\n          (assert log)\n          (assert group-end)\n          (.apply group-collapsed console header)\n          (.apply log console details)\n          (.call group-end console)))\n      (catch :default e\n        (.error console \"FATAL: report-internal-error! failed\" e)))))\n"],"mappings":";;;;AAKA,AAAA,AAAKA;AAIL,AAAA,AAAA,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAF;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AAAA,AAA8B;AAA9B,AAAA,AAAA,AAAAE;AAAA,AAAAC,AAAAC,AAAA,AAAA,AAAmC;AAAnC,AAAAD,AAAAC,AAAA,AAAA,AAA2C;AAA3C,AACE,AAAM,AAAQ,AAACM,AAAAA,AAAAA;AAAf,AACE,AAAA,AACE,AAAM,AAAQ,AAAI,AAAWE,AAASC,AACtB,AAAA,AAAI,AAAWA;AAAf,AAAA,AAAAC;AAAAA;;AAAkBD;;AAClBA;AAFhB,AAAA,AAAA,AAAA,AAGM,AAGY,AAAA,AAASE;AACrB,AAAY,AAAA,AAAA,AAAW,AAACC,AAAmB,AAAA,AAAIC,AAAQ,AAAA,AAAA,AAAUA;AACjE,AAAW,AAAI,AAAA,AAAA,AAAOC,AACTA,AACA,AAAA,AAAA,AAAA,AAAqDvB;AAVxE,AAWM,AAAawB,AAAYN,AAAEO;AAXjC,AAYE,AAAM,AAAgB,AAAA,AAAMC;AACtB,AAAI,AAAA,AAAMA;AACV,AAAU,AAAA,AAAMA;AAFtB,AAGE,AAAQC;AAAR;AAAA,AAAA,AAAA,AAAAV,AAAA;;;AACA,AAAQW;AAAR;AAAA,AAAA,AAAA,AAAAX,AAAA;;;AACA,AAAQY;AAAR;AAAA,AAAA,AAAA,AAAAZ,AAAA;;;AACA,AAAQU,AAAgBD,AAAQI;;AAChC,AAAQF,AAAIF,AAAQK;;AACpB,AAAOF,AAAUH;AArBvB,AAAAV,AAsBkB;AAtBlB,AAuBI,AAAA,AAAQU,AAA+CR;;;AAzB/D,AAAA,AAAAb,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAK,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC,AAAAH;;;AAAA","names":["devtools.reporter/issues-url","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","devtools.reporter/report-internal-error!","argseq__4648__auto__","p__14174","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__14179","cljs.core/first","seq14166","cljs.core/next","self__4628__auto__","G__14167","devtools.context/get-console","e14182","js/Error","e","or__4047__auto__","message","devtools.util/get-lib-info","context","footer","context-msg","footer-msg","console","group-collapsed","log","group-end","header","details"]}