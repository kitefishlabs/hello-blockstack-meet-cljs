{"version":3,"sources":["devtools/munging.cljs"],"sourcesContent":["(ns devtools.munging\n  \"This namespace implements various heuristics to map Javascript names back to corresponding ClojureScript names.\n  The functionality here heavily depends on observed ClojureScript compiler and runtime behaviour (fragile!).\n  Answers given by functions in this namespace cannot be perfect because generated Javascript naming schemes produced by\n  ClojureScript compiler were not designed with easy reversibility in mind. We recommend this functionality to be used for\n  presentation in the UI only. The goal here is to provide user with more familiar view of runtime state of her app\n  in most common cases (on best effort basis).\n\n  Our main weapons in this uneven fight are:\n    1. munged function names as they appear in Javascript (generated by ClojureScript)\n    2. we can also analyze function sources accessible via .toString\n    3. special cljs$core$IFn$_invoke protocol props generated for multi-arity functions\n\n  We can also cheat and look at runtime state of browser environment to determine some answers about namespaces.\n\n  This code can be used only in non-advanced builds!\n\n  If you discovered breakage or a new case which should be covered by this code, please open an issue:\n    https://github.com/binaryage/cljs-devtools/issues\"\n  (:refer-clojure :exclude [js-reserved?])\n  (:require-macros [devtools.munging :refer [get-fast-path-protocol-partitions-count\n                                             get-fast-path-protocols-lookup-table]]\n                   [devtools.oops :refer [oget ocall safe-call]])\n  (:require [clojure.string :as string]\n            [devtools.context :as context]\n            [goog.object :as gobj])\n  (:import [goog.string StringBuffer]))\n\n(declare collect-fn-arities)\n\n(def dollar-replacement \"~\ufe69~\")\n(def max-fixed-arity-to-scan 64)\n\n; -- helpers ----------------------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic get-global-scope []\n  (context/get-root))\n\n(defn js-reserved? [x]\n  ; js-reserved? is private as of ClojureScript 1.9.293\n  (if-let [js-reserved-fn (oget (get-global-scope) \"cljs\" \"core\" \"js_reserved_QMARK_\")]\n    (js-reserved-fn x)))\n\n(defn get-fn-source-safely [f]\n  (try\n    (if (js-in \"toString\" f)\n      (ocall f \"toString\")\n      \"\")\n    (catch :default _\n      \"\")))\n\n(defn get-fn-fixed-arity [f n]\n  (oget f (str \"cljs$core$IFn$_invoke$arity$\" n)))\n\n(defn get-fn-variadic-arity [f]\n  (oget f (str \"cljs$core$IFn$_invoke$arity$variadic\")))\n\n(defn get-fn-max-fixed-arity [f]\n  (oget f \"cljs$lang$maxFixedArity\"))\n\n(defn get-type-name [t]\n  (let [sb (StringBuffer.)\n        writer (StringBufferWriter. sb)]\n    (try\n      ; we cannot use (type->str f) because it does not work for defrecords as of v1.9.89\n      ; instead we rely on .cljs$lang$ctorPrWriter which is defined for both deftypes and defrecords\n      ; and it is used here: https://github.com/clojure/clojurescript/blob/cfbefad0b9f2ae9af92ebc2ec211c8472a884ddf/src/main/cljs/cljs/core.cljs#L9173\n      ; relevant JIRA ticket: http://dev.clojure.org/jira/browse/CLJS-1725\n      (ocall t \"cljs$lang$ctorPrWriter\" t writer)\n      (catch :default _\n        \"?\"))\n    (-flush writer)\n    (str sb)))\n\n(defn char-to-subscript\n  \"Given a character with a single digit converts it into a subscript character.\n  Zero chracter maps to unicode 'SUBSCRIPT ZERO' (U+2080).\"\n  [char]\n  {:pre [(string? char)\n         (= (count char) 1)]}\n  (let [char-code (ocall (js/String. char) \"charCodeAt\" 0)                                                                    ; this is an ugly trick to overcome a V8? bug, char string might not be a real string \"object\"\n        num-code (- char-code 48)\n        subscript-code (+ 0x2080 num-code)]\n    (ocall js/String \"fromCharCode\" subscript-code)))\n\n(defn make-subscript\n  \"Given a subscript number converts it into a string representation consisting of unicode subscript characters (digits).\"\n  [subscript]\n  {:pre [(number? subscript)]}\n  (string/join (map char-to-subscript (str subscript))))\n\n(defn char-to-superscript\n  \"Given a character with a single digit converts it into a superscript character.\n  Zero chracter maps to unicode 'SUPERSCRIPT ZERO' (U+2070).\"\n  [char]\n  {:pre [(string? char)\n         (= (count char) 1)]}\n  (let [char-code (ocall (js/String. char) \"charCodeAt\" 0)                                                                    ; this is an ugly trick to overcome a V8? bug, char string might not be a real string \"object\"\n        num-code (- char-code 48)\n        superscript-code (case num-code                                                                                       ; see https://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts\n                           1 0x00B9\n                           2 0x00B2\n                           3 0x00B3\n                           (+ 0x2070 num-code))]\n    (ocall js/String \"fromCharCode\" superscript-code)))\n\n(defn make-superscript\n  \"Given a superscript number converts it into a string representation consisting of unicode superscript characters (digits).\"\n  [superscript]\n  {:pre [(number? superscript)]}\n  (string/join (map char-to-superscript (str superscript))))\n\n; -- cljs naming conventions ------------------------------------------------------------------------------------------------\n\n(defn cljs-fn-name?\n  \"Given a Javascript name answers if the name was likely generated by ClojureScript.\n  We use a simple heuristic here:\n    The name must contain at least two separate dollars because we assume two-segment namespaces.\"\n  [munged-name]\n  (if (string? munged-name)\n    (some? (re-matches #\"^[^$]*\\$[^$]+\\$.*$\" munged-name))))\n\n(defn parse-fn-source\n  \"Given a function source code parses out [name args]. Note that both strings are still munged.\n  Suitable for further processing.\n\n  For exampe for input below the function will return [\\\"devtools_sample$core$hello\\\" \\\"name, unused_param\\\"]:\n\n  function devtools_sample$core$hello(name, unused_param){\n    return [cljs.core.str(\\\"hello, \\\"),cljs.core.str(name),cljs.core.str(\\\"!\\\")].join('');\n  }\n  \"\n  [fn-source]\n  (if-let [meat (second (re-find #\"function\\s(.*?)\\{\" fn-source))]\n    (if-let [match (re-find #\"(.*?)\\((.*)\\)\" meat)]\n      (rest match))))\n\n(defn trivial-fn-source? [fn-source]\n  {:pre [(string? fn-source)]}\n  (or (some? (re-matches #\"function\\s*\\(\\s*\\)\\s*\\{\\s*\\}\\s*\" fn-source))\n      (some? (re-matches #\"function.*\\(\\)\\s*\\{\\s*\\[native code\\]\\s*\\}\\s*\" fn-source))))\n\n(defn cljs-fn?\n  \"Given a Javascript function object returns true if the function looks like a ClojureScript function.\n\n  Uses various heuristics:\n    1. must be fn? (is javascript function or satisfies Fn and IFn protocols)\n    2. and name must be cljs-fn-name? (name can come from f.name or parsed out of function source)\n    3. or if anonymous function, must be non-trivial\"\n  [f]\n  (if (safe-call fn? false f)                                                                                                 ; calling fn? on window object could throw for some weird reason\n    (let [name (oget f name)]\n      (if-not (empty? name)\n        (cljs-fn-name? name)\n        (let [fn-source (get-fn-source-safely f)]\n          (let [[name] (parse-fn-source fn-source)]\n            (if-not (empty? name)\n              (cljs-fn-name? name)\n              (not (trivial-fn-source? fn-source)))))))))                                                                     ; we assume non-trivial anonymous functions to come from cljs\n\n; -- demunging --------------------------------------------------------------------------------------------------------------\n\n(defn dollar-preserving-demunge\n  \"Standard cljs.core/demunge is too agresive in replacing dollars.\n  This wrapper function works around it by leaving dollars intact.\"\n  [munged-name]\n  (-> munged-name\n      (string/replace \"$\" dollar-replacement)\n      (demunge)\n      (string/replace dollar-replacement \"$\")))\n\n(defn revert-reserved [s]\n  (or (if-let [m (re-matches #\"(.*)\\$\" s)]\n        (if (js-reserved? (second m))\n          (second m)))\n      s))\n\n(defn reserved-aware-demunge [munged-name]\n  (-> munged-name\n      (dollar-preserving-demunge)\n      (revert-reserved)))\n\n(defn proper-demunge [munged-name]\n  (reserved-aware-demunge munged-name))\n\n(defn proper-arg-demunge [munged-arg-name]\n  (-> munged-arg-name\n      (proper-demunge)\n      (string/replace #\"^-(.*)$\" \"_$1\")))                                                                                     ; leading dash was probably a leading underscore (convention)\n\n(defn proper-ns-demunge [munged-ns-name]\n  (-> munged-ns-name\n      (proper-demunge)\n      (string/replace \"$\" \".\")))\n\n(defn ns-exists? [ns-module-name]\n  {:pre [(string? ns-module-name)]}\n  (if-let [goog-namespaces (oget (get-global-scope) \"goog\" \"dependencies_\" \"nameToPath\")]\n    (some? (oget goog-namespaces ns-module-name))))\n\n(defn detect-namespace-prefix\n  \"Given a name broken into namespace parts returns [detected-ns remaining-parts],\n  where detected-ns is a string representing longest detected existing namespace and\n  remaining-parts is a vector of remaing input parts not included in the detected-ns concatenation.\n\n  For given input [\\\"cljs\\\" \\\"core\\\" \\\"first\\\"] returns [\\\"cljs.core\\\" [\\\"first\\\"]] (asumming cljs.core exists)\"\n  [tokens & [ns-detector]]\n  (let [effective-detector (or ns-detector ns-exists?)]\n    (loop [name-tokens []\n           remaining-tokens tokens]\n      (if (empty? remaining-tokens)\n        [\"\" name-tokens]\n        (let [ns-name (string/join \".\" remaining-tokens)]\n          (if (effective-detector ns-name)\n            [ns-name name-tokens]\n            (recur (concat [(last remaining-tokens)] name-tokens) (butlast remaining-tokens))))))))\n\n(defn normalize-arity [arity-tokens]\n  (if-not (empty? arity-tokens)\n    (let [arity (first arity-tokens)]\n      (case arity\n        \"variadic\" arity\n        (js/parseInt arity 10)))))\n\n(defn strip-arity [tokens]\n  (let [[prefix-tokens arity-tokens] (split-with #(not= % \"arity\") tokens)]\n    [prefix-tokens (normalize-arity (rest arity-tokens))]))\n\n(defn parse-protocol [tokens detector]\n  (loop [remaining-tokens tokens\n         name-tokens []]\n    (if (empty? remaining-tokens)\n      [name-tokens]\n      (let [[protocol-ns name-and-method-tokens] (detect-namespace-prefix remaining-tokens detector)]\n        (if (empty? protocol-ns)\n          (recur (rest remaining-tokens) (conj name-tokens (first remaining-tokens)))\n          [name-tokens protocol-ns (first name-and-method-tokens) (rest name-and-method-tokens)])))))                         ; we assume protocol names are always a single-token\n\n(defn break-munged-name\n  \"Given a munged-name from Javascript lands attempts to break it into:\n  [fn-ns fn-name protocol-ns protocol-name protocol-method arity].\n\n  Protocol and arity elements are optional. Function elements are always present or \\\"\\\".\n\n  examples for input:\n    cljs$core$rest => ['cljs.core', 'rest']\n    cljs.core.reduce$cljs$core$IFn$_invoke$arity$3 => ['cljs.core' 'reduce' 'cljs.core' 'IFn' '_invoke' 3]\"\n  ([munged-name]\n   (break-munged-name munged-name nil))\n  ([munged-name ns-detector]\n   (if (empty? munged-name)\n     [\"\" \"\"]\n     (let [effective-detector (or ns-detector ns-exists?)\n           tokens (vec (.split munged-name #\"[$.]\"))\n           [tokens arity] (strip-arity tokens)\n           [fn-ns tokens] (detect-namespace-prefix tokens effective-detector)\n           ; remianing parts contains function name,\n           ; but may be optionally followed by protocol namespace, protocol name and protocol method\n           [fn-name-tokens protocol-ns protocol-name protocol-method-tokens] (parse-protocol tokens effective-detector)\n           fn-name (string/join \"$\" fn-name-tokens)\n           protocol-method (if protocol-method-tokens (string/join \"$\" protocol-method-tokens))]\n       [fn-ns fn-name protocol-ns protocol-name protocol-method arity]))))\n\n(defn break-and-demunge-name\n  \"Given a munged-name from Javascript lands attempts to break it into a namespace part and remaining short name.\n  Then applies appropriate demunging on them and returns ClojureScript versions of the names.\"\n  ([munged-name]\n   (break-and-demunge-name munged-name nil))\n  ([munged-name ns-detector]\n   (let [result (break-munged-name munged-name ns-detector)\n         [munged-ns munged-name munged-protocol-ns munged-protocol-name munged-protocol-method arity] result]\n     [(proper-ns-demunge munged-ns)\n      (proper-demunge munged-name)\n      (if munged-protocol-ns (proper-ns-demunge munged-protocol-ns))\n      (if munged-protocol-name (proper-demunge munged-protocol-name))\n      (if munged-protocol-method (proper-demunge munged-protocol-method))\n      arity])))\n\n; -- fn info ----------------------------------------------------------------------------------------------------------------\n\n(defn parse-fn-source-info\n  \"Given function source code tries to retrieve [ns name & args] on best effort basis, where\n  ns is demunged namespace part of the function name (or \\\"\\\" if namespace cannot be detected)\n  name is demunged short name (or \\\"\\\" if function is anonymous or name cannot be retrieved)\n  args is optional number of demunged argument names.\n\n  Please note that this function always returns a vector with something. In worst cases [\\\"\\\" \\\"\\\"].\n  \"\n  [fn-source]\n  (if-let [[munged-name args] (parse-fn-source fn-source)]\n    (let [[ns name] (break-and-demunge-name munged-name)\n          demunged-args (map (comp proper-arg-demunge string/trim) (string/split args #\",\"))]\n      (concat [ns name] demunged-args))\n    [\"\" \"\"]))\n\n(defn parse-fn-info\n  \"Given Javascript function object tries to retrieve [ns name & args] as in parse-fn-source-info (on best effort basis).\"\n  [f]\n  (let [fn-source (get-fn-source-safely f)]\n    (parse-fn-source-info fn-source)))\n\n(defn parse-fn-info-deep\n  \"Given a Javascript function object tries to retrieve [ns name & args] as in parse-fn-info (on best effort basis).\n\n  The difference from parse-fn-info is that this function prefers to read args from arities if available.\n  It recurses arbitrary deep following IFn protocol leads.\n\n  If we hit multi-arity situation in leaf, we don't attempt to list arguments and return ::multi-arity placeholder instead.\n\n  The reason for reading arities is that it gives more accurate parameter names in some cases.\n  We observed that variadic functions don't always contain original parameter names, but individual IFn arity functions do.\"\n  [f]\n  (let [fn-info (parse-fn-info f)\n        arities (collect-fn-arities f)]\n    (if (some? arities)\n      (if (> (count arities) 1)\n        (concat (take 2 fn-info) ::multi-arity)\n        (concat (take 2 fn-info) (drop 2 (parse-fn-info-deep (second (first arities))))))\n      fn-info)))\n\n; -- support for human-readable names ---------------------------------------------------------------------------------------\n\n(defn find-index-of-human-prefix\n  \"Given a demunged ClojureScript parameter name. Tries to detect human readable part and returns the index where it ends.\n  Returns nil if no prefix can be detected.\n\n  The idea is to convert macro-generated parameters and other generated names to more friendly names.\n  We observed that param names generated by gensym have prefix followed by big numbers.\n  Other generated names contain two dashes after prefix (originally probably using underscores).\"\n  [name]\n  (let [sep-start (.indexOf name \"--\")\n        num-prefix (count (second (re-find #\"(.*?)\\d{2,}\" name)))\n        finds (filter pos? [sep-start num-prefix])]\n    (if-not (empty? finds)\n      (apply min finds))))\n\n(defn humanize-name\n  \"Given a name and intermediate state. Convert name to a human readable version by keeping human readable prefix with\n  optional subscribt postfix and store it in ::result. Subscript number is picked based on state. State keeps track of\n  previously assigned subscripts. Returns a new state.\"\n  [state name]\n  (let [index (find-index-of-human-prefix name)\n        prefix (if (> index 0) (.substring name 0 index) name)]\n    (if-let [subscript (get state prefix)]\n      (-> state\n          (update ::result conj (str prefix (make-subscript subscript)))\n          (update prefix inc))\n      (-> state\n          (update ::result conj prefix)\n          (assoc prefix 2)))))\n\n(defn humanize-names\n  \"Given a list of names, returns a list of human-readable versions of those names.\n  It detects human-readable prefix using a simple heuristics. When names repeat it assigns simple subscripts starting with 2.\n  Subscripts are assigned left-to-right.\n\n  Given [\\\"p--a\\\" \\\"p--b\\\" \\\"x\\\" \\\"p--c\\\"] returns [\\\"p\\\" \\\"p\u2082\\\" \\\"x\\\" \\\"p\u2083\\\"]\"\n  [names]\n  (with-meta (::result (reduce humanize-name {::result []} names)) (meta names)))\n\n; -- arities ----------------------------------------------------------------------------------------------------------------\n\n(defn collect-fn-fixed-arities [f max-arity]\n  (loop [arity 0\n         collection {}]\n    (if (> arity max-arity)\n      collection\n      (recur (inc arity) (if-let [arity-fn (get-fn-fixed-arity f arity)]\n                           (assoc collection arity arity-fn)\n                           collection)))))\n\n(defn collect-fn-variadic-arities [f]\n  (if-let [variadic-arity (get-fn-variadic-arity f)]\n    {::variadic variadic-arity}))\n\n(defn review-arity [[arity arity-fn]]\n  (let [sub-arities (collect-fn-arities arity-fn)]\n    (if (::variadic sub-arities)\n      [::variadic arity-fn]\n      [arity arity-fn])))\n\n(defn review-arities\n  \"Some arities can be marked as fixed arity but in fact point to a variadic-arity function. We want to detect this case\n  and turn such improperly categorized arities to ::variadic.\"\n  [arities]\n  (if (::variadic arities)\n    arities\n    (into {} (map review-arity arities))))\n\n(defn collect-fn-arities\n  \"Given a Javascript function object, tries to inspect known arity properties generated by ClojureScript compiler and\n  collects all available arity functions into a map. Arities are keyed by arity count and variadic arity gets ::variadic key.\"\n  [f]\n  (let [max-fixed-arity (get-fn-max-fixed-arity f)\n        fixed-arities (collect-fn-fixed-arities f (or max-fixed-arity max-fixed-arity-to-scan))                               ; we cannot rely on cljs$lang$maxFixedArity when people implement IFn protocol by hand\n        variadic-arities (collect-fn-variadic-arities f)\n        arities (review-arities (merge fixed-arities variadic-arities))]\n    (if-not (empty? arities)\n      arities)))\n\n; -- args lists -------------------------------------------------------------------------------------------------------------\n\n(defn arity-keywords-comparator\n  \"::variadic goes last, other keywords compare by name.\"\n  [x y]\n  (cond\n    (= ::variadic x) 1\n    (= ::variadic y) -1\n    :else (compare (name x) (name y))))\n\n(defn arities-key-comparator\n  \"numbers go first (ordered), then keywords (ordered by name), and then ::variadic sticks last\"\n  [x y]\n  (let [kx? (keyword? x)\n        ky? (keyword? y)]\n    (cond\n      (and kx? ky?) (arity-keywords-comparator x y)\n      kx? 1\n      ky? -1\n      :else (compare x y))))\n\n(defn arities-to-args-lists*\n  [arities]\n  (let [sorted-keys (sort arities-key-comparator (keys arities))\n        sorted-fns (map #(get arities %) sorted-keys)\n        sorted-infos (map parse-fn-info-deep sorted-fns)\n        sorted-args-lists (map #(drop 2 %) sorted-infos)]\n    (if (= (last sorted-keys) ::variadic)\n      (concat (butlast sorted-args-lists) [(vary-meta (last sorted-args-lists) assoc ::variadic true)])\n      sorted-args-lists)))\n\n(defn arities-to-args-lists\n  \"Given a map of arity functions. Tries to parse individual functions and prepare an arguments list for each arity.\n  Returned list of arguments list is sorted by arity count, variadic arity goes last if available.\n\n  The function also optionally humanizes argument names in each arguments list if requested.\"\n  [arities & [humanize?]]\n  (let [args-lists (arities-to-args-lists* arities)]\n    (if humanize?\n      (map humanize-names args-lists)\n      args-lists)))\n\n; -- UI presentation --------------------------------------------------------------------------------------------------------\n\n(defn args-lists-to-strings\n  \"Converts a list of arguments lists into a list of strings suitable for UI presentation.\"\n  [args-lists spacer-symbol multi-arity-symbol rest-symbol]\n  (let [string-mapper (fn [arg]\n                        (case arg\n                          ::multi-arity multi-arity-symbol\n                          arg))\n        printer (fn [args-list]\n                  (let [variadic? (::variadic (meta args-list))\n                        args-strings (map string-mapper args-list)]\n                    (str (string/join spacer-symbol (butlast args-strings))\n                         (if variadic? rest-symbol spacer-symbol)\n                         (last args-strings))))]\n    (->> args-lists\n         (map printer)\n         (map string/trim))))\n\n(defn extract-arities [f humanize? spacer-symbol multi-arity-symbol rest-symbol]\n  (-> (or (collect-fn-arities f) {:naked f})\n      (arities-to-args-lists humanize?)\n      (args-lists-to-strings spacer-symbol multi-arity-symbol rest-symbol)))\n\n(defn common-protocol? [protocol-ns protocol-name]\n  (and (= protocol-ns \"cljs.core\")\n       (= protocol-name \"IFn\")))\n\n(defn present-fn-part [fn-ns fn-name include-ns?]\n  (str\n    (if (and include-ns? (not (empty? fn-ns))) (str fn-ns \"/\"))\n    fn-name))\n\n(defn present-protocol-part [protocol-ns protocol-name protocol-method include-protocol-ns?]\n  (str (if include-protocol-ns? protocol-ns)\n       (if-not (empty? protocol-name) (str (if include-protocol-ns? \".\") protocol-name))\n       (if-not (empty? protocol-method) (str (if (or include-protocol-ns? (not (empty? protocol-name))) \":\")\n                                             protocol-method))))\n\n(defn present-function-name\n  \"Given javascript function name tries to present it as plain string for display in UI on best effort basis.\"\n  [munged-name options]\n  (let [{:keys [include-ns? include-protocol-ns? silence-common-protocols? ns-detector]} options\n        [fn-ns fn-name protocol-ns protocol-name protocol-method arity] (break-and-demunge-name munged-name ns-detector)\n        arity-str (if (some? arity)\n                    (if (= arity \"variadic\")\n                      \"\\u207F\"                                                                                                ; 'SUPERSCRIPT LATIN SMALL LETTER N' (U+207F)\n                      (make-superscript arity)))]\n    (if (empty? fn-name)\n      munged-name\n      (let [fn-part (present-fn-part fn-ns fn-name include-ns?)\n            protocol-part (if (and protocol-ns\n                                   (not (and silence-common-protocols?\n                                             (common-protocol? protocol-ns protocol-name))))\n                            (present-protocol-part protocol-ns protocol-name protocol-method include-protocol-ns?))]\n        (str\n          (or protocol-part fn-part)\n          arity-str\n          (if protocol-part (str \" (\" fn-part \")\")))))))\n\n; -- types ------------------------------------------------------------------------------------------------------------------\n\n(defn get-basis [f]\n  (ocall f \"getBasis\"))\n\n(defn parse-constructor-info\n  \"Given a Javascript constructor function tries to retrieve [ns name basis]. Returns nil if not a cljs type.\"\n  [f]\n  (if (and (goog/isObject f) (.-cljs$lang$type f))\n    (let [type-name (get-type-name f)\n          parts (.split type-name #\"/\")\n          basis (safe-call get-basis [] f)]\n      (assert (<= (count parts) 2))\n      (while (< (count parts) 2)\n        (.unshift parts nil))\n      (conj (vec parts) basis))))\n\n; -- protocols --------------------------------------------------------------------------------------------------------------\n\n(defn protocol-path [protocol-selector]\n  (string/split protocol-selector #\"\\.\"))\n\n(defn get-protocol-object [protocol-selector]\n  (loop [obj (get-global-scope)\n         path (protocol-path protocol-selector)]\n    (if (empty? path)\n      obj\n      (if (goog/isObject obj)\n        (recur (oget obj (first path)) (rest path))))))\n\n(defn protocol-exists? [protocol-selector]\n  (some? (get-protocol-object protocol-selector)))\n\n(defn get-protocol-selector [key]\n  (if-let [m (re-matches #\"(.*)\\$$\" key)]\n    (if-not (string/includes? key \"cljs$lang$protocol_mask$partition\")\n      (let [protocol-selector (string/replace (second m) \"$\" \".\")]\n        (if (protocol-exists? protocol-selector)\n          protocol-selector)))))\n\n(defn demunge-protocol-selector [protocol-selector]\n  (let [parts (map proper-demunge (protocol-path protocol-selector))\n        _ (assert (>= (count parts) 2)\n                  (str \"expected protocol selector to contain at least one dot: '\" protocol-selector \"'\"))\n        ns (string/join \".\" (butlast parts))\n        name (last parts)]\n    [ns name protocol-selector]))\n\n(def fast-path-protocols-lookup-table (delay (get-fast-path-protocols-lookup-table)))\n\n(defn key-for-protocol-partition [partition]\n  (str \"cljs$lang$protocol_mask$partition\" partition \"$\"))\n\n(defn scan-fast-path-protocols-partition [obj partition]\n  {:pre [(number? partition)]}\n  (let [partition-key (key-for-protocol-partition partition)\n        partition-bits (or (oget obj partition-key) 0)]\n    (if (> partition-bits 0)\n      (let [lookup-table (get @fast-path-protocols-lookup-table partition)\n            _ (assert (map? lookup-table)\n                      (str \"fast-path-protocols-lookup-table does not contain lookup table for partition \" partition))\n            * (fn [accum [bit protocol]]\n                (if (zero? (bit-and partition-bits bit))\n                  accum\n                  (conj accum protocol)))]\n        (reduce * [] lookup-table)))))\n\n(defn scan-fast-path-protocols [obj]\n  (apply concat (map (partial scan-fast-path-protocols-partition obj) (range (get-fast-path-protocol-partitions-count)))))\n\n(defn scan-slow-path-protocols [obj]\n  (let [keys (gobj/getKeys obj)\n        selectors (keep get-protocol-selector keys)]\n    (map demunge-protocol-selector selectors)))\n\n(defn make-protocol-descriptor [ns name selector fast?]\n  {:ns       ns\n   :name     name\n   :selector selector\n   :fast?    fast?})\n\n(defn convert-to-protocol-descriptor [fast? [ns name selector]]\n  (make-protocol-descriptor ns name selector fast?))\n\n(defn protocol-descriptors-comparator [a b]\n  (compare (:name a) (:name b)))\n\n(defn scan-protocols [obj]\n  (let [fast-path-protocols (map (partial convert-to-protocol-descriptor true) (scan-fast-path-protocols obj))\n        slow-path-protocols (map (partial convert-to-protocol-descriptor false) (scan-slow-path-protocols obj))\n        all-protocols (concat fast-path-protocols slow-path-protocols)]\n    (sort protocol-descriptors-comparator all-protocols)))\n\n(defn collect-protocol-methods [obj protocol-selector]\n  (let [key-prefix (string/replace protocol-selector #\"\\.\" \"\\\\$\")\n        pattern (re-pattern (str \"^\" key-prefix \"\\\\$(.*)\\\\$arity\\\\$(\\\\d+)$\"))\n        all-keys (gobj/getKeys obj)\n        matches (keep (partial re-matches pattern) all-keys)\n        methods (group-by second matches)\n        match-to-arity (fn [match]\n                         (let [arity (nth match 2)]\n                           (js/parseInt arity 10)))\n        match-arity-comparator (fn [a b]\n                                 (compare (match-to-arity a) (match-to-arity b)))\n        post-process (fn [[munged-name matches]]\n                       (let [name (proper-demunge munged-name)\n                             sorted-matches (sort match-arity-comparator matches)\n                             sorted-fns (map #(oget obj (first %)) sorted-matches)]\n                         [name sorted-fns]))\n        by-name-comparator (fn [a b]\n                             (compare (first a) (first b)))]\n    ; TODO: he we could be able to retrieve parameter lists from protocol definition methods\n    ;       parameter names there are usually more consistent than parameters picked by protocol implementors\n    (sort by-name-comparator (map post-process methods))))\n"],"mappings":"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","names":["devtools.munging/dollar-replacement","devtools.munging/max-fixed-arity-to-scan","devtools.munging/get-global-scope","devtools.context/get-root","devtools.munging/js-reserved?","temp__5455__auto__","o12872","o12873","js-reserved-fn","x","devtools.munging/get-fn-source-safely","e12883","f","o__12052__auto__","devtools.munging/get-fn-fixed-arity","n","devtools.munging/get-fn-variadic-arity","devtools.munging/get-fn-max-fixed-arity","devtools.munging/get-type-name","goog.string/StringBuffer","cljs.core/StringBufferWriter","sb","e12896","t","writer","js/Error","devtools.munging/char-to-subscript","char","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","js/String","char-code","num-code","subscript-code","devtools.munging/make-subscript","subscript","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$2","devtools.munging/char-to-superscript","G__12912","superscript-code","devtools.munging/make-superscript","superscript","devtools.munging/cljs-fn-name?","munged-name","cljs.core/re-matches","devtools.munging/parse-fn-source","cljs.core/second","cljs.core/re-find","fn-source","meat","cljs.core/rest","match","devtools.munging/trivial-fn-source?","devtools.munging/cljs-fn?","e12925","cljs.core/fn?","cljs.core/name","cljs.core/empty?","name","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__12926","devtools.munging/dollar-preserving-demunge","clojure.string/replace","cljs.core/demunge","devtools.munging/revert-reserved","or__4047__auto__","s","m","devtools.munging/reserved-aware-demunge","devtools.munging/proper-demunge","devtools.munging/proper-arg-demunge","munged-arg-name","devtools.munging/proper-ns-demunge","munged-ns-name","devtools.munging/ns-exists?","ns-module-name","o12942","o12943","goog-namespaces","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","devtools.munging/detect-namespace-prefix","argseq__4648__auto__","p__12946","vec__12947","cljs.core/first","seq12944","cljs.core/next","self__4628__auto__","G__12945","ns-detector","tokens","remaining-tokens","name-tokens","clojure.string.join.cljs$core$IFn$_invoke$arity$2","effective-detector","ns-name","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/last","cljs.core/butlast","devtools.munging/normalize-arity","arity-tokens","G__12953","arity","js/parseInt","devtools.munging/strip-arity","vec__12955","cljs.core/split-with","p1__12954#","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","prefix-tokens","devtools.munging/parse-protocol","vec__12967","devtools.munging.detect_namespace_prefix.cljs$core$IFn$_invoke$arity$variadic","detector","protocol-ns","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","name-and-method-tokens","G__13001","devtools.munging/break-munged-name","devtools.munging.break_munged_name.cljs$core$IFn$_invoke$arity$2","vec__13004","vec__13008","vec__13011","cljs.core/vec","fn-name-tokens","protocol-method-tokens","fn-ns","fn-name","protocol-name","protocol-method","G__13024","devtools.munging/break-and-demunge-name","devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$2","vec__13031","result","munged-ns","munged-protocol-ns","munged-protocol-name","munged-protocol-method","devtools.munging/parse-fn-source-info","vec__13034","vec__13037","devtools.munging.break_and_demunge_name.cljs$core$IFn$_invoke$arity$1","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","clojure.string/trim","clojure.string.split.cljs$core$IFn$_invoke$arity$2","args","ns","demunged-args","devtools.munging/parse-fn-info","devtools.munging/parse-fn-info-deep","devtools.munging/collect-fn-arities","arities","cljs.core.take.cljs$core$IFn$_invoke$arity$2","fn-info","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","G__13043","devtools.munging/find-index-of-human-prefix","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core/pos?","sep-start","num-prefix","finds","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/min","devtools.munging/humanize-name","index","cljs.core.get.cljs$core$IFn$_invoke$arity$2","state","prefix","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/inc","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","devtools.munging/humanize-names","cljs.core/with-meta","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","names","cljs.core/meta","devtools.munging/collect-fn-fixed-arities","max-arity","collection","arity-fn","devtools.munging/collect-fn-variadic-arities","variadic-arity","p__13047","vec__13049","devtools.munging/review-arity","sub-arities","devtools.munging/review-arities","cljs.core.into.cljs$core$IFn$_invoke$arity$2","max-fixed-arity","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","fixed-arities","variadic-arities","devtools.munging/arity-keywords-comparator","y","cljs.core/compare","devtools.munging/arities-key-comparator","cljs.core/Keyword","kx?","ky?","devtools.munging/arities-to-args-lists*","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","cljs.core/keys","p1__13063#","sorted-keys","sorted-fns","p1__13064#","sorted-infos","sorted-args-lists","cljs.core.vary_meta.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","devtools.munging/arities-to-args-lists","p__13070","vec__13072","seq13068","G__13069","humanize?","args-lists","devtools.munging/args-lists-to-strings","G__13079","arg","multi-arity-symbol","args-list","string-mapper","spacer-symbol","args-strings","variadic?","rest-symbol","printer","devtools.munging/extract-arities","devtools.munging.arities_to_args_lists.cljs$core$IFn$_invoke$arity$variadic","devtools.munging/common-protocol?","devtools.munging/present-fn-part","and__4036__auto__","include-ns?","devtools.munging/present-protocol-part","include-protocol-ns?","devtools.munging/present-function-name","map__13084","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","vec__13085","options","cljs.core/not","silence-common-protocols?","protocol-part","fn-part","arity-str","devtools.munging/get-basis","devtools.munging/parse-constructor-info","goog/isObject","type-name","e13092","parts","basis","devtools.munging/protocol-path","protocol-selector","devtools.munging/get-protocol-object","path","obj","devtools.munging/protocol-exists?","devtools.munging/get-protocol-selector","key","clojure.string/includes?","devtools.munging/demunge-protocol-selector","devtools.munging/fast-path-protocols-lookup-table","cljs.core/Delay","devtools.munging/key-for-protocol-partition","partition","devtools.munging/scan-fast-path-protocols-partition","partition-key","partition-bits","cljs.core/deref","cljs.core/map?","lookup-table","p__13104","vec__13105","bit","accum","protocol","*","devtools.munging/scan-fast-path-protocols","cljs.core/concat","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core.range.cljs$core$IFn$_invoke$arity$1","devtools.munging/scan-slow-path-protocols","goog.object/getKeys","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","keys","selectors","devtools.munging/make-protocol-descriptor","selector","fast?","p__13117","vec__13118","devtools.munging/convert-to-protocol-descriptor","devtools.munging/protocol-descriptors-comparator","a","b","devtools.munging/scan-protocols","fast-path-protocols","slow-path-protocols","all-protocols","devtools.munging/collect-protocol-methods","cljs.core/re-pattern","key-prefix","pattern","all-keys","cljs.core/group-by","matches","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","match-to-arity","p__13123","vec__13124","match-arity-comparator","p1__13122#","sorted-matches","by-name-comparator","post-process","methods"]}