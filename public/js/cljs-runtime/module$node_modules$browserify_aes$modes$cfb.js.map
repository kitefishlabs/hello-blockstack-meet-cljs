{
"version":3,
"file":"module$node_modules$browserify_aes$modes$cfb.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAI9HC,QAASA,aAAa,CAACC,IAAD,CAAOC,IAAP,CAAaC,OAAb,CAAsB,CAC1C,IAAIC,IAAMF,IAAAG,OAAV,CACIC,IAAMC,GAAA,CAAIL,IAAJ,CAAUD,IAAAO,OAAV,CACVP,KAAAO,OAAA,CAAcP,IAAAO,OAAAC,MAAA,CAAkBL,GAAlB,CACdH,KAAAS,MAAA,CAAaC,MAAAC,OAAA,CAAc,CAACX,IAAAS,MAAD,CAAaP,OAAA,CAAUD,IAAV,CAAiBI,GAA9B,CAAd,CACb,OAAOA,IALmC,CAH5C,IAAIK,OAASf,OAAA,CAAQ,uCAAR,CAAAe,OAAb,CACIJ,IAAMX,OAAA,CAAQ,sCAAR,CAUVE,QAAAe,QAAA,CAAkBC,QAAS,CAACb,IAAD,CAAOC,IAAP,CAAaC,OAAb,CAAsB,CAI/C,IAHA,IAAIG,IAAMK,MAAAI,YAAA,CAAmB,CAAnB,CAAV;AACIX,GAEJ,CAAOF,IAAAG,OAAP,CAAA,CAME,GAL2B,CAKvB,GALAJ,IAAAO,OAAAH,OAKA,GAJFJ,IAAAO,OACA,CADcP,IAAAe,QAAAC,aAAA,CAA0BhB,IAAAS,MAA1B,CACd,CAAAT,IAAAS,MAAA,CAAaC,MAAAI,YAAA,CAAmB,CAAnB,CAGX,EAAAd,IAAAO,OAAAH,OAAA,EAAsBH,IAAAG,OAA1B,CACED,GAEA,CAFMH,IAAAO,OAAAH,OAEN,CADAC,GACA,CADMK,MAAAC,OAAA,CAAc,CAACN,GAAD,CAAMN,YAAA,CAAaC,IAAb,CAAmBC,IAAAO,MAAA,CAAW,CAAX,CAAcL,GAAd,CAAnB,CAAuCD,OAAvC,CAAN,CAAd,CACN,CAAAD,IAAA,CAAOA,IAAAO,MAAA,CAAWL,GAAX,CAHT,KAIO,CACLE,GAAA,CAAMK,MAAAC,OAAA,CAAc,CAACN,GAAD,CAAMN,YAAA,CAAaC,IAAb,CAAmBC,IAAnB,CAAyBC,OAAzB,CAAN,CAAd,CACN,MAFK,CAMT,MAAOG,IApBwC,CAZ6E;",
"sources":["node_modules/browserify-aes/modes/cfb.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$browserify_aes$modes$cfb\"] = function(global,process,require,module,exports,shadow$shims) {\nvar Buffer = require('safe-buffer').Buffer\nvar xor = require('buffer-xor')\n\nfunction encryptStart (self, data, decrypt) {\n  var len = data.length\n  var out = xor(data, self._cache)\n  self._cache = self._cache.slice(len)\n  self._prev = Buffer.concat([self._prev, decrypt ? data : out])\n  return out\n}\n\nexports.encrypt = function (self, data, decrypt) {\n  var out = Buffer.allocUnsafe(0)\n  var len\n\n  while (data.length) {\n    if (self._cache.length === 0) {\n      self._cache = self._cipher.encryptBlock(self._prev)\n      self._prev = Buffer.allocUnsafe(0)\n    }\n\n    if (self._cache.length <= data.length) {\n      len = self._cache.length\n      out = Buffer.concat([out, encryptStart(self, data.slice(0, len), decrypt)])\n      data = data.slice(len)\n    } else {\n      out = Buffer.concat([out, encryptStart(self, data, decrypt)])\n      break\n    }\n  }\n\n  return out\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","encryptStart","self","data","decrypt","len","length","out","xor","_cache","slice","_prev","Buffer","concat","encrypt","exports.encrypt","allocUnsafe","_cipher","encryptBlock"]
}
