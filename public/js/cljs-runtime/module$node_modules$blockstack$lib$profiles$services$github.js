shadow$provide.module$node_modules$blockstack$lib$profiles$services$github=function(global,process,require,module,exports,shadow$shims){function _inherits(subClass,superClass){if("function"!==typeof superClass&&null!==superClass)throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:!1,writable:!0,configurable:!0}});superClass&&(Object.setPrototypeOf?
Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass)}Object.defineProperty(exports,"__esModule",{value:!0});exports.Github=void 0;var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||!1;descriptor.configurable=!0;"value"in descriptor&&(descriptor.writable=!0);Object.defineProperty(target,descriptor.key,descriptor)}}return function(Constructor,protoProps,staticProps){protoProps&&
defineProperties(Constructor.prototype,protoProps);staticProps&&defineProperties(Constructor,staticProps);return Constructor}}(),_get=function get(object,property,receiver){null===object&&(object=Function.prototype);var desc=Object.getOwnPropertyDescriptor(object,property);if(void 0===desc){if(object=Object.getPrototypeOf(object),null!==object)return get(object,property,receiver)}else{if("value"in desc)return desc.value;property=desc.get;return void 0===property?void 0:property.call(receiver)}};global=
function(_Service){function Github(){if(!(this instanceof Github))throw new TypeError("Cannot call a class as a function");var call=(Github.__proto__||Object.getPrototypeOf(Github)).apply(this,arguments);if(!this)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!call||"object"!==typeof call&&"function"!==typeof call?this:call}_inherits(Github,_Service);_createClass(Github,null,[{key:"getBaseUrls",value:function(){return["https://gist.github.com/","http://gist.github.com",
"gist.github.com"]}},{key:"getProofUrl",value:function(proof){var baseUrls=this.getBaseUrls(),proofUrl=proof.proof_url.toLowerCase();proofUrl=_get(Github.__proto__||Object.getPrototypeOf(Github),"prefixScheme",this).call(this,proofUrl);for(var i=0;i<baseUrls.length;i++){var requiredPrefix=(""+baseUrls[i]+proof.identifier).toLowerCase();if(proofUrl.startsWith(requiredPrefix))return proof=proofUrl.endsWith("/")?"raw":"/raw",""+proofUrl+proof}throw Error("Proof url "+proof.proof_url+" is not valid for service "+
proof.service);}}]);return Github}(require("module$node_modules$blockstack$lib$profiles$services$service").Service);exports.Github=global}
//# sourceMappingURL=module$node_modules$blockstack$lib$profiles$services$github.js.map
