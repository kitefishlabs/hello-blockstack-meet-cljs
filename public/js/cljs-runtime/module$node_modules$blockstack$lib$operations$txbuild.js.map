{
"version":3,
"file":"module$node_modules$blockstack$lib$operations$txbuild.js",
"lineCount":49,
"mappings":"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",
"sources":["node_modules/blockstack/lib/operations/txbuild.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockstack$lib$operations$txbuild\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.transactions = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar _bitcoinjsLib = require('bitcoinjs-lib');\n\nvar _bitcoinjsLib2 = _interopRequireDefault(_bitcoinjsLib);\n\nvar _bigi = require('bigi');\n\nvar _bigi2 = _interopRequireDefault(_bigi);\n\nvar _utils = require('./utils');\n\nvar _skeletons = require('./skeletons');\n\nvar _config = require('../config');\n\nvar _errors = require('../errors');\n\nvar _signers = require('./signers');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar dummyConsensusHash = 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa';\nvar dummyZonefileHash = 'ffffffffffffffffffffffffffffffffffffffff';\n\nfunction addOwnerInput(utxos, ownerAddress, txB) {\n  var addChangeOut = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n  // add an owner UTXO and a change out.\n  if (utxos.length <= 0) {\n    throw new Error('Owner has no UTXOs for UPDATE.');\n  }\n\n  utxos.sort(function (a, b) {\n    return a.value - b.value;\n  });\n  var ownerUTXO = utxos[0];\n  var ownerInput = txB.addInput(ownerUTXO.tx_hash, ownerUTXO.tx_output_n);\n  if (addChangeOut) {\n    txB.addOutput(ownerAddress, ownerUTXO.value);\n  }\n  return { index: ownerInput, value: ownerUTXO.value };\n}\n\nfunction fundTransaction(txB, paymentAddress, utxos, feeRate, inAmounts) {\n  var changeIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n\n  // change index for the payer.\n  if (changeIndex === null) {\n    changeIndex = txB.addOutput(paymentAddress, _utils.DUST_MINIMUM);\n  }\n  // fund the transaction fee.\n  var txFee = (0, _utils.estimateTXBytes)(txB, 0, 0) * feeRate;\n  var outAmounts = (0, _utils.sumOutputValues)(txB);\n  var change = (0, _utils.addUTXOsToFund)(txB, utxos, txFee + outAmounts - inAmounts, feeRate);\n  txB.__tx.outs[changeIndex].value += change;\n  return txB;\n}\n\nfunction returnTransactionHex(txB) {\n  var buildIncomplete = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n  if (buildIncomplete) {\n    return txB.buildIncomplete().toHex();\n  } else {\n    return txB.build().toHex();\n  }\n}\n\nfunction getTransactionSigner(input) {\n  if (typeof input === 'string') {\n    return _signers.PubkeyHashSigner.fromHexString(input);\n  } else {\n    return input;\n  }\n}\n\n/**\n * Estimates cost of a preorder transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to preorder\n * @param {String} destinationAddress - the address to receive the name (this\n *    must be passed as the 'registrationAddress' in the register transaction)\n * @param {String} paymentAddress - the address funding the preorder\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address.\n * @returns {Promise} - a promise which resolves to the satoshi cost to fund\n *    the preorder. This includes a 5500 satoshi dust output for the preorder.\n *    Even though this is a change output, the payer must supply enough funds\n *    to generate this output, so we include it in the cost.\n * @private\n */\nfunction estimatePreorder(fullyQualifiedName, destinationAddress, paymentAddress) {\n  var paymentUtxos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var network = _config.config.network;\n  var preorderPromise = network.getNamePrice(fullyQualifiedName).then(function (namePrice) {\n    return (0, _skeletons.makePreorderSkeleton)(fullyQualifiedName, dummyConsensusHash, paymentAddress, network.getDefaultBurnAddress(), namePrice, destinationAddress);\n  });\n\n  return Promise.all([network.getFeeRate(), preorderPromise]).then(function (_ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        feeRate = _ref2[0],\n        preorderTX = _ref2[1];\n\n    var outputsValue = (0, _utils.sumOutputValues)(preorderTX);\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(preorderTX, paymentUtxos, 0);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates cost of a register transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to register\n * @param {String} registerAddress - the address to receive the name\n * @param {String} paymentAddress - the address funding the register\n * @param {Boolean} includingZonefile - whether or not we will broadcast\n *    a zonefile hash as part  of the register\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address.\n * @returns {Promise} - a promise which resolves to the satoshi cost to fund\n *    the register.\n * @private\n */\nfunction estimateRegister(fullyQualifiedName, registerAddress, paymentAddress) {\n  var includingZonefile = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  var paymentUtxos = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  var network = _config.config.network;\n\n  var valueHash = void 0;\n  if (includingZonefile) {\n    valueHash = dummyZonefileHash;\n  }\n\n  var registerTX = (0, _skeletons.makeRegisterSkeleton)(fullyQualifiedName, registerAddress, valueHash);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(registerTX);\n    // 1 additional output for payer change\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(registerTX, paymentUtxos, 1);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates cost of an update transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to update\n * @param {String} ownerAddress - the owner of the name\n * @param {String} paymentAddress - the address funding the update\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address.\n * @returns {Promise} - a promise which resolves to the satoshi cost to fund\n *    the update.\n * @private\n */\nfunction estimateUpdate(fullyQualifiedName, ownerAddress, paymentAddress) {\n  var paymentUtxos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var network = _config.config.network;\n\n  var updateTX = (0, _skeletons.makeUpdateSkeleton)(fullyQualifiedName, dummyConsensusHash, dummyZonefileHash);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(updateTX);\n    // 1 additional input for the owner\n    // 2 additional outputs for owner / payer change\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(updateTX, 1 + paymentUtxos, 2);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates cost of an transfer transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to transfer\n * @param {String} destinationAddress - the next owner of the name\n * @param {String} ownerAddress - the current owner of the name\n * @param {String} paymentAddress - the address funding the transfer\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address.\n * @returns {Promise} - a promise which resolves to the satoshi cost to fund\n *    the transfer.\n * @private\n */\nfunction estimateTransfer(fullyQualifiedName, destinationAddress, ownerAddress, paymentAddress) {\n  var paymentUtxos = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  var network = _config.config.network;\n\n  var transferTX = (0, _skeletons.makeTransferSkeleton)(fullyQualifiedName, dummyConsensusHash, destinationAddress);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(transferTX);\n    // 1 additional input for the owner\n    // 2 additional outputs for owner / payer change\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(transferTX, 1 + paymentUtxos, 2);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates cost of an transfer transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to renew\n * @param {String} destinationAddress - the next owner of the name\n * @param {String} ownerAddress - the current owner of the name\n * @param {String} paymentAddress - the address funding the transfer\n * @param {Boolean} includingZonefile - whether or not we will broadcast a zonefile hash\n      in the renewal operation\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address.\n * @returns {Promise} - a promise which resolves to the satoshi cost to fund\n *    the transfer.\n * @private\n */\nfunction estimateRenewal(fullyQualifiedName, destinationAddress, ownerAddress, paymentAddress) {\n  var includingZonefile = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var paymentUtxos = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n  var network = _config.config.network;\n\n  var valueHash = void 0;\n  if (includingZonefile) {\n    valueHash = dummyZonefileHash;\n  }\n\n  var renewalPromise = network.getNamePrice(fullyQualifiedName).then(function (namePrice) {\n    return (0, _skeletons.makeRenewalSkeleton)(fullyQualifiedName, destinationAddress, ownerAddress, network.getDefaultBurnAddress(), namePrice, valueHash);\n  });\n\n  return Promise.all([network.getFeeRate(), renewalPromise]).then(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        feeRate = _ref4[0],\n        renewalTX = _ref4[1];\n\n    var outputsValue = (0, _utils.sumOutputValues)(renewalTX);\n    // 1 additional input for the owner\n    // and renewal skeleton includes all outputs for owner change, but not for payer change.\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(renewalTX, 1 + paymentUtxos, 1);\n    return txFee + outputsValue - 5500; // don't count the dust change for old owner.\n  });\n}\n\n/**\n * Estimates cost of a revoke transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to revoke\n * @param {String} ownerAddress - the current owner of the name\n * @param {String} paymentAddress  the address funding the revoke\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address.\n * @returns {Promise} - a promise which resolves to the satoshi cost to fund the\n *    revoke.\n * @private\n */\nfunction estimateRevoke(fullyQualifiedName, ownerAddress, paymentAddress) {\n  var paymentUtxos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var network = _config.config.network;\n  var revokeTX = (0, _skeletons.makeRevokeSkeleton)(fullyQualifiedName);\n\n  return Promise.all([network.getFeeRate()]).then(function (_ref5) {\n    var _ref6 = _slicedToArray(_ref5, 1),\n        feeRate = _ref6[0];\n\n    var outputsValue = (0, _utils.sumOutputValues)(revokeTX);\n    // 1 additional input for owner\n    // 1 additional output for payer change\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(revokeTX, 1 + paymentUtxos, 2);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates cost of a namespace preorder transaction for a namespace\n * @param {String} namespaceID - the namespace to preorder\n * @param {String} revealAddress - the address to receive the namespace (this\n *    must be passed as the 'revealAddress' in the namespace-reveal transaction)\n * @param {String} paymentAddress - the address funding the preorder\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address.\n * @returns {Promise} - a promise which resolves to the satoshi cost to fund\n *    the preorder. This includes a 5500 satoshi dust output for the preorder.\n *    Even though this is a change output, the payer must supply enough funds\n *    to generate this output, so we include it in the cost.\n * @private\n */\nfunction estimateNamespacePreorder(namespaceID, revealAddress, paymentAddress) {\n  var paymentUtxos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var network = _config.config.network;\n\n  var preorderPromise = network.getNamespacePrice(namespaceID).then(function (namespacePrice) {\n    return (0, _skeletons.makeNamespacePreorderSkeleton)(namespaceID, dummyConsensusHash, paymentAddress, revealAddress, namespacePrice);\n  });\n\n  return Promise.all([network.getFeeRate(), preorderPromise]).then(function (_ref7) {\n    var _ref8 = _slicedToArray(_ref7, 2),\n        feeRate = _ref8[0],\n        preorderTX = _ref8[1];\n\n    var outputsValue = (0, _utils.sumOutputValues)(preorderTX);\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(preorderTX, paymentUtxos, 0);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates cost of a namesapce reveal transaction for a namespace\n * @param {BlockstackNamespace} namespace - the namespace to reveal\n * @param {String} revealAddress - the address to receive the namespace\n *    (this must have been passed as 'revealAddress' to a prior namespace\n *    preorder)\n * @param {String} paymentAddress - the address that pays for this transaction\n * @param {Number} paymentUtxos - the number of UTXOs we expect will be required\n *    from the payment address\n * @returns {Promise} - a promise which resolves to the satoshi cost to\n *    fund the reveal.  This includes a 5500 satoshi dust output for the\n *    preorder.  Even though this is a change output, the payer must have\n *    enough funds to generate this output, so we include it in the cost.\n * @private\n */\nfunction estimateNamespaceReveal(namespace, revealAddress, paymentAddress) {\n  var paymentUtxos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var network = _config.config.network;\n  var revealTX = (0, _skeletons.makeNamespaceRevealSkeleton)(namespace, revealAddress);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(revealTX);\n    // 1 additional output for payer change\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(revealTX, paymentUtxos, 1);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates the cost of a namespace-ready transaction for a namespace\n * @param {String} namespaceID - the namespace to ready\n * @param {Number} revealUtxos - the number of UTXOs we expect will\n *  be required from the reveal address\n * @returns {Promise} - a promise which resolves to the satoshi cost to\n *  fund this namespacey-ready transaction.\n * @private\n */\nfunction estimateNamespaceReady(namespaceID) {\n  var revealUtxos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var network = _config.config.network;\n  var readyTX = (0, _skeletons.makeNamespaceReadySkeleton)(namespaceID);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(readyTX);\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(readyTX, revealUtxos, 1);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates the cost of a name-import transaction\n * @param {String} name - the fully-qualified name\n * @param {String} recipientAddr - the recipient\n * @param {String} zonefileHash - the zone file hash\n * @param {Number} importUtxos - the number of UTXOs we expect will\n *  be required from the importer address\n * @returns {Promise} - a promise which resolves to the satoshi cost\n *  to fund this name-import transaction\n * @private\n */\nfunction estimateNameImport(name, recipientAddr, zonefileHash) {\n  var importUtxos = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n\n  var network = _config.config.network;\n  var importTX = (0, _skeletons.makeNameImportSkeleton)(name, recipientAddr, zonefileHash);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(importTX);\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(importTX, importUtxos, 1);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates the cost of an announce transaction\n * @param {String} messageHash - the hash of the message\n * @param {Number} senderUtxos - the number of utxos we expect will\n *  be required from the importer address\n * @returns {Promise} - a promise which resolves to the satoshi cost\n *  to fund this announce transaction\n * @private\n */\nfunction estimateAnnounce(messageHash) {\n  var senderUtxos = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n\n  var network = _config.config.network;\n  var announceTX = (0, _skeletons.makeAnnounceSkeleton)(messageHash);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(announceTX);\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(announceTX, senderUtxos, 1);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Estimates the cost of a token-transfer transaction\n * @param {String} recipientAddress - the recipient of the tokens\n * @param {String} tokenType - the type of token to spend\n * @param {Object} tokenAmount - a 64-bit unsigned BigInteger encoding the number of tokens\n *   to spend\n * @param {String} scratchArea - an arbitrary string to store with the transaction\n * @param {Number} senderUtxos - the number of utxos we expect will\n *  be required from the importer address\n * @param {Number} additionalOutputs - the number of outputs we expect to add beyond\n *  just the recipient output (default = 1, if the token owner is also the bitcoin funder)\n * @returns {Promise} - a promise which resolves to the satoshi cost to\n *  fund this token-transfer transaction\n */\nfunction estimateTokenTransfer(recipientAddress, tokenType, tokenAmount, scratchArea) {\n  var senderUtxos = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n  var additionalOutputs = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n\n  var network = _config.config.network;\n  var tokenTransferTX = (0, _skeletons.makeTokenTransferSkeleton)(recipientAddress, dummyConsensusHash, tokenType, tokenAmount, scratchArea);\n\n  return network.getFeeRate().then(function (feeRate) {\n    var outputsValue = (0, _utils.sumOutputValues)(tokenTransferTX);\n    var txFee = feeRate * (0, _utils.estimateTXBytes)(tokenTransferTX, senderUtxos, additionalOutputs);\n    return txFee + outputsValue;\n  });\n}\n\n/**\n * Generates a preorder transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to pre-order\n * @param {String} destinationAddress - the address to receive the name (this\n *    must be passed as the 'registrationAddress' in the register transaction)\n * @param {String | TransactionSigner} paymentKeyIn - a hex string of\n *    the private key used to fund the transaction or a transaction signer object\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n * indicating whether the function should attempt to return an unsigned (or not fully signed)\n * transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *    this function *does not* perform the requisite safety checks -- please see\n *    the safety module for those.\n * @private\n */\nfunction makePreorder(fullyQualifiedName, destinationAddress, paymentKeyIn) {\n  var buildIncomplete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var network = _config.config.network;\n\n  var namespace = fullyQualifiedName.split('.').pop();\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n\n  return paymentKey.getAddress().then(function (preorderAddress) {\n    var preorderPromise = Promise.all([network.getConsensusHash(), network.getNamePrice(fullyQualifiedName), network.getNamespaceBurnAddress(namespace)]).then(function (_ref9) {\n      var _ref10 = _slicedToArray(_ref9, 3),\n          consensusHash = _ref10[0],\n          namePrice = _ref10[1],\n          burnAddress = _ref10[2];\n\n      return (0, _skeletons.makePreorderSkeleton)(fullyQualifiedName, consensusHash, preorderAddress, burnAddress, namePrice, destinationAddress);\n    });\n\n    return Promise.all([network.getUTXOs(preorderAddress), network.getFeeRate(), preorderPromise]).then(function (_ref11) {\n      var _ref12 = _slicedToArray(_ref11, 3),\n          utxos = _ref12[0],\n          feeRate = _ref12[1],\n          preorderSkeleton = _ref12[2];\n\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(preorderSkeleton, network.layer1);\n      txB.setVersion(1);\n\n      var changeIndex = 1; // preorder skeleton always creates a change output at index = 1\n      var signingTxB = fundTransaction(txB, preorderAddress, utxos, feeRate, 0, changeIndex);\n\n      return (0, _utils.signInputs)(signingTxB, paymentKey);\n    }).then(function (signingTxB) {\n      return returnTransactionHex(signingTxB, buildIncomplete);\n    });\n  });\n}\n\n/**\n * Generates an update transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to update\n * @param {String | TransactionSigner} ownerKeyIn - a hex string of the\n *    owner key, or a transaction signer object. This will provide one\n *    UTXO input, and also recieve a dust output.\n * @param {String | TransactionSigner} paymentKeyIn - a hex string, or a\n *    transaction signer object, of the private key used to fund the\n *    transaction's txfees\n * @param {String} zonefile - the zonefile data to update (this will be hashed\n *    to include in the transaction), the zonefile itself must be published\n *    after the UPDATE propagates.\n * @param {String} valueHash - if given, this is the hash to store (instead of\n *    zonefile).  zonefile will be ignored if this is given.\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *    indicating whether the function should attempt to return an unsigned (or not fully signed)\n *    transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *    this function *does not* perform the requisite safety checks -- please see\n *    the safety module for those.\n * @private\n */\nfunction makeUpdate(fullyQualifiedName, ownerKeyIn, paymentKeyIn, zonefile) {\n  var valueHash = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  var buildIncomplete = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n  var network = _config.config.network;\n  if (!valueHash && !zonefile) {\n    return Promise.reject(new Error('Need zonefile or valueHash arguments'));\n  }\n  if (valueHash.length === 0) {\n    if (!zonefile) {\n      return Promise.reject(new Error('Need zonefile or valueHash arguments'));\n    }\n    valueHash = (0, _utils.hash160)(Buffer.from(zonefile)).toString('hex');\n  } else if (valueHash.length !== 40) {\n    return Promise.reject(new Error('Invalid valueHash ' + valueHash));\n  }\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n  var ownerKey = getTransactionSigner(ownerKeyIn);\n\n  return Promise.all([ownerKey.getAddress(), paymentKey.getAddress()]).then(function (_ref13) {\n    var _ref14 = _slicedToArray(_ref13, 2),\n        ownerAddress = _ref14[0],\n        paymentAddress = _ref14[1];\n\n    var txPromise = network.getConsensusHash().then(function (consensusHash) {\n      return (0, _skeletons.makeUpdateSkeleton)(fullyQualifiedName, consensusHash, valueHash);\n    }).then(function (updateTX) {\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(updateTX, network.layer1);\n      txB.setVersion(1);\n      return txB;\n    });\n\n    return Promise.all([txPromise, network.getUTXOs(paymentAddress), network.getUTXOs(ownerAddress), network.getFeeRate()]).then(function (_ref15) {\n      var _ref16 = _slicedToArray(_ref15, 4),\n          txB = _ref16[0],\n          payerUtxos = _ref16[1],\n          ownerUtxos = _ref16[2],\n          feeRate = _ref16[3];\n\n      var ownerInput = addOwnerInput(ownerUtxos, ownerAddress, txB);\n      var signingTxB = fundTransaction(txB, paymentAddress, payerUtxos, feeRate, ownerInput.value);\n\n      return (0, _utils.signInputs)(signingTxB, paymentKey, [{ index: ownerInput.index, signer: ownerKey }]);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a register transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to register\n * @param {String} registerAddress - the address to receive the name (this\n *    must have been passed as the 'destinationAddress' in the preorder transaction)\n *    this address will receive a dust UTXO\n * @param {String | TransactionSigner} paymentKeyIn - a hex string of\n *    the private key (or a TransactionSigner object) used to fund the\n *    transaction (this *must* be the same as the payment address used\n *    to fund the preorder)\n * @param {String} zonefile - the zonefile data to include (this will be hashed\n *    to include in the transaction), the zonefile itself must be published\n *    after the UPDATE propagates.\n * @param {String} valueHash - the hash of the zone file data to include.\n *    It will be used instead of zonefile, if given\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *    indicating whether the function should attempt to return an unsigned (or not fully signed)\n *    transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *    this function *does not* perform the requisite safety checks -- please see\n *    the safety module for those.\n * @private\n */\nfunction makeRegister(fullyQualifiedName, registerAddress, paymentKeyIn) {\n  var zonefile = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var valueHash = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var buildIncomplete = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n  var network = _config.config.network;\n  if (!valueHash && !!zonefile) {\n    valueHash = (0, _utils.hash160)(Buffer.from(zonefile)).toString('hex');\n  } else if (!!valueHash && valueHash.length !== 40) {\n    return Promise.reject(new Error('Invalid zonefile hash ' + valueHash));\n  }\n\n  var registerSkeleton = (0, _skeletons.makeRegisterSkeleton)(fullyQualifiedName, registerAddress, valueHash);\n\n  var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(registerSkeleton, network.layer1);\n  txB.setVersion(1);\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n\n  return paymentKey.getAddress().then(function (paymentAddress) {\n    return Promise.all([network.getUTXOs(paymentAddress), network.getFeeRate()]).then(function (_ref17) {\n      var _ref18 = _slicedToArray(_ref17, 2),\n          utxos = _ref18[0],\n          feeRate = _ref18[1];\n\n      var signingTxB = fundTransaction(txB, paymentAddress, utxos, feeRate, 0);\n\n      return (0, _utils.signInputs)(signingTxB, paymentKey);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a transfer transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to transfer\n * @param {String} destinationAddress - the address to receive the name.\n *    this address will receive a dust UTXO\n * @param {String | TransactionSigner} ownerKeyIn - a hex string of\n *    the current owner's private key (or a TransactionSigner object)\n * @param {String | TransactionSigner} paymentKeyIn - a hex string of\n *    the private key used to fund the transaction (or a\n *    TransactionSigner object)\n * @param {Boolean} keepZonefile - if true, then preserve the name's zone file\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *   indicating whether the function should attempt to return an unsigned (or not fully signed)\n *   transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *    this function *does not* perform the requisite safety checks -- please see\n *    the safety module for those.\n * @private\n */\nfunction makeTransfer(fullyQualifiedName, destinationAddress, ownerKeyIn, paymentKeyIn) {\n  var keepZonefile = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  var buildIncomplete = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n  var network = _config.config.network;\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n  var ownerKey = getTransactionSigner(ownerKeyIn);\n\n  return Promise.all([ownerKey.getAddress(), paymentKey.getAddress()]).then(function (_ref19) {\n    var _ref20 = _slicedToArray(_ref19, 2),\n        ownerAddress = _ref20[0],\n        paymentAddress = _ref20[1];\n\n    var txPromise = network.getConsensusHash().then(function (consensusHash) {\n      return (0, _skeletons.makeTransferSkeleton)(fullyQualifiedName, consensusHash, destinationAddress, keepZonefile);\n    }).then(function (transferTX) {\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(transferTX, network.layer1);\n      txB.setVersion(1);\n      return txB;\n    });\n\n    return Promise.all([txPromise, network.getUTXOs(paymentAddress), network.getUTXOs(ownerAddress), network.getFeeRate()]).then(function (_ref21) {\n      var _ref22 = _slicedToArray(_ref21, 4),\n          txB = _ref22[0],\n          payerUtxos = _ref22[1],\n          ownerUtxos = _ref22[2],\n          feeRate = _ref22[3];\n\n      var ownerInput = addOwnerInput(ownerUtxos, ownerAddress, txB);\n      var signingTxB = fundTransaction(txB, paymentAddress, payerUtxos, feeRate, ownerInput.value);\n\n      return (0, _utils.signInputs)(signingTxB, paymentKey, [{ index: ownerInput.index, signer: ownerKey }]);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a revoke transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to revoke\n * @param {String | TransactionSigner} ownerKeyIn - a hex string of\n *    the current owner's private key (or a TransactionSigner object)\n * @param {String | TransactionSigner} paymentKeyIn - a hex string of\n *    the private key used to fund the transaction (or a\n *    TransactionSigner object)\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *    indicating whether the function should attempt to return an unsigned (or not fully signed)\n *    transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *    this function *does not* perform the requisite safety checks -- please see\n *    the safety module for those.\n * @private\n */\nfunction makeRevoke(fullyQualifiedName, ownerKeyIn, paymentKeyIn) {\n  var buildIncomplete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var network = _config.config.network;\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n  var ownerKey = getTransactionSigner(ownerKeyIn);\n\n  return Promise.all([ownerKey.getAddress(), paymentKey.getAddress()]).then(function (_ref23) {\n    var _ref24 = _slicedToArray(_ref23, 2),\n        ownerAddress = _ref24[0],\n        paymentAddress = _ref24[1];\n\n    var revokeTX = (0, _skeletons.makeRevokeSkeleton)(fullyQualifiedName);\n    var txPromise = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(revokeTX, network.layer1);\n    txPromise.setVersion(1);\n\n    return Promise.all([txPromise, network.getUTXOs(paymentAddress), network.getUTXOs(ownerAddress), network.getFeeRate()]).then(function (_ref25) {\n      var _ref26 = _slicedToArray(_ref25, 4),\n          txB = _ref26[0],\n          payerUtxos = _ref26[1],\n          ownerUtxos = _ref26[2],\n          feeRate = _ref26[3];\n\n      var ownerInput = addOwnerInput(ownerUtxos, ownerAddress, txB);\n      var signingTxB = fundTransaction(txB, paymentAddress, payerUtxos, feeRate, ownerInput.value);\n      return (0, _utils.signInputs)(signingTxB, paymentKey, [{ index: ownerInput.index, signer: ownerKey }]);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a renewal transaction for a domain name.\n * @param {String} fullyQualifiedName - the name to transfer\n * @param {String} destinationAddress - the address to receive the name after renewal\n *    this address will receive a dust UTXO\n * @param {String | TransactionSigner} ownerKeyIn - a hex string of\n *    the current owner's private key (or a TransactionSigner object)\n * @param {String | TransactionSigner} paymentKeyIn - a hex string of\n *    the private key used to fund the renewal (or a TransactionSigner\n *    object)\n * @param {String} zonefile - the zonefile data to include, if given (this will be hashed\n *    to include in the transaction), the zonefile itself must be published\n *    after the RENEWAL propagates.\n * @param {String} valueHash - the raw zone file hash to include (this will be used\n *    instead of zonefile, if given).\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *    indicating whether the function should attempt to return an unsigned (or not fully signed)\n *    transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *    this function *does not* perform the requisite safety checks -- please see\n *    the safety module for those.\n * @private\n */\nfunction makeRenewal(fullyQualifiedName, destinationAddress, ownerKeyIn, paymentKeyIn) {\n  var zonefile = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var valueHash = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;\n  var buildIncomplete = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n  var network = _config.config.network;\n\n  if (!valueHash && !!zonefile) {\n    valueHash = (0, _utils.hash160)(Buffer.from(zonefile)).toString('hex');\n  }\n\n  var namespace = fullyQualifiedName.split('.').pop();\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n  var ownerKey = getTransactionSigner(ownerKeyIn);\n\n  return Promise.all([ownerKey.getAddress(), paymentKey.getAddress()]).then(function (_ref27) {\n    var _ref28 = _slicedToArray(_ref27, 2),\n        ownerAddress = _ref28[0],\n        paymentAddress = _ref28[1];\n\n    var txPromise = Promise.all([network.getNamePrice(fullyQualifiedName), network.getNamespaceBurnAddress(namespace)]).then(function (_ref29) {\n      var _ref30 = _slicedToArray(_ref29, 2),\n          namePrice = _ref30[0],\n          burnAddress = _ref30[1];\n\n      return (0, _skeletons.makeRenewalSkeleton)(fullyQualifiedName, destinationAddress, ownerAddress, burnAddress, namePrice, valueHash);\n    }).then(function (tx) {\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(tx, network.layer1);\n      txB.setVersion(1);\n      return txB;\n    });\n\n    return Promise.all([txPromise, network.getUTXOs(paymentAddress), network.getUTXOs(ownerAddress), network.getFeeRate()]).then(function (_ref31) {\n      var _ref32 = _slicedToArray(_ref31, 4),\n          txB = _ref32[0],\n          payerUtxos = _ref32[1],\n          ownerUtxos = _ref32[2],\n          feeRate = _ref32[3];\n\n      var ownerInput = addOwnerInput(ownerUtxos, ownerAddress, txB, false);\n      var ownerOutput = txB.__tx.outs[2];\n      var ownerOutputAddr = _bitcoinjsLib2.default.address.fromOutputScript(ownerOutput.script, network.layer1);\n      if (ownerOutputAddr !== ownerAddress) {\n        return Promise.reject(new Error('Original owner ' + ownerAddress + ' should have an output at ' + ('index 2 in transaction was ' + ownerOutputAddr)));\n      }\n      ownerOutput.value = ownerInput.value;\n      var signingTxB = fundTransaction(txB, paymentAddress, payerUtxos, feeRate, ownerInput.value);\n      return (0, _utils.signInputs)(signingTxB, paymentKey, [{ index: ownerInput.index, signer: ownerKey }]);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a namespace preorder transaction for a namespace\n * @param {String} namespaceID - the namespace to pre-order\n * @param {String} revealAddress - the address to receive the namespace (this\n *    must be passed as the 'revealAddress' in the namespace-reveal transaction)\n * @param {String | TransactionSigner} paymentKeyIn - a hex string of\n *    the private key used to fund the transaction (or a\n *    TransactionSigner object)\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *    indicating whether the function should attempt to return an unsigned (or not fully signed)\n *    transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *    this function *does not* perform the requisite safety checks -- please see\n *    the safety module for those.\n * @private\n */\nfunction makeNamespacePreorder(namespaceID, revealAddress, paymentKeyIn) {\n  var buildIncomplete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var network = _config.config.network;\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n\n  return paymentKey.getAddress().then(function (preorderAddress) {\n    var preorderPromise = Promise.all([network.getConsensusHash(), network.getNamespacePrice(namespaceID)]).then(function (_ref33) {\n      var _ref34 = _slicedToArray(_ref33, 2),\n          consensusHash = _ref34[0],\n          namespacePrice = _ref34[1];\n\n      return (0, _skeletons.makeNamespacePreorderSkeleton)(namespaceID, consensusHash, preorderAddress, revealAddress, namespacePrice);\n    });\n\n    return Promise.all([network.getUTXOs(preorderAddress), network.getFeeRate(), preorderPromise]).then(function (_ref35) {\n      var _ref36 = _slicedToArray(_ref35, 3),\n          utxos = _ref36[0],\n          feeRate = _ref36[1],\n          preorderSkeleton = _ref36[2];\n\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(preorderSkeleton, network.layer1);\n      txB.setVersion(1);\n\n      var changeIndex = 1; // preorder skeleton always creates a change output at index = 1\n      var signingTxB = fundTransaction(txB, preorderAddress, utxos, feeRate, 0, changeIndex);\n\n      return (0, _utils.signInputs)(signingTxB, paymentKey);\n    }).then(function (signingTxB) {\n      return returnTransactionHex(signingTxB, buildIncomplete);\n    });\n  });\n}\n\n/**\n * Generates a namespace reveal transaction for a namespace\n * @param {BlockstackNamespace} namespace - the namespace to reveal\n * @param {String} revealAddress - the address to receive the namespace (this\n *   must be passed as the 'revealAddress' in the namespace-reveal transaction)\n * @param {String | TransactionSigner} paymentKeyIn - a hex string (or\n *   a TransactionSigner object) of the private key used to fund the\n *   transaction\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *   indicating whether the function should attempt to return an unsigned (or not fully signed)\n *   transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *   this function *does not* perform the requisite safety checks -- please see\n *   the safety module for those.\n * @private\n */\nfunction makeNamespaceReveal(namespace, revealAddress, paymentKeyIn) {\n  var buildIncomplete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  var network = _config.config.network;\n\n  if (!namespace.check()) {\n    return Promise.reject(new Error('Invalid namespace'));\n  }\n\n  var namespaceRevealTX = (0, _skeletons.makeNamespaceRevealSkeleton)(namespace, revealAddress);\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n\n  return paymentKey.getAddress().then(function (preorderAddress) {\n    return Promise.all([network.getUTXOs(preorderAddress), network.getFeeRate()]).then(function (_ref37) {\n      var _ref38 = _slicedToArray(_ref37, 2),\n          utxos = _ref38[0],\n          feeRate = _ref38[1];\n\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(namespaceRevealTX, network.layer1);\n      txB.setVersion(1);\n      var signingTxB = fundTransaction(txB, preorderAddress, utxos, feeRate, 0);\n\n      return (0, _utils.signInputs)(signingTxB, paymentKey);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a namespace ready transaction for a namespace\n * @param {String} namespaceID - the namespace to launch\n * @param {String | TransactionSigner} revealKeyIn - the private key\n *  of the 'revealAddress' used to reveal the namespace\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *  indicating whether the function should attempt to return an unsigned (or not fully signed)\n *  transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n *  this function *does not* perform the requisite safety checks -- please see\n *  the safety module for those.\n * @private\n */\nfunction makeNamespaceReady(namespaceID, revealKeyIn) {\n  var buildIncomplete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var network = _config.config.network;\n\n  var namespaceReadyTX = (0, _skeletons.makeNamespaceReadySkeleton)(namespaceID);\n\n  var revealKey = getTransactionSigner(revealKeyIn);\n\n  return revealKey.getAddress().then(function (revealAddress) {\n    return Promise.all([network.getUTXOs(revealAddress), network.getFeeRate()]).then(function (_ref39) {\n      var _ref40 = _slicedToArray(_ref39, 2),\n          utxos = _ref40[0],\n          feeRate = _ref40[1];\n\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(namespaceReadyTX, network.layer1);\n      txB.setVersion(1);\n      var signingTxB = fundTransaction(txB, revealAddress, utxos, feeRate, 0);\n      return (0, _utils.signInputs)(signingTxB, revealKey);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a name import transaction for a namespace\n * @param {String} name - the name to import\n * @param {String} recipientAddr - the address to receive the name\n * @param {String} zonefileHash - the hash of the zonefile to give this name\n * @param {String | TransactionSigner} importerKeyIn - the private key\n * that pays for the import\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n * indicating whether the function should attempt to return an unsigned (or not fully signed)\n * transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n * this function does not perform the requisite safety checks -- please see\n * the safety module for those.\n * @private\n */\nfunction makeNameImport(name, recipientAddr, zonefileHash, importerKeyIn) {\n  var buildIncomplete = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  var network = _config.config.network;\n\n  var nameImportTX = (0, _skeletons.makeNameImportSkeleton)(name, recipientAddr, zonefileHash);\n\n  var importerKey = getTransactionSigner(importerKeyIn);\n\n  return importerKey.getAddress().then(function (importerAddress) {\n    return Promise.all([network.getUTXOs(importerAddress), network.getFeeRate()]).then(function (_ref41) {\n      var _ref42 = _slicedToArray(_ref41, 2),\n          utxos = _ref42[0],\n          feeRate = _ref42[1];\n\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(nameImportTX, network.layer1);\n      var signingTxB = fundTransaction(txB, importerAddress, utxos, feeRate, 0);\n      return (0, _utils.signInputs)(signingTxB, importerKey);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates an announce transaction\n * @param {String} messageHash - the hash of the message to send.  Should be\n *  an already-announced zone file hash\n * @param {String | TransactionSigner} senderKeyIn - the private key\n *  that pays for the transaction.  Should be the key that owns the\n *  name that the message recipients subscribe to\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n * indicating whether the function should attempt to return an unsigned (or not fully signed)\n * transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n * this function does not perform the requisite safety checks -- please see the\n * safety module for those.\n * @private\n */\nfunction makeAnnounce(messageHash, senderKeyIn) {\n  var buildIncomplete = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  var network = _config.config.network;\n\n  var announceTX = (0, _skeletons.makeAnnounceSkeleton)(messageHash);\n\n  var senderKey = getTransactionSigner(senderKeyIn);\n\n  return senderKey.getAddress().then(function (senderAddress) {\n    return Promise.all([network.getUTXOs(senderAddress), network.getFeeRate()]).then(function (_ref43) {\n      var _ref44 = _slicedToArray(_ref43, 2),\n          utxos = _ref44[0],\n          feeRate = _ref44[1];\n\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(announceTX, network.layer1);\n      var signingTxB = fundTransaction(txB, senderAddress, utxos, feeRate, 0);\n      return (0, _utils.signInputs)(signingTxB, senderKey);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a token-transfer transaction\n * @param {String} recipientAddress - the address to receive the tokens\n * @param {String} tokenType - the type of tokens to send\n * @param {Object} tokenAmount - the BigInteger encoding of an unsigned 64-bit number of\n *  tokens to send\n * @param {String} scratchArea - an arbitrary string to include with the transaction\n * @param {String | TransactionSigner} senderKeyIn - the hex-encoded private key to send\n *   the tokens\n * @param {String | TransactionSigner} btcFunderKeyIn - the hex-encoded private key to fund\n *   the bitcoin fees for the transaction. Optional -- if not passed, will attempt to\n *   fund with sender key.\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n *   indicating whether the function should attempt to return an unsigned (or not fully signed)\n *   transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n * This function does not perform the requisite safety checks -- please see the\n * safety module for those.\n * @private\n */\nfunction makeTokenTransfer(recipientAddress, tokenType, tokenAmount, scratchArea, senderKeyIn, btcFunderKeyIn) {\n  var buildIncomplete = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n\n  var network = _config.config.network;\n  var separateFunder = !!btcFunderKeyIn;\n\n  var senderKey = getTransactionSigner(senderKeyIn);\n  var btcKey = btcFunderKeyIn ? getTransactionSigner(btcFunderKeyIn) : senderKey;\n\n  var txPromise = network.getConsensusHash().then(function (consensusHash) {\n    return (0, _skeletons.makeTokenTransferSkeleton)(recipientAddress, consensusHash, tokenType, tokenAmount, scratchArea);\n  });\n\n  return Promise.all([senderKey.getAddress(), btcKey.getAddress()]).then(function (_ref45) {\n    var _ref46 = _slicedToArray(_ref45, 2),\n        senderAddress = _ref46[0],\n        btcAddress = _ref46[1];\n\n    var btcUTXOsPromise = separateFunder ? network.getUTXOs(btcAddress) : Promise.resolve([]);\n    var networkPromises = [network.getUTXOs(senderAddress), btcUTXOsPromise, network.getFeeRate(), txPromise];\n    return Promise.all(networkPromises).then(function (_ref47) {\n      var _ref48 = _slicedToArray(_ref47, 4),\n          senderUTXOs = _ref48[0],\n          btcUTXOs = _ref48[1],\n          feeRate = _ref48[2],\n          tokenTransferTX = _ref48[3];\n\n      var txB = _bitcoinjsLib2.default.TransactionBuilder.fromTransaction(tokenTransferTX, network.layer1);\n\n      if (separateFunder) {\n        var payerInput = addOwnerInput(senderUTXOs, senderAddress, txB);\n        var signingTxB = fundTransaction(txB, btcAddress, btcUTXOs, feeRate, payerInput.value);\n        return (0, _utils.signInputs)(signingTxB, btcKey, [{ index: payerInput.index, signer: senderKey }]);\n      } else {\n        var _signingTxB = fundTransaction(txB, senderAddress, senderUTXOs, feeRate, 0);\n        return (0, _utils.signInputs)(_signingTxB, senderKey);\n      }\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\n/**\n * Generates a bitcoin spend to a specified address. This will fund up to `amount`\n *   of satoshis from the payer's UTXOs. It will generate a change output if and only\n *   if the amount of leftover change is *greater* than the additional fees associated\n *   with the extra output. If the requested amount is not enough to fund the transaction's\n *   associated fees, then this will reject with a InvalidAmountError\n *\n * UTXOs are selected largest to smallest, and UTXOs which cannot fund the fees associated\n *   with their own input will not be included.\n *\n * If you specify an amount > the total balance of the payer address, then this will\n *   generate a maximum spend transaction\n *\n * @param {String} destinationAddress - the address to receive the bitcoin payment\n * @param {String | TransactionSigner} paymentKeyIn - the private key\n *    used to fund the bitcoin spend\n * @param {number} amount - the amount in satoshis for the payment address to\n *    spend in this transaction\n * @param {boolean} buildIncomplete - optional boolean, defaults to false,\n * indicating whether the function should attempt to return an unsigned (or not fully signed)\n * transaction. Useful for passing around a TX for multi-sig input signing.\n * @returns {Promise} - a promise which resolves to the hex-encoded transaction.\n * @private\n */\nfunction makeBitcoinSpend(destinationAddress, paymentKeyIn, amount) {\n  var buildIncomplete = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n  if (amount <= 0) {\n    return Promise.reject(new _errors.InvalidParameterError('amount', 'amount must be greater than zero'));\n  }\n\n  var network = _config.config.network;\n\n  var paymentKey = getTransactionSigner(paymentKeyIn);\n\n  return paymentKey.getAddress().then(function (paymentAddress) {\n    return Promise.all([network.getUTXOs(paymentAddress), network.getFeeRate()]).then(function (_ref49) {\n      var _ref50 = _slicedToArray(_ref49, 2),\n          utxos = _ref50[0],\n          feeRate = _ref50[1];\n\n      var txB = new _bitcoinjsLib2.default.TransactionBuilder(network.layer1);\n      txB.setVersion(1);\n      var destinationIndex = txB.addOutput(destinationAddress, 0);\n\n      // will add utxos up to _amount_ and return the amount of leftover _change_\n      var change = void 0;\n      try {\n        change = (0, _utils.addUTXOsToFund)(txB, utxos, amount, feeRate, false);\n      } catch (err) {\n        if (err.name === 'NotEnoughFundsError') {\n          // actual amount funded = amount requested - remainder\n          amount -= err.leftToFund;\n          change = 0;\n        } else {\n          throw err;\n        }\n      }\n\n      var feesToPay = feeRate * (0, _utils.estimateTXBytes)(txB, 0, 0);\n      var feeForChange = feeRate * (0, _utils.estimateTXBytes)(txB, 0, 1) - feesToPay;\n\n      // it's worthwhile to add a change output\n      if (change > feeForChange) {\n        feesToPay += feeForChange;\n        txB.addOutput(paymentAddress, change);\n      }\n\n      // now let's compute how much output is leftover once we pay the fees.\n      var outputAmount = amount - feesToPay;\n      if (outputAmount < _utils.DUST_MINIMUM) {\n        throw new _errors.InvalidAmountError(feesToPay, amount);\n      }\n\n      // we need to manually set the output values now\n      txB.__tx.outs[destinationIndex].value = outputAmount;\n\n      // ready to sign.\n      return (0, _utils.signInputs)(txB, paymentKey);\n    });\n  }).then(function (signingTxB) {\n    return returnTransactionHex(signingTxB, buildIncomplete);\n  });\n}\n\nvar transactions = exports.transactions = {\n  makeRenewal: makeRenewal,\n  makeUpdate: makeUpdate,\n  makePreorder: makePreorder,\n  makeRegister: makeRegister,\n  makeTransfer: makeTransfer,\n  makeRevoke: makeRevoke,\n  makeNamespacePreorder: makeNamespacePreorder,\n  makeNamespaceReveal: makeNamespaceReveal,\n  makeNamespaceReady: makeNamespaceReady,\n  makeBitcoinSpend: makeBitcoinSpend,\n  makeNameImport: makeNameImport,\n  makeAnnounce: makeAnnounce,\n  makeTokenTransfer: makeTokenTransfer,\n  BlockstackNamespace: _skeletons.BlockstackNamespace,\n  estimatePreorder: estimatePreorder,\n  estimateRegister: estimateRegister,\n  estimateTransfer: estimateTransfer,\n  estimateUpdate: estimateUpdate,\n  estimateRenewal: estimateRenewal,\n  estimateRevoke: estimateRevoke,\n  estimateNamespacePreorder: estimateNamespacePreorder,\n  estimateNamespaceReveal: estimateNamespaceReveal,\n  estimateNamespaceReady: estimateNamespaceReady,\n  estimateNameImport: estimateNameImport,\n  estimateAnnounce: estimateAnnounce,\n  estimateTokenTransfer: estimateTokenTransfer\n};\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","addOwnerInput","utxos","ownerAddress","txB","addChangeOut","arguments","length","undefined","Error","sort","a","b","value","ownerUTXO","ownerInput","addInput","tx_hash","tx_output_n","addOutput","index","fundTransaction","paymentAddress","feeRate","inAmounts","changeIndex","_utils","DUST_MINIMUM","txFee","estimateTXBytes","outAmounts","sumOutputValues","change","addUTXOsToFund","__tx","outs","returnTransactionHex","buildIncomplete","toHex","build","getTransactionSigner","input","_signers","PubkeyHashSigner","fromHexString","Object","defineProperty","transactions","_slicedToArray","arr","i","Array","isArray","Symbol","iterator","_arr","_n","_d","_e","_i","_s","done","next","push","err","TypeError","_bitcoinjsLib2","_bitcoinjsLib","__esModule","default","_skeletons","_config","_errors","makeRenewal","fullyQualifiedName","destinationAddress","ownerKeyIn","paymentKeyIn","zonefile","valueHash","network","config","hash160","Buffer","from","toString","namespace","split","pop","paymentKey","ownerKey","Promise","all","getAddress","then","_ref27","_ref28","txPromise","getNamePrice","getNamespaceBurnAddress","_ref29","_ref30","namePrice","burnAddress","makeRenewalSkeleton","tx","TransactionBuilder","fromTransaction","layer1","setVersion","getUTXOs","getFeeRate","_ref31","_ref32","payerUtxos","ownerUtxos","ownerOutput","ownerOutputAddr","address","fromOutputScript","script","reject","signingTxB","signInputs","signer","makeUpdate","_ref13","_ref14","getConsensusHash","consensusHash","makeUpdateSkeleton","updateTX","_ref15","_ref16","makePreorder","preorderAddress","preorderPromise","_ref9","_ref10","makePreorderSkeleton","_ref11","_ref12","preorderSkeleton","makeRegister","registerAddress","registerSkeleton","makeRegisterSkeleton","_ref17","_ref18","makeTransfer","keepZonefile","_ref19","_ref20","makeTransferSkeleton","transferTX","_ref21","_ref22","makeRevoke","_ref23","_ref24","revokeTX","makeRevokeSkeleton","_ref25","_ref26","makeNamespacePreorder","namespaceID","revealAddress","getNamespacePrice","_ref33","_ref34","namespacePrice","makeNamespacePreorderSkeleton","_ref35","_ref36","makeNamespaceReveal","check","namespaceRevealTX","makeNamespaceRevealSkeleton","_ref37","_ref38","makeNamespaceReady","revealKeyIn","namespaceReadyTX","makeNamespaceReadySkeleton","revealKey","_ref39","_ref40","makeBitcoinSpend","amount","InvalidParameterError","_ref49","_ref50","destinationIndex","name","leftToFund","feesToPay","feeForChange","outputAmount","InvalidAmountError","makeNameImport","recipientAddr","zonefileHash","importerKeyIn","nameImportTX","makeNameImportSkeleton","importerKey","importerAddress","_ref41","_ref42","makeAnnounce","messageHash","senderKeyIn","announceTX","makeAnnounceSkeleton","senderKey","senderAddress","_ref43","_ref44","makeTokenTransfer","recipientAddress","tokenType","tokenAmount","scratchArea","btcFunderKeyIn","separateFunder","btcKey","makeTokenTransferSkeleton","_ref45","_ref46","btcAddress","btcUTXOsPromise","resolve","networkPromises","_ref47","_ref48","senderUTXOs","btcUTXOs","tokenTransferTX","payerInput","_signingTxB","BlockstackNamespace","estimatePreorder","paymentUtxos","dummyConsensusHash","getDefaultBurnAddress","_ref","_ref2","preorderTX","outputsValue","estimateRegister","dummyZonefileHash","registerTX","estimateTransfer","estimateUpdate","estimateRenewal","renewalPromise","_ref3","_ref4","renewalTX","estimateRevoke","_ref5","_ref6","estimateNamespacePreorder","_ref7","_ref8","estimateNamespaceReveal","revealTX","estimateNamespaceReady","revealUtxos","readyTX","estimateNameImport","importUtxos","importTX","estimateAnnounce","senderUtxos","estimateTokenTransfer","additionalOutputs"]
}
