shadow$provide.module$node_modules$pbkdf2$lib$async=function(global,process,require,module,exports,shadow$shims){function checkNative(algo){if(global.process&&!global.process.browser||!subtle||!subtle.importKey||!subtle.deriveBits)return Promise.resolve(!1);if(void 0!==checks[algo])return checks[algo];ZERO_BUF=ZERO_BUF||Buffer.alloc(8);var prom=browserPbkdf2(ZERO_BUF,ZERO_BUF,10,128,algo).then(function(){return!0}).catch(function(){return!1});return checks[algo]=prom}function browserPbkdf2(password,
salt,iterations,length,algo){return subtle.importKey("raw",password,{name:"PBKDF2"},!1,["deriveBits"]).then(function(key){return subtle.deriveBits({name:"PBKDF2",salt:salt,iterations:iterations,hash:{name:algo}},key,length<<3)}).then(function(res){return Buffer.from(res)})}function resolvePromise(promise,callback){promise.then(function(out){process.nextTick(function(){callback(null,out)})},function(e){process.nextTick(function(){callback(e)})})}var checkParameters=require("module$node_modules$pbkdf2$lib$precondition"),
defaultEncoding=require("module$node_modules$pbkdf2$lib$default_encoding"),sync=require("module$node_modules$pbkdf2$lib$sync_browser"),Buffer=require("module$node_modules$safe_buffer$index").Buffer,ZERO_BUF,subtle=global.crypto&&global.crypto.subtle,toBrowser={sha:"SHA-1","sha-1":"SHA-1",sha1:"SHA-1",sha256:"SHA-256","sha-256":"SHA-256",sha384:"SHA-384","sha-384":"SHA-384","sha-512":"SHA-512",sha512:"SHA-512"},checks=[];module.exports=function(password,salt,iterations,keylen,digest,callback){"function"===
typeof digest&&(callback=digest,digest=void 0);digest=digest||"sha1";var algo=toBrowser[digest.toLowerCase()];if(!algo||"function"!==typeof global.Promise)return process.nextTick(function(){try{var out=sync(password,salt,iterations,keylen,digest)}catch(e){return callback(e)}callback(null,out)});checkParameters(password,salt,iterations,keylen);if("function"!==typeof callback)throw Error("No callback provided to pbkdf2");Buffer.isBuffer(password)||(password=Buffer.from(password,defaultEncoding));Buffer.isBuffer(salt)||
(salt=Buffer.from(salt,defaultEncoding));resolvePromise(checkNative(algo).then(function(resp){return resp?browserPbkdf2(password,salt,iterations,keylen,algo):sync(password,salt,iterations,keylen,digest)}),callback)}}
//# sourceMappingURL=module$node_modules$pbkdf2$lib$async.js.map
