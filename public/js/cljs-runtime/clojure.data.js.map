{"version":3,"sources":["clojure/data.cljs"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns \n  ^{:author \"Stuart Halloway\",\n    :doc \"Non-core data functions.\"}\n  clojure.data\n  (:require [clojure.set :as set]))\n\n(declare ^{:arglists '([a b])} diff)\n\n(defn- atom-diff\n  \"Internal helper for diff.\"\n  [a b]\n  (if (= a b) [nil nil a] [a b nil]))\n\n;; for big things a sparse vector class would be better\n(defn- vectorize\n  \"Convert an associative-by-numeric-index collection into\n   an equivalent vector, with nil for any missing keys\"\n  [m]\n  (when (seq m)\n    (reduce\n     (fn [result [k v]] (assoc result k v))\n     (vec (repeat (apply max (keys m))  nil))\n     m)))\n\n(defn- diff-associative-key\n  \"Diff associative things a and b, comparing only the key k.\"\n  [a b k]\n  (let [va (get a k)\n        vb (get b k)\n        [a* b* ab] (diff va vb)\n        in-a (contains? a k)\n        in-b (contains? b k)\n        same (and in-a in-b\n                  (or (not (nil? ab))\n                      (and (nil? va) (nil? vb))))]\n    [(when (and in-a (or (not (nil? a*)) (not same))) {k a*})\n     (when (and in-b (or (not (nil? b*)) (not same))) {k b*})\n     (when same {k ab})\n     ]))\n\n(defn- diff-associative\n  \"Diff associative things a and b, comparing only keys in ks (if supplied).\"\n  ([a b]\n     (diff-associative a b (set/union (keys a) (keys b))))\n  ([a b ks]\n     (reduce\n      (fn [diff1 diff2]\n        (doall (map merge diff1 diff2)))\n      [nil nil nil]\n      (map\n       (partial diff-associative-key a b)\n       ks))))\n\n(defn- diff-sequential\n  [a b]\n  (vec (map vectorize (diff-associative\n                       (if (vector? a) a (vec a))\n                       (if (vector? b) b (vec b))\n                       (range (max (count a) (count b)))))))\n\n(defn- diff-set\n  [a b]\n  [(not-empty (set/difference a b))\n   (not-empty (set/difference b a))\n   (not-empty (set/intersection a b))])\n\n(defprotocol EqualityPartition\n  \"Implementation detail. Subject to change.\"\n  (equality-partition [x] \"Implementation detail. Subject to change.\"))\n\n(defprotocol Diff\n  \"Implementation detail. Subject to change.\"\n  (diff-similar [a b] \"Implementation detail. Subject to change.\"))\n\n(extend-protocol EqualityPartition\n  nil\n  (equality-partition [x] :atom)\n\n  string\n  (equality-partition [x] :atom)\n\n  number\n  (equality-partition [x] :atom)\n\n  array\n  (equality-partition [x] :sequential)\n\n  function\n  (equality-partition [x] :atom)\n\n  boolean\n  (equality-partition [x] :atom)\n\n  default\n  (equality-partition [x]\n    (cond\n     (satisfies? IMap x) :map\n     (satisfies? ISet x) :set\n     (satisfies? ISequential x) :sequential\n     :default :atom)))\n\n(extend-protocol Diff\n  nil\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  string\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  number\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  array\n  (diff-similar [a b]\n    (diff-sequential a b))\n\n  function\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  boolean\n  (diff-similar [a b]\n    (atom-diff a b))\n\n  default\n  (diff-similar [a b]\n    ((case (equality-partition a)\n       :atom atom-diff\n       :set diff-set\n       :sequential diff-sequential\n       :map diff-associative)\n     a b)))\n\n(defn diff\n  \"Recursively compares a and b, returning a tuple of\n  [things-only-in-a things-only-in-b things-in-both].\n  Comparison rules:\n\n  * For equal a and b, return [nil nil a].\n  * Maps are subdiffed where keys match and values differ.\n  * Sets are never subdiffed.\n  * All sequential things are treated as associative collections\n    by their indexes, with results returned as vectors.\n  * Everything else (including strings!) is treated as\n    an atom and compared for equality.\"\n  [a b]\n  (if (= a b)\n    [nil nil a]\n    (if (= (equality-partition a) (equality-partition b))\n      (diff-similar a b)\n      (atom-diff a b))))\n  \n"],"mappings":"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","names":["clojure.data/atom-diff","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","a","b","clojure.data/vectorize","cljs.core/seq","m","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__11388","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__11389","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","result","k","v","cljs.core/vec","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core/keys","clojure.data/diff-associative-key","vec__11411","cljs.core.get.cljs$core$IFn$_invoke$arity$2","clojure.data/diff","va","vb","cljs.core/contains?","in-a","in-b","ab","a*","same","b*","G__11426","clojure.data/diff-associative","js/Error","clojure.data.diff_associative.cljs$core$IFn$_invoke$arity$3","clojure.set.union.cljs$core$IFn$_invoke$arity$2","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","diff1","diff2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core.partial.cljs$core$IFn$_invoke$arity$3","ks","clojure.data/diff-sequential","cljs.core/vector?","cljs.core.range.cljs$core$IFn$_invoke$arity$1","x__4135__auto__","y__4136__auto__","cljs.core/count","clojure.data/diff-set","cljs.core/not-empty","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","clojure.data/equality-partition","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","clojure.data/EqualityPartition","x","clojure.data/diff-similar","clojure.data/Diff","goog.object/set","G__11454","G__11455","G__11456","G__11458","G__11459","G__11460","G__11461","G__11462","G__11463","G__11465","G__11466","G__11467","G__11469","G__11470","G__11471","G__11480","G__11481","G__11482","G__11484","G__11485","G__11486","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IMap","cljs.core/ISet","cljs.core/ISequential","G__11493","G__11494","G__11495","G__11498","G__11499","G__11500","G__11504","G__11505","G__11506","G__11508","G__11509","G__11510","G__11517","G__11518","G__11519","G__11522","G__11523","G__11524","G__11533","G__11534","G__11535","fexpr__11537","G__11538","cljs.core/Keyword"]}