shadow$provide.module$node_modules$asn1_DOT_js$lib$asn1$base$buffer=function(global,process,require,module,exports,shadow$shims){function DecoderBuffer(base,options){Reporter.call(this,options);Buffer.isBuffer(base)?(this.base=base,this.offset=0,this.length=base.length):this.error("Input not Buffer")}function EncoderBuffer(value,reporter){if(Array.isArray(value))this.length=0,this.value=value.map(function(item){item instanceof EncoderBuffer||(item=new EncoderBuffer(item,reporter));this.length+=item.length;
return item},this);else if("number"===typeof value){if(!(0<=value&&255>=value))return reporter.error("non-byte EncoderBuffer value");this.value=value;this.length=1}else if("string"===typeof value)this.value=value,this.length=Buffer.byteLength(value);else if(Buffer.isBuffer(value))this.value=value,this.length=value.length;else return reporter.error("Unsupported type: "+typeof value)}global=require("module$node_modules$inherits$inherits_browser");var Reporter=require("module$node_modules$asn1_DOT_js$lib$asn1$base$index").Reporter,
Buffer=require("module$node_modules$buffer$index").Buffer;global(DecoderBuffer,Reporter);exports.DecoderBuffer=DecoderBuffer;DecoderBuffer.prototype.save=function(){return{offset:this.offset,reporter:Reporter.prototype.save.call(this)}};DecoderBuffer.prototype.restore=function(save){var res=new DecoderBuffer(this.base);res.offset=save.offset;res.length=this.offset;this.offset=save.offset;Reporter.prototype.restore.call(this,save.reporter);return res};DecoderBuffer.prototype.isEmpty=function(){return this.offset===
this.length};DecoderBuffer.prototype.readUInt8=function(fail){return this.offset+1<=this.length?this.base.readUInt8(this.offset++,!0):this.error(fail||"DecoderBuffer overrun")};DecoderBuffer.prototype.skip=function(bytes,fail){if(!(this.offset+bytes<=this.length))return this.error(fail||"DecoderBuffer overrun");fail=new DecoderBuffer(this.base);fail._reporterState=this._reporterState;fail.offset=this.offset;fail.length=this.offset+bytes;this.offset+=bytes;return fail};DecoderBuffer.prototype.raw=
function(save){return this.base.slice(save?save.offset:this.offset,this.length)};exports.EncoderBuffer=EncoderBuffer;EncoderBuffer.prototype.join=function(out,offset){out||(out=new Buffer(this.length));offset||(offset=0);if(0===this.length)return out;Array.isArray(this.value)?this.value.forEach(function(item){item.join(out,offset);offset+=item.length}):("number"===typeof this.value?out[offset]=this.value:"string"===typeof this.value?out.write(this.value,offset):Buffer.isBuffer(this.value)&&this.value.copy(out,
offset),offset+=this.length);return out}}
//# sourceMappingURL=module$node_modules$asn1_DOT_js$lib$asn1$base$buffer.js.map
