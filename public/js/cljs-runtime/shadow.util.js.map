{"version":3,"sources":["shadow/util.cljs"],"sourcesContent":["(ns shadow.util\n  (:require-macros [shadow.util :as m])\n  (:require [cljs.core.async :as async])) ;; not really used here, but the go! macro needs this\n\n(defn console-friendly [a]\n  (cond\n   (nil? a) \"nil\"\n   (keyword? a) (str a)\n   (string? a) a\n   (number? a) a\n   (satisfies? IPrintWithWriter a) (pr-str a)\n   :else a\n   ))\n\n(defn go! [& body]\n  (throw (ex-info \"go! is a macro\" {})))\n\n(def console? (exists? js/console))\n\n(defn log\n  ([a1]\n     (when console?\n       (.log js/console\n             (console-friendly a1))))\n  ([a1 a2]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2))))\n  ([a1 a2 a3]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3))))\n  ([a1 a2 a3 a4]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4))))\n  ([a1 a2 a3 a4 a5]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5))))\n  ([a1 a2 a3 a4 a5 a6]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6))))\n  ([a1 a2 a3 a4 a5 a6 & more]\n     (when console?\n       (.log js/console\n             (console-friendly a1)\n             (console-friendly a2)\n             (console-friendly a3)\n             (console-friendly a4)\n             (console-friendly a5)\n             (console-friendly a6)\n             \"more:\"\n             (pr-str more)))))\n\n;; HAX\n(comment\n  (def default-ex-info js/cljs.core.ex-info)\n\n  (set! (.. js/cljs -core -ex-info)\n    (fn shadow-ex-info\n      ([msg map]\n       (m/log \"EX-INFO:\" msg map)\n       (default-ex-info msg map))\n      ([msg map cause]\n       (m/log \"EX-INFO:\" msg map cause)\n       (default-ex-info msg map cause))\n      )))\n\n\n(defn remove-from-vector [coll key]\n  (->> (map-indexed vector coll)\n       (reduce (fn [v [idx item]]\n                 (if (= idx key)\n                   v\n                   (conj! v item)))\n               (transient []))\n       (persistent!)))\n\n(defn remove-item-from-coll [coll key value]\n  (cond\n   (satisfies? IVector coll)\n   (remove-from-vector coll key)\n   (satisfies? IMap coll)\n   (dissoc coll key)\n   (satisfies? ISet coll)\n   (disj coll value)\n   :else (throw (ex-info \"unknown coll type\" {:coll coll :key key :value value}))\n   ))\n"],"mappings":"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","names":["shadow.util/console-friendly","a","cljs.core/Keyword","cljs.core/PROTOCOL_SENTINEL","cljs.core/native-satisfies?","cljs.core/IPrintWithWriter","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","shadow.util/go!","argseq__4648__auto__","self__4629__auto__","cljs.core/seq","seq20489","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","shadow.util/console?","js/console","G__20507","shadow.util/log","args-arr__4662__auto__","argseq__4663__auto__","cljs.core/first","seq20500","cljs.core/next","self__4628__auto__","G__20501","G__20502","G__20503","G__20504","G__20505","G__20506","a1","a2","a3","a4","a5","a6","more","shadow.util/remove-from-vector","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/vector","coll","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__20533","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__20534","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","idx","key","v","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","item","cljs.core/transient","cljs.core/persistent!","shadow.util/remove-item-from-coll","cljs.core/IVector","cljs.core/IMap","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/ISet","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","value"]}