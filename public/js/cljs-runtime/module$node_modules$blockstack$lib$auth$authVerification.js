shadow$provide.module$node_modules$blockstack$lib$auth$authVerification=function(global,process,require,module,exports,shadow$shims){function doSignaturesMatchPublicKeys(token){var publicKeys=(0,_jsontokens.decodeToken)(token).payload.public_keys;if(1===publicKeys.length){publicKeys=publicKeys[0];try{return(new _jsontokens.TokenVerifier("ES256k",publicKeys)).verify(token)?!0:!1}catch(e){return!1}}else throw Error("Multiple public keys are not supported");}function doPublicKeysMatchIssuer(token){var payload=
(0,_jsontokens.decodeToken)(token).payload;token=payload.public_keys;payload=(0,_index.getAddressFromDID)(payload.iss);if(1===token.length){if((0,_index.publicKeyToAddress)(token[0])===payload)return!0}else throw Error("Multiple public keys are not supported");return!1}function doPublicKeysMatchUsername(token,nameLookupURL){return new Promise(function(resolve){var payload=(0,_jsontokens.decodeToken)(token).payload;if(payload.username)if(null===payload.username)resolve(!0);else if(null===nameLookupURL)resolve(!1);
else{var username=payload.username;username=nameLookupURL.replace(/\/$/,"")+"/"+username;try{fetch(username).then(function(response){return response.text()}).then(function(responseText){return JSON.parse(responseText)}).then(function(responseJSON){if(responseJSON.hasOwnProperty("address")){responseJSON=responseJSON.address;var addressFromIssuer=(0,_index.getAddressFromDID)(payload.iss);responseJSON===addressFromIssuer?resolve(!0):resolve(!1)}else resolve(!1)}).catch(function(){resolve(!1)})}catch(e){resolve(!1)}}else resolve(!0)})}
function isIssuanceDateValid(token){token=(0,_jsontokens.decodeToken)(token).payload;if(token.iat){if("number"!==typeof token.iat)return!1;token=new Date(1E3*token.iat);return(new Date).getTime()<token.getTime()?!1:!0}return!0}function isExpirationDateValid(token){token=(0,_jsontokens.decodeToken)(token).payload;if(token.exp){if("number"!==typeof token.exp)return!1;token=new Date(1E3*token.exp);return(new Date).getTime()>token.getTime()?!1:!0}return!0}function isManifestUriValid(token){token=(0,_jsontokens.decodeToken)(token).payload;
return(0,_index.isSameOriginAbsoluteUrl)(token.domain_name,token.manifest_uri)}function isRedirectUriValid(token){token=(0,_jsontokens.decodeToken)(token).payload;return(0,_index.isSameOriginAbsoluteUrl)(token.domain_name,token.redirect_uri)}function verifyAuthRequest(token){return new Promise(function(resolve,reject){"none"===(0,_jsontokens.decodeToken)(token).header.alg&&reject("Token must be signed in order to be verified");Promise.all([isExpirationDateValid(token),isIssuanceDateValid(token),doSignaturesMatchPublicKeys(token),
doPublicKeysMatchIssuer(token),isManifestUriValid(token),isRedirectUriValid(token)]).then(function(values){values.every(Boolean)?resolve(!0):resolve(!1)})})}Object.defineProperty(exports,"__esModule",{value:!0});exports.doSignaturesMatchPublicKeys=doSignaturesMatchPublicKeys;exports.doPublicKeysMatchIssuer=doPublicKeysMatchIssuer;exports.doPublicKeysMatchUsername=doPublicKeysMatchUsername;exports.isIssuanceDateValid=isIssuanceDateValid;exports.isExpirationDateValid=isExpirationDateValid;exports.isManifestUriValid=
isManifestUriValid;exports.isRedirectUriValid=isRedirectUriValid;exports.verifyAuthRequest=verifyAuthRequest;exports.verifyAuthRequestAndLoadManifest=function(token){return new Promise(function(resolve,reject){return verifyAuthRequest(token).then(function(valid){if(valid)return(0,_index.fetchAppManifest)(token).then(function(appManifest){resolve(appManifest)}).catch(function(err){reject(err)});reject();return Promise.reject()})})};exports.verifyAuthResponse=function(token,nameLookupURL){return new Promise(function(resolve){Promise.all([isExpirationDateValid(token),
isIssuanceDateValid(token),doSignaturesMatchPublicKeys(token),doPublicKeysMatchIssuer(token),doPublicKeysMatchUsername(token,nameLookupURL)]).then(function(values){values.every(Boolean)?resolve(!0):resolve(!1)})})};var _jsontokens=require("module$node_modules$jsontokens$lib$index"),_index=require("module$node_modules$blockstack$lib$index")}
//# sourceMappingURL=module$node_modules$blockstack$lib$auth$authVerification.js.map
