{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$templates$witnesscommitment$output.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,yEAAA,CAA6F,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAW1JC,QAASA,MAAM,CAACC,MAAD,CAAS,CAChBC,MAAAA,CAASC,OAAAC,QAAA,CAAgBH,MAAhB,CAEf,OAAuB,GAAvB,CAAOC,MAAAG,OAAP,EACEH,MAAA,CAAO,CAAP,CADF,GACgBI,GAAAC,UADhB,EAEgB,EAFhB,GAEEL,MAAA,CAAO,CAAP,CAFF,EAGEA,MAAAM,MAAA,CAAa,CAAb,CAAgB,CAAhB,CAAAC,OAAA,CAA0BC,MAA1B,CANoB,CARxB,IAAMC,OAASf,OAAA,CAAQ,uCAAR,CAAAe,OAAf,CACMR,QAAUP,OAAA,CAAQ,8CAAR,CADhB,CAEMgB,MAAQhB,OAAA,CAAQ,6CAAR,CAFd,CAGMiB;AAAYjB,OAAA,CAAQ,qCAAR,CAHlB,CAIMU,IAAMV,OAAA,CAAQ,4CAAR,CAJZ,CAMMc,OAASC,MAAAG,KAAA,CAAY,UAAZ,CAAwB,KAAxB,CAWfd,MAAAe,OAAA,CAAeC,QAAS,EAAG,CAAE,MAAO,2BAAT,CAkB3BnB,OAAAC,QAAA,CAAiB,CACfE,MAAOA,KADQ,CAEfiB,OARFA,QAAgB,CAACf,MAAD,CAAS,CACvBW,SAAA,CAAUb,KAAV,CAAiBE,MAAjB,CAEA,OAAOC,QAAAe,UAAA,CAAkBhB,MAAlB,CAAA,CAA0B,CAA1B,CAAAM,MAAA,CAAmC,CAAnC,CAAsC,EAAtC,CAHgB,CAMR,CAGfW,OAnBFA,QAAgB,CAACC,UAAD,CAAa,CAC3BP,SAAA,CAAUD,KAAAS,WAAV,CAA4BD,UAA5B,CAEA,KAAMlB,OAASS,MAAAW,YAAA,CAAmB,EAAnB,CACfZ,OAAAa,KAAA,CAAYrB,MAAZ,CAAoB,CAApB,CACAkB,WAAAG,KAAA,CAAgBrB,MAAhB,CAAwB,CAAxB,CAEA,OAAOC,QAAAC,QAAA,CAAgB,CAACE,GAAAC,UAAD;AAAgBL,MAAhB,CAAhB,CAPoB,CAgBZ,CAtCyI;",
"sources":["node_modules/bitcoinjs-lib/src/templates/witnesscommitment/output.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$templates$witnesscommitment$output\"] = function(global,process,require,module,exports,shadow$shims) {\n// OP_RETURN {aa21a9ed} {commitment}\n\nconst Buffer = require('safe-buffer').Buffer\nconst bscript = require('../../script')\nconst types = require('../../types')\nconst typeforce = require('typeforce')\nconst OPS = require('bitcoin-ops')\n\nconst HEADER = Buffer.from('aa21a9ed', 'hex')\n\nfunction check (script) {\n  const buffer = bscript.compile(script)\n\n  return buffer.length > 37 &&\n    buffer[0] === OPS.OP_RETURN &&\n    buffer[1] === 0x24 &&\n    buffer.slice(2, 6).equals(HEADER)\n}\n\ncheck.toJSON = function () { return 'Witness commitment output' }\n\nfunction encode (commitment) {\n  typeforce(types.Hash256bit, commitment)\n\n  const buffer = Buffer.allocUnsafe(36)\n  HEADER.copy(buffer, 0)\n  commitment.copy(buffer, 4)\n\n  return bscript.compile([OPS.OP_RETURN, buffer])\n}\n\nfunction decode (buffer) {\n  typeforce(check, buffer)\n\n  return bscript.decompile(buffer)[1].slice(4, 36)\n}\n\nmodule.exports = {\n  check: check,\n  decode: decode,\n  encode: encode\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","check","script","buffer","bscript","compile","length","OPS","OP_RETURN","slice","equals","HEADER","Buffer","types","typeforce","from","toJSON","check.toJSON","decode","decompile","encode","commitment","Hash256bit","allocUnsafe","copy"]
}
