{"version":3,"sources":["devtools/formatters/templating.cljs"],"sourcesContent":["(ns devtools.formatters.templating\n  (:require-macros [devtools.oops :refer [oget oset ocall oapply safe-call unchecked-aget]])\n  (:require [clojure.walk :refer [prewalk]]\n            [devtools.util :refer [pprint-str]]\n            [devtools.protocols :refer [ITemplate IGroup ISurrogate IFormat]]\n            [devtools.formatters.helpers :refer [pref cljs-value?]]\n            [devtools.formatters.state :refer [get-current-state prevent-recursion?]]\n            [clojure.string :as string]))\n\n; -- object marking support -------------------------------------------------------------------------------------------------\n\n(defn mark-as-group! [value]\n  (specify! value IGroup)\n  value)\n\n(defn group? [value]\n  (satisfies? IGroup value))\n\n(defn mark-as-template! [value]\n  (specify! value ITemplate)\n  value)\n\n(defn template? [value]\n  (satisfies? ITemplate value))\n\n(defn mark-as-surrogate! [value]\n  (specify! value ISurrogate)\n  value)\n\n(defn surrogate? [value]\n  (satisfies? ISurrogate value))\n\n(defn reference? [value]\n  (and (group? value)\n       (= (unchecked-aget value 0) \"object\")))\n\n; ---------------------------------------------------------------------------------------------------------------------------\n\n(defn make-group [& items]\n  (let [group (mark-as-group! #js [])]\n    (doseq [item items]\n      (if (some? item)\n        (if (coll? item)\n          (.apply (unchecked-aget group \"push\") group (mark-as-group! (into-array item)))                                               ; convenience helper to splat cljs collections\n          (.push group (pref item)))))\n    group))\n\n(defn make-template\n  [tag style & children]\n  (let [tag (pref tag)\n        style (pref style)\n        template (mark-as-template! #js [tag (if (empty? style)\n                                               #js {}\n                                               #js {\"style\" style})])]\n    (doseq [child children]\n      (if (some? child)\n        (if (coll? child)\n          (.apply (unchecked-aget template \"push\") template (mark-as-template! (into-array (keep pref child))))                         ; convenience helper to splat cljs collections\n          (if-let [child-value (pref child)]\n            (.push template child-value)))))\n    template))\n\n(defn concat-templates! [template & templates]\n  (mark-as-template! (.apply (oget template \"concat\") template (into-array (map into-array (keep pref templates))))))\n\n(defn extend-template! [template & args]\n  (concat-templates! template args))\n\n(defn make-surrogate\n  ; passing :target as body means that targt object body should be rendered using standard templates\n  ; see <surrogate-body> in markup.cljs\n  ([object] (make-surrogate object nil))\n  ([object header] (make-surrogate object header nil))\n  ([object header body] (make-surrogate object header body 0))\n  ([object header body start-index]\n   (mark-as-surrogate! (js-obj\n                         \"target\" object\n                         \"header\" header\n                         \"body\" body\n                         \"startIndex\" (or start-index 0)))))\n\n(defn get-surrogate-target [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"target\"))\n\n(defn get-surrogate-header [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"header\"))\n\n(defn get-surrogate-body [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"body\"))\n\n(defn get-surrogate-start-index [surrogate]\n  {:pre [(surrogate? surrogate)]}\n  (oget surrogate \"startIndex\"))\n\n(defn make-reference [object & [state-override-fn]]\n  {:pre [(or (nil? state-override-fn) (fn? state-override-fn))]}\n  (if (nil? object)\n    ; this code is duplicated in markup.cljs <nil>\n    (make-template :span :nil-style :nil-label)\n    (let [sub-state (if (some? state-override-fn)\n                      (state-override-fn (get-current-state))\n                      (get-current-state))]\n      (make-group \"object\" #js {\"object\" object\n                                \"config\" sub-state}))))\n\n; -- JSON ML support --------------------------------------------------------------------------------------------------------\n\n; a renderer from hiccup-like data markup to json-ml\n;\n; [[tag style] child1 child2 ...] -> #js [tag #js {\"style\" ...} child1 child2 ...]\n;\n\n(declare render-json-ml*)\n\n(def ^:dynamic *current-render-stack* [])\n(def ^:dynamic *current-render-path* [])\n\n(defn print-preview [markup]\n  (binding [*print-level* 1]\n    (pr-str markup)))\n\n(defn add-stack-separators [stack]\n  (interpose \"-------------\" stack))\n\n(defn replace-fns-with-markers [stack]\n  (let [f (fn [v]\n            (if (fn? v)\n              \"##fn##\"\n              v))]\n    (prewalk f stack)))\n\n(defn pprint-render-calls [stack]\n  (map pprint-str stack))\n\n(defn pprint-render-stack [stack]\n  (string/join \"\\n\" (-> stack\n                        reverse\n                        replace-fns-with-markers\n                        pprint-render-calls\n                        add-stack-separators)))\n\n(defn pprint-render-path [path]\n  (pprint-str path))\n\n(defn assert-markup-error [msg]\n  (assert false (str msg \"\\n\"\n                     \"Render path: \" (pprint-render-path *current-render-path*) \"\\n\"\n                     \"Render stack:\\n\"\n                     (pprint-render-stack *current-render-stack*))))\n\n(defn surrogate-markup? [markup]\n  (and (sequential? markup) (= (first markup) \"surrogate\")))\n\n(defn render-special [name args]\n  (case name\n    \"surrogate\" (let [obj (first args)\n                      converted-args (map render-json-ml* (rest args))]\n                  (apply make-surrogate (concat [obj] converted-args)))\n    \"reference\" (let [obj (first args)\n                      converted-obj (if (surrogate-markup? obj) (render-json-ml* obj) obj)]\n                  (apply make-reference (concat [converted-obj] (rest args))))\n    (assert-markup-error (str \"no matching special tag name: '\" name \"'\"))))\n\n(defn emptyish? [v]\n  (if (or (seqable? v) (array? v) (string? v))\n    (empty? v)\n    false))\n\n(defn render-subtree [tag children]\n  (let [[html-tag style] tag]\n    (apply make-template html-tag style (map render-json-ml* (remove emptyish? (map pref children))))))\n\n(defn render-json-ml* [markup]\n  (if-not (sequential? markup)\n    markup\n    (binding [*current-render-path* (conj *current-render-path* (first markup))]\n      (let [tag (pref (first markup))]\n        (cond\n          (string? tag) (render-special tag (rest markup))\n          (sequential? tag) (render-subtree tag (rest markup))\n          :else (assert-markup-error (str \"invalid json-ml markup at \" (print-preview markup) \":\")))))))\n\n(defn render-json-ml [markup]\n  (binding [*current-render-stack* (conj *current-render-stack* markup)\n            *current-render-path* (conj *current-render-path* \"<render-json-ml>\")]\n    (render-json-ml* markup)))\n\n; -- template rendering -----------------------------------------------------------------------------------------------------\n\n(defn ^:dynamic assert-failed-markup-rendering [initial-value value]\n  (assert false (str \"result of markup rendering must be a template,\\n\"\n                     \"resolved to \" (pprint-str value)\n                     \"initial value: \" (pprint-str initial-value))))\n\n(defn render-markup* [initial-value value]\n  (cond\n    (fn? value) (recur initial-value (value))\n    (keyword? value) (recur initial-value (pref value))\n    (sequential? value) (recur initial-value (render-json-ml value))\n    (template? value) value\n    (surrogate? value) value\n    (reference? value) value\n    :else (assert-failed-markup-rendering initial-value value)))\n\n(defn render-markup [value]\n  (render-markup* value value))\n"],"mappings":"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","names":["devtools.formatters.templating/mark-as-group!","x14168","cljs.core/PROTOCOL_SENTINEL","value","devtools.formatters.templating/group?","cljs.core/native-satisfies?","devtools.protocols/IGroup","devtools.formatters.templating/mark-as-template!","x14183","devtools.formatters.templating/template?","devtools.protocols/ITemplate","devtools.formatters.templating/mark-as-surrogate!","x14185","devtools.formatters.templating/surrogate?","devtools.protocols/ISurrogate","devtools.formatters.templating/reference?","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","devtools.formatters.templating/make-group","argseq__4648__auto__","self__4629__auto__","cljs.core/seq","seq14191","i__14198","count__14197","chunk__14196","seq__14195","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","cljs.core/next","items","item","cljs.core/coll?","group","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","devtools.formatters.helpers/pref","devtools.formatters.templating/make-template","seq14201","self__4628__auto__","G__14202","G__14203","tag","style","cljs.core/empty?","i__14210","count__14209","chunk__14208","seq__14207","children","child","template","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","temp__5455__auto__","child-value","devtools.formatters.templating/concat-templates!","seq14218","G__14219","cljs.core.map.cljs$core$IFn$_invoke$arity$2","cljs.core/into-array","templates","devtools.formatters.templating/extend-template!","seq14223","G__14224","devtools.formatters.templating.concat_templates_BANG_.cljs$core$IFn$_invoke$arity$variadic","args","G__14235","devtools.formatters.templating/make-surrogate","js/Error","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$2","object","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$3","header","devtools.formatters.templating.make_surrogate.cljs$core$IFn$_invoke$arity$4","body","obj14245","or__4047__auto__","start-index","devtools.formatters.templating/get-surrogate-target","surrogate","devtools.formatters.templating/get-surrogate-header","devtools.formatters.templating/get-surrogate-body","devtools.formatters.templating/get-surrogate-start-index","devtools.formatters.templating/make-reference","p__14250","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__14251","seq14248","G__14249","state-override-fn","cljs.core/fn?","devtools.formatters.templating.make_template.cljs$core$IFn$_invoke$arity$variadic","G__14255","devtools.formatters.state/get-current-state","devtools.formatters.templating.make_group.cljs$core$IFn$_invoke$arity$variadic","sub-state","devtools.formatters.templating/*current-render-stack*","devtools.formatters.templating/*current-render-path*","devtools.formatters.templating/print-preview","*print-level*-temp-val__14258","*print-level*-orig-val__14257","cljs.core/*print-level*","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","markup","devtools.formatters.templating/add-stack-separators","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","stack","devtools.formatters.templating/replace-fns-with-markers","v","clojure.walk/prewalk","f","devtools.formatters.templating/pprint-render-calls","devtools.util/pprint-str","devtools.formatters.templating/pprint-render-stack","clojure.string.join.cljs$core$IFn$_invoke$arity$2","cljs.core/reverse","devtools.formatters.templating/pprint-render-path","devtools.util.pprint_str.cljs$core$IFn$_invoke$arity$variadic","path","devtools.formatters.templating/assert-markup-error","msg","devtools.formatters.templating/surrogate-markup?","cljs.core/sequential?","devtools.formatters.templating/render-special","G__14268","name","devtools.formatters.templating/render-json-ml*","cljs.core/rest","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","obj","converted-args","converted-obj","devtools.formatters.templating/emptyish?","cljs.core/seqable?","cljs.core/array?","devtools.formatters.templating/render-subtree","vec__14273","cljs.core.apply.cljs$core$IFn$_invoke$arity$4","html-tag","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","*current-render-path*-temp-val__14277","*current-render-path*-orig-val__14276","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","devtools.formatters.templating/render-json-ml","*current-render-stack*-temp-val__14280","*current-render-path*-temp-val__14281","*current-render-path*-orig-val__14279","*current-render-stack*-orig-val__14278","devtools.formatters.templating/assert-failed-markup-rendering","initial-value","devtools.formatters.templating/render-markup*","cljs.core/Keyword","devtools.formatters.templating/render-markup"]}