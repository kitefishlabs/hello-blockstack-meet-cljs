{"version":3,"sources":["reagent/impl/batching.cljs"],"sourcesContent":["(ns reagent.impl.batching\n  (:refer-clojure :exclude [flush])\n  (:require [reagent.debug :refer-macros [dbg assert-some]]\n            [reagent.interop :refer-macros [$ $!]]\n            [reagent.impl.util :refer [is-client]]\n            [clojure.string :as string]))\n\n;;; Update batching\n\n(defonce mount-count 0)\n\n(defn next-mount-count []\n  (set! mount-count (inc mount-count)))\n\n(defn fake-raf [f]\n  (js/setTimeout f 16))\n\n(def next-tick\n  (if-not is-client\n    fake-raf\n    (let [w js/window]\n      (or ($ w :requestAnimationFrame)\n          ($ w :webkitRequestAnimationFrame)\n          ($ w :mozRequestAnimationFrame)\n          ($ w :msRequestAnimationFrame)\n          fake-raf))))\n\n(defn compare-mount-order [c1 c2]\n  (- ($ c1 :cljsMountOrder)\n     ($ c2 :cljsMountOrder)))\n\n(defn run-queue [a]\n  ;; sort components by mount order, to make sure parents\n  ;; are rendered before children\n  (.sort a compare-mount-order)\n  (dotimes [i (alength a)]\n    (let [c (aget a i)]\n      (when (true? ($ c :cljsIsDirty))\n        ($ c forceUpdate)))))\n\n\n;; Set from ratom.cljs\n(defonce ratom-flush (fn []))\n\n(deftype RenderQueue [^:mutable ^boolean scheduled?]\n  Object\n  (enqueue [this k f]\n    (assert-some f \"Enqueued function\")\n    (when (nil? (aget this k))\n      (aset this k (array)))\n    (.push (aget this k) f)\n    (.schedule this))\n\n  (run-funs [this k]\n    (when-some [fs (aget this k)]\n      (aset this k nil)\n      (dotimes [i (alength fs)]\n        ((aget fs i)))))\n\n  (schedule [this]\n    (when-not scheduled?\n      (set! scheduled? true)\n      (next-tick #(.run-queues this))))\n\n  (queue-render [this c]\n    (.enqueue this \"componentQueue\" c))\n\n  (add-before-flush [this f]\n    (.enqueue this \"beforeFlush\" f))\n\n  (add-after-render [this f]\n    (.enqueue this \"afterRender\" f))\n\n  (run-queues [this]\n    (set! scheduled? false)\n    (.flush-queues this))\n\n  (flush-after-render [this]\n    (.run-funs this \"afterRender\"))\n\n  (flush-queues [this]\n    (.run-funs this \"beforeFlush\")\n    (ratom-flush)\n    (when-some [cs (aget this \"componentQueue\")]\n      (aset this \"componentQueue\" nil)\n      (run-queue cs))\n    (.flush-after-render this)))\n\n(defonce render-queue (->RenderQueue false))\n\n(defn flush []\n  (.flush-queues render-queue))\n\n(defn flush-after-render []\n  (.flush-after-render render-queue))\n\n(defn queue-render [c]\n  (when-not ($ c :cljsIsDirty)\n    ($! c :cljsIsDirty true)\n    (.queue-render render-queue c)))\n\n(defn mark-rendered [c]\n  ($! c :cljsIsDirty false))\n\n(defn do-before-flush [f]\n  (.add-before-flush render-queue f))\n\n(defn do-after-render [f]\n  (.add-after-render render-queue f))\n\n(defn schedule []\n  (when (false? (.-scheduled? render-queue))\n    (.schedule render-queue)))\n"],"mappings":"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","names":["js/reagent","js/reagent.impl","js/reagent.impl.batching","js/reagent.impl.batching.mount-count","reagent.impl.batching/mount-count","reagent.impl.batching/next-mount-count","reagent.impl.batching/fake-raf","js/setTimeout","f","reagent.impl.batching/next-tick","reagent.impl.util/is-client","js/window","or__4047__auto__","w","reagent.impl.batching/compare-mount-order","c1","c2","reagent.impl.batching/run-queue","a","n__4518__auto__","i","c","js/reagent.impl.batching.ratom-flush","reagent.impl.batching/ratom-flush","cljs.core/-write","writer__4291__auto__","reagent.impl.batching/RenderQueue","reagent.impl.batching/->RenderQueue","scheduled?","js/Error","this","k","temp__5461__auto__","fs","fexpr__22398","G__22407","cs","js/reagent.impl.batching.render-queue","reagent.impl.batching/render-queue","reagent.impl.batching/flush","reagent.impl.batching/flush-after-render","reagent.impl.batching/queue-render","reagent.impl.batching/mark-rendered","reagent.impl.batching/do-before-flush","reagent.impl.batching/do-after-render","reagent.impl.batching/schedule"]}