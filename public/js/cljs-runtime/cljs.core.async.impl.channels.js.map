{"version":3,"sources":["cljs/core/async/impl/channels.cljs"],"sourcesContent":[";;   Copyright (c) Rich Hickey and contributors. All rights reserved.\n;;   The use and distribution terms for this software are covered by the\n;;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;;   which can be found in the file epl-v10.html at the root of this distribution.\n;;   By using this software in any fashion, you are agreeing to be bound by\n;;   the terms of this license.\n;;   You must not remove this notice, or any other, from this software.\n\n(ns cljs.core.async.impl.channels\n  (:require [cljs.core.async.impl.protocols :as impl]\n            [cljs.core.async.impl.dispatch :as dispatch]\n            [cljs.core.async.impl.buffers :as buffers]))\n\n\n\n(defn box [val]\n  (reify cljs.core/IDeref\n    (-deref [_] val)))\n\n(deftype PutBox [handler val])\n\n(defn put-active? [box]\n  (impl/active? (.-handler box)))\n\n(def ^:const MAX_DIRTY 64)\n\n(defprotocol MMC\n  (abort [this]))\n\n(deftype ManyToManyChannel [takes ^:mutable dirty-takes puts ^:mutable dirty-puts ^not-native buf ^:mutable closed add!]\n  MMC\n  (abort [this]\n    (loop []\n      (let [putter (.pop puts)]\n        (when-not (nil? putter)\n          (let [^not-native put-handler (.-handler putter)\n                val (.-val putter)]\n            (if ^boolean (impl/active? put-handler)\n              (let [put-cb (impl/commit put-handler)]\n                (dispatch/run #(put-cb true)))\n              (recur))))))\n    (.cleanup puts (constantly false))\n    (impl/close! this))\n  impl/WritePort\n  (put! [this val ^not-native handler]\n    (assert (not (nil? val)) \"Can't put nil on a channel\")\n    ;; bug in CLJS compiler boolean inference - David\n    (let [^boolean closed closed]\n      (if (or closed (not ^boolean (impl/active? handler)))\n        (box (not closed))\n        (if (and buf (not (impl/full? buf)))\n          (do\n            (impl/commit handler)\n            (let [done? (reduced? (add! buf val))\n                  take-cbs (loop [takers []]\n                             (if (and (pos? (.-length takes)) (pos? (count buf)))\n                               (let [^not-native taker (.pop takes)]\n                                 (if ^boolean (impl/active? taker)\n                                   (let [ret (impl/commit taker)\n                                         val (impl/remove! buf)]\n                                     (recur (conj takers (fn [] (ret val)))))\n                                   (recur takers)))\n                               takers))]\n              (when done? (abort this))\n              (when (seq take-cbs)\n                (doseq [f take-cbs]\n                  (dispatch/run f)))\n              (box true)))\n          (let [taker (loop []\n                        (let [^not-native taker (.pop takes)]\n                          (when taker\n                            (if (impl/active? taker)\n                              taker\n                              (recur)))))]\n            (if taker\n              (let [take-cb (impl/commit taker)]\n                (impl/commit handler)\n                (dispatch/run (fn [] (take-cb val)))\n                (box true))\n              (do\n                (if (> dirty-puts MAX_DIRTY)\n                  (do (set! dirty-puts 0)\n                      (.cleanup puts put-active?))\n                  (set! dirty-puts (inc dirty-puts)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length puts) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending puts are allowed on a single channel.\"\n                         \" Consider using a windowed buffer.\"))\n                  (.unbounded-unshift puts (PutBox. handler val)))\n                nil)))))))\n  impl/ReadPort\n  (take! [this ^not-native handler]\n    (if (not ^boolean (impl/active? handler))\n      nil\n      (if (and (not (nil? buf)) (pos? (count buf)))\n        (do\n          (if-let [take-cb (impl/commit handler)]\n            (let [val (impl/remove! buf)\n                  [done? cbs] (when (pos? (.-length puts))\n                                (loop [cbs []]\n                                  (let [putter (.pop puts)\n                                        ^not-native put-handler (.-handler putter)\n                                        val (.-val putter)\n                                        cb (and ^boolean (impl/active? put-handler) (impl/commit put-handler))\n                                        cbs (if cb (conj cbs cb) cbs)\n                                        done? (when cb (reduced? (add! buf val)))]\n                                    (if (and (not done?) (not (impl/full? buf)) (pos? (.-length puts)))\n                                      (recur cbs)\n                                      [done? cbs]))))]\n              (when done?\n                (abort this))\n              (doseq [cb cbs]\n                (dispatch/run #(cb true)))\n              (box val))))\n        (let [putter (loop []\n                       (let [putter (.pop puts)]\n                         (when putter\n                           (if ^boolean (impl/active? (.-handler putter))\n                             putter\n                             (recur)))))]\n          (if putter\n            (let [put-cb (impl/commit (.-handler putter))]\n              (impl/commit handler)\n              (dispatch/run #(put-cb true))\n              (box (.-val putter)))\n            (if closed\n              (do\n                (when buf (add! buf))\n                (if (and (impl/active? handler) (impl/commit handler))\n                  (let [has-val (and buf (pos? (count buf)))]\n                    (let [val (when has-val (impl/remove! buf))]\n                      (box val)))\n                  nil))\n              (do\n                (if (> dirty-takes MAX_DIRTY)\n                  (do (set! dirty-takes 0)\n                      (.cleanup takes impl/active?))\n                  (set! dirty-takes (inc dirty-takes)))\n                (when (impl/blockable? handler)\n                  (assert (< (.-length takes) impl/MAX-QUEUE-SIZE)\n                    (str \"No more than \" impl/MAX-QUEUE-SIZE\n                         \" pending takes are allowed on a single channel.\"))\n                  (.unbounded-unshift takes handler))\n                nil)))))))\n  impl/Channel\n  (closed? [_] closed)\n  (close! [this]\n    (if ^boolean closed\n        nil\n        (do (set! closed true)\n            (when (and buf (zero? (.-length puts)))\n                    (add! buf))\n            (loop []\n              (let [^not-native taker (.pop takes)]\n                (when-not (nil? taker)\n                  (when ^boolean (impl/active? taker)\n                    (let [take-cb (impl/commit taker)\n                          val (when (and buf (pos? (count buf))) (impl/remove! buf))]\n                      (dispatch/run (fn [] (take-cb val)))))\n                  (recur))))\n            (when buf (impl/close-buf! buf))\n            nil))))\n\n(defn- ex-handler [ex]\n  (.log js/console ex)\n  nil)\n\n(defn- handle [buf exh t]\n  (let [else ((or exh ex-handler) t)]\n    (if (nil? else)\n      buf\n      (impl/add! buf else))))\n\n(defn chan\n  ([buf] (chan buf nil))\n  ([buf xform] (chan buf xform nil))\n  ([buf xform exh]\n     (ManyToManyChannel. (buffers/ring-buffer 32) 0 (buffers/ring-buffer 32)\n                         0 buf false\n                         (let [add! (if xform (xform impl/add!) impl/add!)]\n                           (fn\n                             ([buf]\n                              (try\n                                (add! buf)\n                                (catch :default t\n                                  (handle buf exh t))))\n                             ([buf val]\n                              (try\n                                (add! buf val)\n                                (catch :default t\n                                  (handle buf exh t)))))))))\n"],"mappings":"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","names":["cljs.core.async.impl.channels/box","val","js/cljs","js/cljs.core","js/cljs.core.async","js/cljs.core.async.impl","js/cljs.core.async.impl.channels","js/cljs.core.async.impl.channels.t_cljs$core$async$impl$channels17505","cljs.core.async.impl.channels/t_cljs$core$async$impl$channels17505","meta17506","cljs.core/-write","writer__4291__auto__","cljs.core.async.impl.channels/->t_cljs$core$async$impl$channels17505","cljs.core.async.impl.channels/PutBox","cljs.core.async.impl.channels/->PutBox","handler","cljs.core.async.impl.channels/put-active?","cljs.core.async.impl.protocols/active?","box","cljs.core.async.impl.channels/MAX_DIRTY","cljs.core.async.impl.channels/abort","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","cljs.core.async.impl.channels/MMC","this","cljs.core/PROTOCOL_SENTINEL","cljs.core.async.impl.channels/ManyToManyChannel","cljs.core.async.impl.channels/->ManyToManyChannel","takes","dirty-takes","puts","dirty-puts","buf","closed","add!","putter","put-handler","cljs.core.async.impl.dispatch/run","put-cb","cljs.core/constantly","js/Error","and__4036__auto__","cljs.core/not","cljs.core/reduced?","cljs.core/count","taker","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","takers","ret","done?","cljs.core/seq","take-cbs","i__17517","count__17516","chunk__17515","seq__17514","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/first","cljs.core/next","f","cljs.core.async.impl.protocols/commit","take-cb","cljs.core.async.impl.protocols/MAX-QUEUE-SIZE","temp__5455__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__17525","cb","cbs","i__17531","count__17530","chunk__17529","seq__17528","has-val","cljs.core.async.impl.channels/ex-handler","js/console","ex","cljs.core.async.impl.channels/handle","fexpr__17562","or__4047__auto__","exh","t","else","cljs.core.async.impl.protocols.add_BANG_.cljs$core$IFn$_invoke$arity$2","G__17569","cljs.core.async.impl.channels/chan","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$2","cljs.core.async.impl.channels.chan.cljs$core$IFn$_invoke$arity$3","xform","cljs.core.async.impl.buffers/ring-buffer","cljs.core.async.impl.protocols/add!","e17576","e17578"]}