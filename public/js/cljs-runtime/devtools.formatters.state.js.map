{"version":3,"sources":["devtools/formatters/state.cljs"],"sourcesContent":["(ns devtools.formatters.state)\n\n; - state management --------------------------------------------------------------------------------------------------------\n;\n; we have to maintain some state:\n; a) to prevent infinite recursion in some pathological cases (https://github.com/binaryage/cljs-devtools/issues/2)\n; b) to keep track of printed objects to visually signal circular data structures\n;\n; We dynamically bind *current-config* to the config passed from \"outside\" when entering calls to our API methods.\n; Initially the state is empty, but we accumulate there a history of seen values when rendering individual values\n; in depth-first traversal order. See alt-printer-impl where we re-bind *current-config* for each traversal level.\n; But there is a catch. For larger data structures our printing methods usually do not print everything at once.\n; We can include so called \"object references\" which are just placeholders which can be expanded later\n; by DevTools UI (when user clicks a disclosure triangle).\n; For proper continuation in rendering of those references we have to carry our existing state over.\n; We use \"config\" feature of custom formatters system to pass current state to future API calls.\n\n(def ^:dynamic *current-state* nil)\n\n(defn valid-current-state? []\n  (some? *current-state*))\n\n(defn get-default-state []\n  {})\n\n(defn get-current-state []\n  {:pre [(valid-current-state?)]}\n  *current-state*)\n\n(defn update-current-state! [f & args]\n  {:pre [(valid-current-state?)]}\n  (set! *current-state* (apply f *current-state* args)))\n\n; -- high level API ---------------------------------------------------------------------------------------------------------\n\n(defn push-object-to-current-history! [object]\n  (update-current-state! update :history conj object))\n\n(defn get-current-history []\n  (:history (get-current-state)))\n\n(defn is-circular? [object]\n  (let [history (get-current-history)]\n    (some #(identical? % object) history)))\n\n(defn ^bool prevent-recursion? []\n  (boolean (:prevent-recursion (get-current-state))))\n\n(defn set-prevent-recursion [state val]\n  (if (some? val)\n    (assoc state :prevent-recursion val)\n    (dissoc state :prevent-recursion)))\n\n(defn get-managed-print-level []\n  (:managed-print-level (get-current-state)))\n\n(defn set-managed-print-level [state val]\n  (if (some? val)\n    (assoc state :managed-print-level val)\n    (dissoc state :managed-print-level)))\n\n(defn get-depth-budget []\n  (:depth-budget (get-current-state)))\n\n(defn set-depth-budget [state val]\n  (if (some? val)\n    (assoc state :depth-budget val)\n    (dissoc state :depth-budget)))\n\n(defn reset-depth-limits [state]\n  (-> state\n      (set-depth-budget nil)\n      (set-managed-print-level nil)))\n"],"mappings":";;AAiBA,AAAA,AAAeA;AAEf,AAAA,AAAMC;AAAN,AACE,AAAA,AAAA,AAAOD;;AAET,AAAA,AAAME;AAAN,AAAA;;AAGA,AAAA,AAAME;AAAN,AAAA,AACS,AAACH;AADV;AAAA,AAAA,AAAA,AAAAE,AAAA;;;AAEEH;;AAEF,AAAA,AAAA,AAAA,AAAMS;AAAN,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA;;AAAA,AAAA,AAAA,AAAAJ,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAF;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAA,AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAA,AAAAD,AAAA,AAA6B,AAAI;AAAjC,AAAA,AACS,AAACR;AADV;AAAA,AAAA,AAAA,AAAAE,AAAA;;;AAEE,AAAMH,AAAgB,AAACgB,AAAMC,AAAEjB,AAAgBkB;;;AAFjD,AAAA,AAAAT,AAAA;;AAAA;AAAA,AAAA,AAAAA,AAAA,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAE,AAAAC,AAAAH;;;AAAA,AAMA,AAAA,AAAMO,AAAiC;AAAvC,AACE,AAAA,AAACC,AAAsBC,AAAgBC,AAAKC;;AAE9C,AAAA,AAAMC;AAAN,AACE,AAAA,AAAU,AAACpB;;AAEb,AAAA,AAAMqB,AAAc;AAApB,AACE,AAAM,AAAQ,AAACD;AAAf,AACE,AAAA,AAACE;AAAD;AAAA,AAAO,AAAAC,AAAcJ;;AAAQK;;AAEjC,AAAA,AAAYC;AAAZ,AACE,AAACC,AAAQ,AAAA,AAAoB,AAAC1B;;AAEhC,AAAA,AAAM2B,AAAuB,AAAM;AAAnC,AACE,AAAI,AAAA,AAAA,AAAOC;AACT,AAAA,AAACC,AAAMC,AAAyBF;;AAChC,AAAA,AAACG,AAAOD;;;AAEZ,AAAA,AAAME;AAAN,AACE,AAAA,AAAsB,AAAChC;;AAEzB,AAAA,AAAMiC,AAAyB,AAAM;AAArC,AACE,AAAI,AAAA,AAAA,AAAOL;AACT,AAAA,AAACC,AAAMC,AAA2BF;;AAClC,AAAA,AAACG,AAAOD;;;AAEZ,AAAA,AAAMI;AAAN,AACE,AAAA,AAAe,AAAClC;;AAElB,AAAA,AAAMmC,AAAkB,AAAM;AAA9B,AACE,AAAI,AAAA,AAAA,AAAOP;AACT,AAAA,AAACC,AAAMC,AAAoBF;;AAC3B,AAAA,AAACG,AAAOD;;;AAEZ,AAAA,AAAMM,AAAoB;AAA1B,AACMN,AACA,AAAA,AAACK,AACD,AAAA,AAACF","names":["devtools.formatters.state/*current-state*","devtools.formatters.state/valid-current-state?","devtools.formatters.state/get-default-state","js/Error","devtools.formatters.state/get-current-state","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","devtools.formatters.state/update-current-state!","argseq__4648__auto__","cljs.core/first","seq12964","cljs.core/next","self__4628__auto__","G__12965","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","f","args","devtools.formatters.state/push-object-to-current-history!","devtools.formatters.state.update_current_state_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/conj","object","devtools.formatters.state/get-current-history","devtools.formatters.state/is-circular?","cljs.core/some","p1__13007#","history","devtools.formatters.state/prevent-recursion?","cljs.core/boolean","devtools.formatters.state/set-prevent-recursion","val","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","state","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","devtools.formatters.state/get-managed-print-level","devtools.formatters.state/set-managed-print-level","devtools.formatters.state/get-depth-budget","devtools.formatters.state/set-depth-budget","devtools.formatters.state/reset-depth-limits"]}