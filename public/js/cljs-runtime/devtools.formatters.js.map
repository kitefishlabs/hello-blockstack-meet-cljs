{"version":3,"sources":["devtools/formatters.cljs"],"sourcesContent":["(ns devtools.formatters\n  (:require-macros [devtools.oops :refer [unchecked-aget unchecked-aset]])\n  (:require [goog.labs.userAgent.browser :as ua]\n            [devtools.prefs :as prefs]\n            [devtools.util :refer [get-formatters-safe set-formatters-safe! in-node-context?]]\n            [devtools.context :as context]\n            [devtools.formatters.core :refer [header-api-call has-body-api-call body-api-call]]))\n\n(def ^:dynamic *installed* false)\n(def ^:dynamic *sanitizer-enabled* true)\n(def ^:dynamic *monitor-enabled* false)\n\n(def obsolete-formatter-key \"devtoolsFormatter\")\n\n(defn ^:dynamic available? []\n  (or (in-node-context?)                                                                                                      ; node.js or Chrome 47+\n      (and (ua/isChrome) (ua/isVersionOrHigher 47))))\n\n(deftype CLJSDevtoolsFormatter [])\n\n; devtools.debug namespace may not be present => no debugging\n(defn- find-fn-in-debug-ns [fn-name]\n  (try\n    (unchecked-aget (context/get-root) \"devtools\" \"debug\" fn-name)\n    (catch :default _\n      nil)))\n\n(defn- monitor-api-call-if-avail [name api-call args]\n  (if-let [monitor-api-call (find-fn-in-debug-ns \"monitor_api_call\")]\n    (monitor-api-call name api-call args)\n    (apply api-call args)))\n\n(defn- log-exception-if-avail [& args]\n  (if-let [log-exception (find-fn-in-debug-ns \"log_exception\")]\n    (apply log-exception args)))\n\n; monitors api calls in a separate debug console if debug namespace is available\n(defn- monitor-api-calls [name api-call]\n  (fn [& args]\n    (if-not *monitor-enabled*\n      (apply api-call args)\n      (monitor-api-call-if-avail name api-call args))))\n\n; wraps our api calls in a try-catch block to prevent leaking of exceptions in case something went wrong\n(defn- sanitize [name api-call]\n  (fn [& args]\n    (if-not *sanitizer-enabled*\n      (apply api-call args)                                                                                                   ; raw API call\n      (try\n        (apply api-call args)                                                                                                 ; wrapped API call\n        (catch :default e\n          (log-exception-if-avail (str name \": \" e))\n          nil)))))\n\n(defn- build-cljs-formatter []\n  (let [wrap (fn [name api-call]\n               (let [monitor (partial monitor-api-calls name)\n                     sanitizer (partial sanitize name)]\n                 ((comp monitor sanitizer) api-call)\n                 api-call))\n        formatter (CLJSDevtoolsFormatter.)\n        define! (fn [name fn]\n                  (unchecked-aset formatter name (wrap name fn)))]\n    (define! \"header\" header-api-call)\n    (define! \"hasBody\" has-body-api-call)\n    (define! \"body\" body-api-call)\n    formatter))\n\n(defn- is-ours? [o]\n  (instance? CLJSDevtoolsFormatter o))\n\n(defn- present? []\n  (let [formatters (get-formatters-safe)]\n    (boolean (some is-ours? formatters))))\n\n(defn- install-our-formatter! [formatter]\n  (let [formatters (.slice (get-formatters-safe))]                                                                            ; slice effectively duplicates the array\n    (.push formatters formatter)                                                                                              ; acting on duplicated array\n    (set-formatters-safe! formatters)\n    (if (prefs/pref :legacy-formatter)\n      (unchecked-aset (context/get-root) obsolete-formatter-key formatter))))\n\n(defn- uninstall-our-formatters! []\n  (let [new-formatters (remove is-ours? (vec (get-formatters-safe)))\n        new-formatters-js (if (empty? new-formatters) nil (into-array new-formatters))]\n    (set-formatters-safe! new-formatters-js)))\n\n; -- installation -----------------------------------------------------------------------------------------------------------\n\n(defn installed? []\n  *installed*)\n\n(defn install! []\n  (when-not *installed*\n    (set! *installed* true)\n    (install-our-formatter! (build-cljs-formatter))\n    true))\n\n(defn uninstall! []\n  (when *installed*\n    (set! *installed* false)\n    (uninstall-our-formatters!)))\n"],"mappings":"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","names":["devtools.formatters/*installed*","devtools.formatters/*sanitizer-enabled*","devtools.formatters/*monitor-enabled*","devtools.formatters/obsolete-formatter-key","devtools.formatters/available?","or__4047__auto__","devtools.util/in-node-context?","and__4036__auto__","goog.labs.userAgent.browser/isChrome","goog.labs.userAgent.browser/isVersionOrHigher","cljs.core/-write","writer__4291__auto__","devtools.formatters/CLJSDevtoolsFormatter","devtools.formatters/->CLJSDevtoolsFormatter","devtools.formatters/find-fn-in-debug-ns","e14845","devtools.context/get-root","fn-name","devtools.formatters/monitor-api-call-if-avail","temp__5455__auto__","monitor-api-call","name","api-call","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","i__4642__auto__","len__4641__auto__","args__4647__auto__","cljs.core/IndexedSeq","devtools.formatters/log-exception-if-avail","argseq__4648__auto__","self__4629__auto__","cljs.core/seq","seq14849","log-exception","devtools.formatters/monitor-api-calls","devtools.formatters/sanitize","e14850","devtools.formatters.log_exception_if_avail.cljs$core$IFn$_invoke$arity$variadic","e","devtools.formatters/build-cljs-formatter","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","fexpr__14858","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","monitor","sanitizer","formatter","wrap","fn","define!","devtools.formatters.core/header-api-call","devtools.formatters.core/has-body-api-call","devtools.formatters.core/body-api-call","devtools.formatters/is-ours?","o","devtools.formatters/present?","devtools.util/get-formatters-safe","cljs.core/boolean","cljs.core/some","formatters","devtools.formatters/install-our-formatter!","devtools.util/set-formatters-safe!","devtools.prefs/pref","devtools.formatters/uninstall-our-formatters!","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","cljs.core/vec","cljs.core/empty?","new-formatters","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","new-formatters-js","devtools.formatters/installed?","devtools.formatters/install!","devtools.formatters/uninstall!"]}