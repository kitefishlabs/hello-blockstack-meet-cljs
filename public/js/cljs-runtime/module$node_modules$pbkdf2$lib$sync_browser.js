shadow$provide.module$node_modules$pbkdf2$lib$sync_browser=function(global,process,require,module,exports,shadow$shims){function Hmac(alg,key,saltLen){var hash=getDigest(alg),blocksize="sha512"===alg||"sha384"===alg?128:64;key.length>blocksize?key=hash(key):key.length<blocksize&&(key=Buffer.concat([key,ZEROS],blocksize));for(var ipad=Buffer.allocUnsafe(blocksize+sizes[alg]),opad=Buffer.allocUnsafe(blocksize+sizes[alg]),i=0;i<blocksize;i++)ipad[i]=key[i]^54,opad[i]=key[i]^92;key=Buffer.allocUnsafe(blocksize+
saltLen+4);ipad.copy(key,0,0,blocksize);this.ipad1=key;this.ipad2=ipad;this.opad=opad;this.alg=alg;this.blocksize=blocksize;this.hash=hash;this.size=sizes[alg]}function getDigest(alg){function rmd160Func(data){return(new RIPEMD160).update(data).digest()}return"rmd160"===alg||"ripemd160"===alg?rmd160Func:"md5"===alg?md5:function(data){return sha(alg).update(data).digest()}}var md5=require("module$node_modules$create_hash$md5"),RIPEMD160=require("module$node_modules$ripemd160$index"),sha=require("module$node_modules$sha_DOT_js$index"),
checkParameters=require("module$node_modules$pbkdf2$lib$precondition"),defaultEncoding=require("module$node_modules$pbkdf2$lib$default_encoding"),Buffer=require("module$node_modules$safe_buffer$index").Buffer,ZEROS=Buffer.alloc(128),sizes={md5:16,sha1:20,sha224:28,sha256:32,sha384:48,sha512:64,rmd160:20,ripemd160:20};Hmac.prototype.run=function(data,ipad){data.copy(ipad,this.blocksize);this.hash(ipad).copy(this.opad,this.blocksize);return this.hash(this.opad)};module.exports=function(password,salt,
iterations,keylen,digest){checkParameters(password,salt,iterations,keylen);Buffer.isBuffer(password)||(password=Buffer.from(password,defaultEncoding));Buffer.isBuffer(salt)||(salt=Buffer.from(salt,defaultEncoding));digest=digest||"sha1";password=new Hmac(digest,password,salt.length);var DK=Buffer.allocUnsafe(keylen),block1=Buffer.allocUnsafe(salt.length+4);salt.copy(block1,0,0,salt.length);var destPos=0;digest=sizes[digest];keylen=Math.ceil(keylen/digest);for(var i=1;i<=keylen;i++){block1.writeUInt32BE(i,
salt.length);for(var T=password.run(block1,password.ipad1),U=T,j=1;j<iterations;j++){U=password.run(U,password.ipad2);for(var k=0;k<digest;k++)T[k]^=U[k]}T.copy(DK,destPos);destPos+=digest}return DK}}
//# sourceMappingURL=module$node_modules$pbkdf2$lib$sync_browser.js.map
