{"version":3,"sources":["shadow/cljs/devtools/client/console.cljs"],"sourcesContent":["(ns shadow.cljs.devtools.client.console\n  (:require [clojure.string :as str]))\n\n(defn- push-all [^js arr item]\n  (if (vector? item)\n    (doseq [it item]\n      (.push arr it))\n    (.push arr item)\n    ))\n\n(defn object-ref [obj]\n  (when obj\n    #js [\"object\" #js {:object obj}]))\n\n(defn map->style [m]\n  #js {:style\n       (->> m\n            (map (fn [[k v]] (str (name k) \": \" v \";\")))\n            (str/join \"\")\n            )})\n\n(defn clj->jsonml\n  [struct]\n\n  (cond\n    (nil? struct)\n    nil\n\n    (array? struct)\n    struct\n\n    (vector? struct)\n    (let [[tag attrs & children] struct\n          js #js [(name tag) (map->style attrs)]]\n      (doseq [child children]\n        (push-all js (clj->jsonml child)))\n      js)\n\n    (string? struct)\n    struct\n\n    (number? struct)\n    struct\n\n    (seq? struct)\n    (into [] (map clj->jsonml) struct)\n\n    :else\n    (object-ref struct)\n    ))\n\n(deftype SeqFormatter []\n  Object\n  (shadow$formatter [this] true)\n  (header [this obj]\n    (when (or (sequential? obj) (set? obj))\n      (clj->jsonml [:span {} (str (pr-str (type obj)) \" [count: \" (count obj) \"]\")])\n      ))\n  (hasBody [this obj]\n    (boolean (seq obj)))\n  (body [this s]\n    (clj->jsonml [:ol {:margin 0}\n                  (for [value s]\n                    [:li {} (object-ref value)])])))\n\n(deftype MapFormatter []\n  Object\n  (shadow$formatter [this] true)\n  (header [this obj]\n    (when (or (instance? cljs.core/PersistentHashMap obj)\n              (instance? cljs.core/PersistentArrayMap obj)\n              (record? obj))\n      (clj->jsonml [:span {} (str (pr-str (type obj)) \" [count: \" (count obj) \"]\")])\n      ))\n\n  (hasBody [this obj]\n    (boolean (seq obj)))\n\n  (body [this m]\n    (clj->jsonml\n      [:table {:width \"100%\" :margin-left \"14px\"}\n       (for [key (let [k (keys m)]\n                   (try\n                     (sort k)\n                     (catch :default e\n                       k)))\n             :let [value (get m key)]]\n         [:tr {:vertical-align \"top\"}\n          [:td {} (object-ref key)]\n          [:td {} (object-ref value)]])])))\n\n(def keyword-style {:color \"rgb(136, 19, 145)\"})\n\n(deftype KeywordFormatter []\n  Object\n  (shadow$formatter [this] true)\n  (header [this obj]\n    (when (keyword? obj)\n      (clj->jsonml [:span keyword-style (pr-str obj)])\n      ))\n  (hasBody [this obj]\n    false)\n  (body [this m]\n    nil))\n\n(deftype SymbolFormatter []\n  Object\n  (shadow$formatter [this] true)\n  (header [this obj]\n    (when (symbol? obj)\n      (clj->jsonml [:span keyword-style (pr-str obj)])\n      ))\n  (hasBody [this obj]\n    false)\n  (body [this m]\n    nil))\n\n(deftype DerefFormatter []\n  Object\n  (shadow$formatter [this] true)\n  (header [this obj]\n    (when (or (instance? Atom obj)\n              (instance? Volatile obj))\n      (clj->jsonml [:span keyword-style (str \"@DEREF \" (pr-str (type obj)))])\n      ))\n  (hasBody [this obj]\n    true)\n  (body [this v]\n    (clj->jsonml [:div {:margin-left \"14px\"} (object-ref @v)])))\n\n(defn install-all! []\n  (when-let [^js f js/goog.global.devtoolsFormatters]\n    (doto f\n      (.push (KeywordFormatter.))\n      (.push (MapFormatter.))\n      (.push (SeqFormatter.))\n      (.push (SymbolFormatter.))\n      (.push (DerefFormatter.)))\n\n    #_(js/console.log [1 \"2\" :3 'test {\"hello\" :world} '()])\n    ))\n\n(defn remove-all! []\n  (let [all\n        (->> (or js/goog.global.devtoolsFormatters #js [])\n             (array-seq)\n             (remove #(js/goog.object.get % \"shadow$formatter\"))\n             (into-array))]\n    (js/goog.object.set js/goog.global \"devtoolsFormatters\" all)))\n\n;; in case this is live-reloaded, clean up first\n;; has the side effect of creating window.devtoolsFormatters\n;; do not want to look at the user agent as settings this\n;; doesn't hurt any browser, only chrome with 47+ will use it\n(remove-all!)\n(install-all!)"],"mappings":"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","names":["shadow.cljs.devtools.client.console/push-all","cljs.core/vector?","item","cljs.core/seq","i__17094","count__17093","chunk__17092","seq__17091","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","cljs.core/first","cljs.core/next","arr","it","shadow.cljs.devtools.client.console/object-ref","obj","shadow.cljs.devtools.client.console/map->style","m","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__17110","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__17111","cljs.core/name","k","v","clojure.string.join.cljs$core$IFn$_invoke$arity$2","shadow.cljs.devtools.client.console/clj->jsonml","struct","cljs.core/array?","vec__17120","seq__17121","first__17122","tag","attrs","i__17126","count__17125","chunk__17124","seq__17123","children","js","child","cljs.core/seq?","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/-write","writer__4291__auto__","shadow.cljs.devtools.client.console/SeqFormatter","shadow.cljs.devtools.client.console/->SeqFormatter","cljs.core/sequential?","cljs.core/set?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/type","cljs.core/boolean","cljs.core/LazySeq","s__17176","c__4432__auto__","cljs.core/chunk-buffer","size__4433__auto__","i__17177","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","b__17178","cljs.core/chunk-cons","cljs.core/chunk","iter__17175","cljs.core/cons","cljs.core/rest","iter__4434__auto__","s","value","shadow.cljs.devtools.client.console/MapFormatter","shadow.cljs.devtools.client.console/->MapFormatter","cljs.core/PersistentHashMap","cljs.core/PersistentArrayMap","cljs.core/record?","s__17281","i__17282","b__17283","iter__17280","cljs.core/keys","e17298","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core.get.cljs$core$IFn$_invoke$arity$2","key","shadow.cljs.devtools.client.console/keyword-style","shadow.cljs.devtools.client.console/KeywordFormatter","shadow.cljs.devtools.client.console/->KeywordFormatter","cljs.core/Keyword","shadow.cljs.devtools.client.console/SymbolFormatter","shadow.cljs.devtools.client.console/->SymbolFormatter","cljs.core/Symbol","shadow.cljs.devtools.client.console/DerefFormatter","shadow.cljs.devtools.client.console/->DerefFormatter","cljs.core/Atom","cljs.core/Volatile","cljs.core/deref","shadow.cljs.devtools.client.console/install-all!","js/goog.global.devtoolsFormatters","G__17351","f","shadow.cljs.devtools.client.console/remove-all!","or__4047__auto__","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p1__17353#","js/goog.object.get","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","js/goog.object.set","js/goog.global","all"]}