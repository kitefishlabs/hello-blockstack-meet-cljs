{
"version":3,
"file":"module$node_modules$parse_asn1$fixProc.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,uCAAA,CAA2D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAExH,IAAIC,SAAW,yHAAf,CACIC,WAAa,4CADjB,CAEIC,UAAY,iFAFhB,CAGIC,IAAMP,OAAA,CAAQ,0CAAR,CAHV,CAIIQ,QAAUR,OAAA,CAAQ,4CAAR,CACdC;MAAAC,QAAA,CAAiBO,QAAS,CAACC,IAAD,CAAOC,QAAP,CAAiB,CACrCC,IAAAA,CAAMF,IAAAG,SAAA,EACV,KAAIC,MAAQF,IAAAE,MAAA,CAAUV,QAAV,CAEZ,IAAKU,KAAL,CAGO,CACL,IAAIC,MAAQ,KAARA,CAAgBD,KAAA,CAAM,CAAN,CAApB,CACIE,GAAK,IAAIC,mBAAJ,CAAWH,KAAA,CAAM,CAAN,CAAX,CAAqB,KAArB,CACLI,KAAAA,UAAa,IAAID,mBAAJ,CAAWH,KAAA,CAAM,CAAN,CAAAK,QAAA,CAAiB,SAAjB,CAA4B,EAA5B,CAAX,CAA4C,QAA5C,CACbC,MAAAA,CAAYb,GAAA,CAAII,QAAJ,CAAcK,EAAAK,MAAA,CAAS,CAAT,CAAY,CAAZ,CAAd,CAA8BC,QAAA,CAASR,KAAA,CAAM,CAAN,CAAT,CAAmB,EAAnB,CAA9B,CAAAF,IACZW,SAAAA,CAAM,EACNC,MAAAA,CAAShB,OAAAiB,iBAAA,CAAyBV,KAAzB,CAAgCK,KAAhC,CAA2CJ,EAA3C,CACbO,SAAAG,KAAA,CAASF,KAAAG,OAAA,CAAcT,SAAd,CAAT,CACAK,SAAAG,KAAA,CAASF,KAAAI,MAAA,EAAT,CACAC,UAAA,CAAYZ,mBAAAa,OAAA,CAAcP,QAAd,CATP,CAHP,IACMQ,UACJ,CADanB,IAAAE,MAAA,CAAUR,SAAV,CACb;AAAAuB,SAAA,CAAY,IAAIZ,mBAAJ,CAAWc,SAAA,CAAO,CAAP,CAAAZ,QAAA,CAAkB,SAAlB,CAA6B,EAA7B,CAAX,CAA6C,QAA7C,CAad,OAAO,CACLa,IAFQpB,IAAAE,MAAA,CAAUT,UAAV,CAAA2B,CAAsB,CAAtBA,CACH,CAELC,KAAMJ,SAFD,CAnBkC,CAP6E;",
"sources":["node_modules/parse-asn1/fixProc.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$parse_asn1$fixProc\"] = function(global,process,require,module,exports,shadow$shims) {\n// adapted from https://github.com/apatil/pemstrip\nvar findProc = /Proc-Type: 4,ENCRYPTED[\\n\\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\\n\\r]+([0-9A-z\\n\\r\\+\\/\\=]+)[\\n\\r]+/m\nvar startRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----/m\nvar fullRegex = /^-----BEGIN ((?:.* KEY)|CERTIFICATE)-----([0-9A-z\\n\\r\\+\\/\\=]+)-----END \\1-----$/m\nvar evp = require('evp_bytestokey')\nvar ciphers = require('browserify-aes')\nmodule.exports = function (okey, password) {\n  var key = okey.toString()\n  var match = key.match(findProc)\n  var decrypted\n  if (!match) {\n    var match2 = key.match(fullRegex)\n    decrypted = new Buffer(match2[2].replace(/[\\r\\n]/g, ''), 'base64')\n  } else {\n    var suite = 'aes' + match[1]\n    var iv = new Buffer(match[2], 'hex')\n    var cipherText = new Buffer(match[3].replace(/[\\r\\n]/g, ''), 'base64')\n    var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key\n    var out = []\n    var cipher = ciphers.createDecipheriv(suite, cipherKey, iv)\n    out.push(cipher.update(cipherText))\n    out.push(cipher.final())\n    decrypted = Buffer.concat(out)\n  }\n  var tag = key.match(startRegex)[1]\n  return {\n    tag: tag,\n    data: decrypted\n  }\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","findProc","startRegex","fullRegex","evp","ciphers","module.exports","okey","password","key","toString","match","suite","iv","Buffer","cipherText","replace","cipherKey","slice","parseInt","out","cipher","createDecipheriv","push","update","final","decrypted","concat","match2","tag","data"]
}
