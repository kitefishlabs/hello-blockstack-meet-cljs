shadow$provide.module$node_modules$bitcoinjs_lib$src$ecpair=function(global,process,require,module,exports,shadow$shims){function ECPair(d,Q,options){options=options||{};this.compressed=void 0===options.compressed?!0:options.compressed;this.network=options.network||NETWORKS.bitcoin;this.__d=d||null;this.__Q=null;Q&&(this.__Q=ecc.pointCompress(Q,this.compressed))}function fromPrivateKey(buffer,options){typeforce(types.Buffer256bit,buffer);if(!ecc.isPrivate(buffer))throw new TypeError("Private key not in range [1, n)");
typeforce(isOptions,options);return new ECPair(buffer,null,options)}var ecc=require("module$node_modules$tiny_secp256k1$ecurve"),randomBytes=require("module$node_modules$randombytes$browser"),typeforce=require("module$node_modules$typeforce$index"),types=require("module$node_modules$bitcoinjs_lib$src$types"),wif=require("module$node_modules$wif$index"),NETWORKS=require("module$node_modules$bitcoinjs_lib$src$networks"),isOptions=typeforce.maybe(typeforce.compile({compressed:types.maybe(types.Boolean),
network:types.maybe(types.Network)}));Object.defineProperty(ECPair.prototype,"privateKey",{enumerable:!1,get:function(){return this.__d}});Object.defineProperty(ECPair.prototype,"publicKey",{get:function(){this.__Q||(this.__Q=ecc.pointFromScalar(this.__d,this.compressed));return this.__Q}});ECPair.prototype.toWIF=function(){if(!this.__d)throw Error("Missing private key");return wif.encode(this.network.wif,this.__d,this.compressed)};ECPair.prototype.sign=function(hash){if(!this.__d)throw Error("Missing private key");
return ecc.sign(hash,this.__d)};ECPair.prototype.verify=function(hash,signature){return ecc.verify(hash,this.publicKey,signature)};module.exports={makeRandom:function(options){typeforce(isOptions,options);options=options||{};var rng=options.rng||randomBytes;do{var d=rng(32);typeforce(types.Buffer256bit,d)}while(!ecc.isPrivate(d));return fromPrivateKey(d,options)},fromPrivateKey:fromPrivateKey,fromPublicKey:function(buffer,options){typeforce(ecc.isPoint,buffer);typeforce(isOptions,options);return new ECPair(null,
buffer,options)},fromWIF:function(string,network){string=wif.decode(string);var version=string.version;if(types.Array(network)){if(network=network.filter(function(x){return version===x.wif}).pop(),!network)throw Error("Unknown network version");}else if(network=network||NETWORKS.bitcoin,version!==network.wif)throw Error("Invalid network version");return fromPrivateKey(string.privateKey,{compressed:string.compressed,network:network})}}}
//# sourceMappingURL=module$node_modules$bitcoinjs_lib$src$ecpair.js.map
