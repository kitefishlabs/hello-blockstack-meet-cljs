{"version":3,"sources":["clojure/set.cljs"],"sourcesContent":[";   Copyright (c) Rich Hickey. All rights reserved.\n;   The use and distribution terms for this software are covered by the\n;   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)\n;   which can be found in the file epl-v10.html at the root of this distribution.\n;   By using this software in any fashion, you are agreeing to be bound by\n;   the terms of this license.\n;   You must not remove this notice, or any other, from this software.\n\n(ns ^{:doc \"Set operations such as union/intersection.\"\n       :author \"Rich Hickey\"}\n       clojure.set)\n\n(defn- bubble-max-key [k coll]\n  \"Move a maximal element of coll according to fn k (which returns a number) \n   to the front of coll.\"\n  (let [max (apply max-key k coll)]\n    (cons max (remove #(identical? max %) coll))))\n\n(defn union\n  \"Return a set that is the union of the input sets\"\n  ([] #{})\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s1) (count s2))\n       (reduce conj s2 s1)\n       (reduce conj s1 s2)))\n  ([s1 s2 & sets]\n     (let [bubbled-sets (bubble-max-key count (conj sets s2 s1))]\n       (reduce into (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn intersection\n  \"Return a set that is the intersection of the input sets\"\n  ([s1] s1)\n  ([s1 s2]\n     (if (< (count s2) (count s1))\n       (recur s2 s1)\n       (reduce (fn [result item]\n                   (if (contains? s2 item)\n\t\t     result\n                     (disj result item)))\n\t       s1 s1)))\n  ([s1 s2 & sets] \n     (let [bubbled-sets (bubble-max-key #(- (count %)) (conj sets s2 s1))]\n       (reduce intersection (first bubbled-sets) (rest bubbled-sets)))))\n\n(defn difference\n  \"Return a set that is the first set without elements of the remaining sets\"\n  ([s1] s1)\n  ([s1 s2] \n     (if (< (count s1) (count s2))\n       (reduce (fn [result item] \n                   (if (contains? s2 item) \n                     (disj result item) \n                     result))\n               s1 s1)\n       (reduce disj s1 s2)))\n  ([s1 s2 & sets] \n     (reduce difference s1 (conj sets s2))))\n\n\n(defn select\n  \"Returns a set of the elements for which pred is true\"\n  [pred xset]\n    (reduce (fn [s k] (if (pred k) s (disj s k)))\n            xset xset))\n\n(defn project\n  \"Returns a rel of the elements of xrel with only the keys in ks\"\n  [xrel ks]\n    (set (map #(select-keys % ks) xrel)))\n\n(defn rename-keys\n  \"Returns the map with the keys in kmap renamed to the vals in kmap\"\n  [map kmap]\n    (reduce\n     (fn [m [old new]]\n       (if (contains? map old)\n         (assoc m new (get map old))\n         m))\n     (apply dissoc map (keys kmap)) kmap))\n\n(defn rename\n  \"Returns a rel of the maps in xrel with the keys in kmap renamed to the vals in kmap\"\n  [xrel kmap]\n    (set (map #(rename-keys % kmap) xrel)))\n\n(defn index\n  \"Returns a map of the distinct values of ks in the xrel mapped to a\n  set of the maps in xrel with the corresponding values of ks.\"\n  [xrel ks]\n    (reduce\n     (fn [m x]\n       (let [ik (select-keys x ks)]\n         (assoc m ik (conj (get m ik #{}) x))))\n     {} xrel))\n   \n(defn map-invert\n  \"Returns the map with the vals mapped to the keys.\"\n  [m] (reduce (fn [m [k v]] (assoc m v k)) {} m))\n\n(defn join\n  \"When passed 2 rels, returns the rel corresponding to the natural\n  join. When passed an additional keymap, joins on the corresponding\n  keys.\"\n  ([xrel yrel] ;natural join\n   (if (and (seq xrel) (seq yrel))\n     (let [ks (intersection (set (keys (first xrel))) (set (keys (first yrel))))\n           [r s] (if (<= (count xrel) (count yrel))\n                   [xrel yrel]\n                   [yrel xrel])\n           idx (index r ks)]\n       (reduce (fn [ret x]\n                 (let [found (idx (select-keys x ks))]\n                   (if found\n                     (reduce #(conj %1 (merge %2 x)) ret found)\n                     ret)))\n               #{} s))\n     #{}))\n  ([xrel yrel km] ;arbitrary key mapping\n   (let [[r s k] (if (<= (count xrel) (count yrel))\n                   [xrel yrel (map-invert km)]\n                   [yrel xrel km])\n         idx (index r (vals k))]\n     (reduce (fn [ret x]\n               (let [found (idx (rename-keys (select-keys x (keys k)) k))]\n                 (if found\n                   (reduce #(conj %1 (merge %2 x)) ret found)\n                   ret)))\n             #{} s))))\n\n(defn subset? \n  \"Is set1 a subset of set2?\"\n  [set1 set2]\n  (and (<= (count set1) (count set2))\n       (every? #(contains? set2 %) set1)))\n\n(defn superset? \n  \"Is set1 a superset of set2?\"\n  [set1 set2]\n  (and (>= (count set1) (count set2))\n       (every? #(contains? set1 %) set2)))\n\n(comment\n(refer 'set)\n(def xs #{{:a 11 :b 1 :c 1 :d 4}\n         {:a 2 :b 12 :c 2 :d 6}\n         {:a 3 :b 3 :c 3 :d 8 :f 42}})\n\n(def ys #{{:a 11 :b 11 :c 11 :e 5}\n         {:a 12 :b 11 :c 12 :e 3}\n         {:a 3 :b 3 :c 3 :e 7 }})\n\n(join xs ys)\n(join xs (rename ys {:b :yb :c :yc}) {:a :a})\n\n(union #{:a :b :c} #{:c :d :e })\n(difference #{:a :b :c} #{:c :d :e})\n(intersection #{:a :b :c} #{:c :d :e})\n\n(index ys [:b]))\n\n"],"mappings":"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","names":["clojure.set/bubble-max-key","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/max-key","k","coll","cljs.core/cons","max","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","p1__11104#","G__11115","clojure.set/union","i__4642__auto__","len__4641__auto__","args-arr__4662__auto__","cljs.core/IndexedSeq","argseq__4663__auto__","cljs.core/first","seq11111","cljs.core/next","self__4628__auto__","G__11112","G__11113","s1","cljs.core/count","s2","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/conj","cljs.core.conj.cljs$core$IFn$_invoke$arity$variadic","sets","cljs.core/into","bubbled-sets","cljs.core/rest","G__11132","clojure.set/intersection","seq11127","G__11128","G__11129","cljs.core/contains?","item","result","cljs.core.disj.cljs$core$IFn$_invoke$arity$2","p1__11123#","G__11153","clojure.set/difference","seq11150","G__11151","G__11152","cljs.core/disj","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","clojure.set/select","pred","s","xset","clojure.set/project","cljs.core/set","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__11162#","cljs.core/select-keys","ks","xrel","clojure.set/rename-keys","p__11170","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__11171","map","old","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","m","new","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/dissoc","cljs.core/keys","kmap","clojure.set/rename","p1__11176#","clojure.set/index","x","ik","cljs.core.get.cljs$core$IFn$_invoke$arity$3","clojure.set/map-invert","p__11190","vec__11191","v","G__11201","clojure.set/join","js/Error","cljs.core/seq","yrel","vec__11203","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","r","G__11208","idx","found","p1__11195#","p2__11196#","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","ret","vec__11211","km","cljs.core/vals","G__11218","p1__11198#","p2__11199#","clojure.set/subset?","set1","set2","cljs.core/every?","p1__11222#","clojure.set/superset?","p1__11223#"]}