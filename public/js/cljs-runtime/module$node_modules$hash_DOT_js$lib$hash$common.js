shadow$provide.module$node_modules$hash_DOT_js$lib$hash$common=function(global,process,require,module,exports,shadow$shims){function BlockHash(){this.pending=null;this.pendingTotal=0;this.blockSize=this.constructor.blockSize;this.outSize=this.constructor.outSize;this.hmacStrength=this.constructor.hmacStrength;this.padLength=this.constructor.padLength/8;this.endian="big";this._delta8=this.blockSize/8;this._delta32=this.blockSize/32}var utils=require("module$node_modules$hash_DOT_js$lib$hash$utils"),
assert=require("module$node_modules$minimalistic_assert$index");exports.BlockHash=BlockHash;BlockHash.prototype.update=function(msg,enc){msg=utils.toArray(msg,enc);this.pending=this.pending?this.pending.concat(msg):msg;this.pendingTotal+=msg.length;if(this.pending.length>=this._delta8)for(msg=this.pending,enc=msg.length%this._delta8,this.pending=msg.slice(msg.length-enc,msg.length),0===this.pending.length&&(this.pending=null),msg=utils.join32(msg,0,msg.length-enc,this.endian),enc=0;enc<msg.length;enc+=
this._delta32)this._update(msg,enc,enc+this._delta32);return this};BlockHash.prototype.digest=function(enc){this.update(this._pad());assert(null===this.pending);return this._digest(enc)};BlockHash.prototype._pad=function(){var len=this.pendingTotal,bytes=this._delta8,k=bytes-(len+this.padLength)%bytes;bytes=Array(k+this.padLength);bytes[0]=128;for(var i=1;i<k;i++)bytes[i]=0;len<<=3;if("big"===this.endian){for(k=8;k<this.padLength;k++)bytes[i++]=0;bytes[i++]=0;bytes[i++]=0;bytes[i++]=0;bytes[i++]=
0;bytes[i++]=len>>>24&255;bytes[i++]=len>>>16&255;bytes[i++]=len>>>8&255;bytes[i++]=len&255}else for(bytes[i++]=len&255,bytes[i++]=len>>>8&255,bytes[i++]=len>>>16&255,bytes[i++]=len>>>24&255,bytes[i++]=0,bytes[i++]=0,bytes[i++]=0,bytes[i++]=0,k=8;k<this.padLength;k++)bytes[i++]=0;return bytes}}
//# sourceMappingURL=module$node_modules$hash_DOT_js$lib$hash$common.js.map
