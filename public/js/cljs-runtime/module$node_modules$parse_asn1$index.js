shadow$provide.module$node_modules$parse_asn1$index=function(global,process,require,module,exports,shadow$shims){function parseKeys(buffer){if("object"===typeof buffer&&!Buffer.isBuffer(buffer)){var password=buffer.passphrase;buffer=buffer.key}"string"===typeof buffer&&(buffer=Buffer.from(buffer));var stripped=fixProc(buffer,password);buffer=stripped.tag;stripped=stripped.data;switch(buffer){case "CERTIFICATE":var ndata=asn1.certificate.decode(stripped,"der").tbsCertificate.subjectPublicKeyInfo;case "PUBLIC KEY":ndata||
(ndata=asn1.PublicKey.decode(stripped,"der"));password=ndata.algorithm.algorithm.join(".");switch(password){case "1.2.840.113549.1.1.1":return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data,"der");case "1.2.840.10045.2.1":return ndata.subjectPrivateKey=ndata.subjectPublicKey,{type:"ec",data:ndata};case "1.2.840.10040.4.1":return ndata.algorithm.params.pub_key=asn1.DSAparam.decode(ndata.subjectPublicKey.data,"der"),{type:"dsa",data:ndata.algorithm.params};default:throw Error("unknown key id "+
password);}throw Error("unknown key type "+buffer);case "ENCRYPTED PRIVATE KEY":var data=stripped=asn1.EncryptedPrivateKey.decode(stripped,"der");stripped=password;var salt=data.algorithm.decrypt.kde.kdeparams.salt,iters=parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(),10);ndata=aesid[data.algorithm.decrypt.cipher.algo.join(".")];buffer=data.algorithm.decrypt.cipher.iv;password=data.subjectPrivateKey;data=parseInt(ndata.split("-")[1],10)/8;stripped=compat.pbkdf2Sync(stripped,salt,iters,
data,"sha1");ndata=ciphers.createDecipheriv(ndata,stripped,buffer);buffer=[];buffer.push(ndata.update(password));buffer.push(ndata.final());stripped=Buffer.concat(buffer);case "PRIVATE KEY":ndata=asn1.PrivateKey.decode(stripped,"der");password=ndata.algorithm.algorithm.join(".");switch(password){case "1.2.840.113549.1.1.1":return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey,"der");case "1.2.840.10045.2.1":return{curve:ndata.algorithm.curve,privateKey:asn1.ECPrivateKey.decode(ndata.subjectPrivateKey,
"der").privateKey};case "1.2.840.10040.4.1":return ndata.algorithm.params.priv_key=asn1.DSAparam.decode(ndata.subjectPrivateKey,"der"),{type:"dsa",params:ndata.algorithm.params};default:throw Error("unknown key id "+password);}throw Error("unknown key type "+buffer);case "RSA PUBLIC KEY":return asn1.RSAPublicKey.decode(stripped,"der");case "RSA PRIVATE KEY":return asn1.RSAPrivateKey.decode(stripped,"der");case "DSA PRIVATE KEY":return{type:"dsa",params:asn1.DSAPrivateKey.decode(stripped,"der")};case "EC PRIVATE KEY":return stripped=
asn1.ECPrivateKey.decode(stripped,"der"),{curve:stripped.parameters.value,privateKey:stripped.privateKey};default:throw Error("unknown key type "+buffer);}}var asn1=require("module$node_modules$parse_asn1$asn1"),aesid=require("module$node_modules$parse_asn1$aesid_json"),fixProc=require("module$node_modules$parse_asn1$fixProc"),ciphers=require("module$node_modules$browserify_aes$browser"),compat=require("module$node_modules$pbkdf2$browser"),Buffer=require("module$node_modules$safe_buffer$index").Buffer;
module.exports=parseKeys;parseKeys.signature=asn1.signature}
//# sourceMappingURL=module$node_modules$parse_asn1$index.js.map
