{"version":3,"sources":["shadow/cljs/devtools/client/env.cljs"],"sourcesContent":["(ns shadow.cljs.devtools.client.env\n  (:require\n    [goog.object :as gobj]\n    [clojure.string :as str]\n    [cljs.tools.reader :as reader]\n    [cljs.pprint :refer (pprint)]\n    ))\n\n;; FIXME: make this persistent somehow?\n(defonce runtime-id (str (random-uuid)))\n\n(goog-define enabled false)\n\n(goog-define autoload true)\n\n(goog-define module-format \"goog\")\n\n(goog-define reload-with-state false)\n\n(goog-define build-id \"\")\n\n(goog-define proc-id \"\")\n\n(goog-define server-host \"\")\n\n(goog-define server-port 8200)\n\n(goog-define repl-pprint false)\n\n(goog-define use-document-host true)\n\n(goog-define devtools-url \"\")\n\n(goog-define ssl false)\n\n(goog-define ignore-warnings false)\n\n(defn devtools-info []\n  #js {:server-port server-port\n       :server-host server-host\n       :build-id build-id\n       :proc-id proc-id\n       :runtime-id runtime-id})\n\n(defn get-server-host []\n  (cond\n    (and use-document-host\n         js/goog.global.document\n         js/goog.global.document.location\n         (seq js/goog.global.document.location.hostname))\n    js/document.location.hostname\n\n    (seq server-host)\n    server-host\n\n    :else\n    \"localhost\"))\n\n(defn get-url-base []\n  (if (seq devtools-url)\n    devtools-url\n    (str \"http\" (when ssl \"s\") \"://\" (get-server-host) \":\" server-port)))\n\n(defn get-ws-url-base []\n  (-> (get-url-base)\n      (str/replace #\"^http\" \"ws\")))\n\n(defn ws-url [runtime-type]\n  {:pre [(keyword? runtime-type)]}\n  (str (get-ws-url-base) \"/ws/worker/\" build-id \"/\" proc-id \"/\" runtime-id \"/\" (name runtime-type)))\n\n(defn ws-listener-url [client-type]\n  (str (get-ws-url-base) \"/ws/listener/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(defn files-url []\n  (str (get-url-base) \"/worker/files/\" build-id \"/\" proc-id \"/\" runtime-id))\n\n(def repl-print-fn\n  (if-not repl-pprint\n    pr-str\n    (fn repl-pprint [obj]\n      (with-out-str\n        (pprint obj)\n        ))))\n\n(defn repl-error [e]\n  (-> {:type :repl/invoke-error\n       ;; FIXME: may contain non-printable things and would break the client read\n       ;; :ex-data (ex-data e)\n       :error (.-message e)}\n      (cond->\n        (.hasOwnProperty e \"stack\")\n        (assoc :stack (.-stack e)))))\n\n(defonce repl-results-ref (atom {}))\n\n(defn repl-call [repl-expr repl-error]\n  (try\n    (let [result-id (str (random-uuid))\n          result {:type :repl/result\n                  :result-id result-id}\n          ret (repl-expr)]\n\n      ;; FIXME: this needs some kind of GC, shouldn't keep every single result forever\n      (swap! repl-results-ref assoc result-id {:timestamp (js/Date.now)\n                                               :result ret})\n\n      ;; FIXME: these are nonsense with multiple sessions. refactor this properly\n      (set! *3 *2)\n      (set! *2 *1)\n      (set! *1 ret)\n\n      (try\n        (let [printed (repl-print-fn ret)]\n          (swap! repl-results-ref assoc-in [result-id :printed] printed)\n          (assoc result :value printed))\n        (catch :default e\n          (js/console.log \"encoding of result failed\" e ret)\n          (assoc result :error \"ENCODING FAILED\"))))\n    (catch :default e\n      (set! *e e)\n      (repl-error e)\n      )))\n\n;; FIXME: this need to become idempotent somehow\n;; but is something sets a print-fn we can't tell if that\n;; will actually call ours. only a problem if the websocket is\n;; reconnected though\n(defonce reset-print-fn-ref (atom nil))\n\n(defn set-print-fns! [msg-fn]\n  ;; cannot capture these before as they may change in between loading this file\n  ;; and running the websocket connect. the user code is loaded after this file\n  (let [original-print-fn cljs.core/*print-fn*\n        original-print-err-fn cljs.core/*print-err-fn*]\n\n    (reset! reset-print-fn-ref\n      (fn reset-print-fns! []\n        (set-print-fn! original-print-fn)\n        (set-print-err-fn! original-print-err-fn)))\n\n    (set-print-fn!\n      (fn repl-print-fn [& args]\n        (msg-fn {:type :repl/out :text (str/join \"\" args)})\n        (when original-print-fn\n          (apply original-print-fn args))))\n\n    (set-print-err-fn!\n      (fn repl-print-err-fn [& args]\n        (msg-fn {:type :repl/err :text (str/join \"\" args)})\n        (when original-print-err-fn\n          (apply original-print-err-fn args))))))\n\n(defn reset-print-fns! []\n  (when-let [x @reset-print-fn-ref]\n    (x)\n    (reset! reset-print-fn-ref nil)))\n\n(defn process-ws-msg [text handler]\n  (binding [reader/*default-data-reader-fn*\n            (fn [tag value]\n              [:tagged-literal tag value])]\n    (try\n      (let [msg (reader/read-string text)]\n        (handler msg))\n      (catch :default e\n        (js/console.warn \"failed to parse websocket message\" text e)\n        (throw e)))))\n\n(defn make-task-fn [{:keys [log-missing-fn log-call-async log-call]} {:keys [fn-sym fn-str async]}]\n  (fn [next]\n    (try\n      (let [fn-obj (js/goog.getObjectByName fn-str js/$CLJS)]\n        (cond\n          (nil? fn-obj)\n          (do (when log-missing-fn\n                (log-missing-fn fn-sym))\n              (next))\n\n          async\n          (do (when log-call-async\n                (log-call-async fn-sym))\n              (fn-obj next))\n\n          :else\n          (do (when log-call\n                (log-call fn-sym))\n              (fn-obj)\n              (next))))\n      (catch :default ex\n        (js/console.warn \"error when calling lifecycle function\" (str fn-sym) ex)\n        (next)))))\n\n(defn do-js-reload* [failure-fn [task & remaining-tasks]]\n  (when task\n    (try\n      (task #(do-js-reload* failure-fn remaining-tasks))\n      (catch :default e\n        (failure-fn e task remaining-tasks)))))\n\n(defn do-js-reload\n  \"should pass the :build-complete message and an additional callback\n   which performs the actual loading of the code (sync)\n   will call all before/after callbacks in order\"\n  ([msg load-code-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     (fn [])))\n  ([msg load-code-fn complete-fn]\n   (do-js-reload\n     msg\n     load-code-fn\n     complete-fn\n     (fn [error task remaining]\n       (js/console.warn \"JS reload failed\" error))))\n  ([{:keys [reload-info] :as msg} load-code-fn complete-fn failure-fn]\n   (let [load-tasks\n         (-> []\n             ;; unload is FILO\n             (into (->> (:before-load reload-info)\n                        (map #(make-task-fn msg %))\n                        (reverse)))\n             (conj (fn [next]\n                     (load-code-fn)\n                     (next)))\n             ;; load is FIFO\n             (into (map #(make-task-fn msg %)) (:after-load reload-info))\n             (conj (fn [next]\n                     (complete-fn)\n                     (next))))]\n\n     (do-js-reload* failure-fn load-tasks))))\n\n(defn before-load-src [{:keys [type ns] :as src}]\n  (when (= :cljs type)\n    (doseq [x js/goog.global.SHADOW_NS_RESET]\n      (x ns))))\n\n(defonce custom-msg-subscribers-ref (atom {}))\n\n(defn subscribe! [sub-id callback]\n  (swap! custom-msg-subscribers-ref assoc sub-id callback))\n\n(defn publish! [msg]\n  (doseq [[id callback] @custom-msg-subscribers-ref]\n    (try\n      (callback msg)\n      (catch :default e\n        (js/console.warn \"failed to handle custom msg\" id msg)))))\n"],"mappings":"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","names":["js/shadow","js/shadow.cljs","js/shadow.cljs.devtools","js/shadow.cljs.devtools.client","js/shadow.cljs.devtools.client.env","js/shadow.cljs.devtools.client.env.runtime-id","shadow.cljs.devtools.client.env/runtime-id","cljs.core/random-uuid","goog/define","shadow.cljs.devtools.client.env/devtools-info","shadow.cljs.devtools.client.env/server-port","shadow.cljs.devtools.client.env/server-host","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","shadow.cljs.devtools.client.env/get-server-host","and__4036__auto__","shadow.cljs.devtools.client.env/use-document-host","js/goog.global.document","js/goog.global.document.location","cljs.core/seq","js/goog.global.document.location.hostname","js/document.location.hostname","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env/devtools-url","shadow.cljs.devtools.client.env/ssl","shadow.cljs.devtools.client.env/get-ws-url-base","clojure.string/replace","js/Error","shadow.cljs.devtools.client.env/ws-url","cljs.core/Keyword","runtime-type","cljs.core/name","shadow.cljs.devtools.client.env/ws-listener-url","shadow.cljs.devtools.client.env/files-url","shadow.cljs.devtools.client.env/repl-print-fn","shadow.cljs.devtools.client.env/repl-pprint","cljs.core/pr-str","goog.string/StringBuffer","cljs.core/*print-newline*","cljs.core/*print-fn*","sb__4572__auto__","x__4573__auto__","*print-newline*-temp-val__17152","*print-fn*-temp-val__17154","*print-fn*-orig-val__17151","*print-newline*-orig-val__17150","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","obj","shadow.cljs.devtools.client.env/repl-error","e","G__17172","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","js/shadow.cljs.devtools.client.env.repl-results-ref","shadow.cljs.devtools.client.env/repl-results-ref","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","shadow.cljs.devtools.client.env/repl-call","e17174","result-id","repl-expr","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","js/Date.now","ret","cljs.core/*3","cljs.core/*2","cljs.core/*1","e17179","cljs.core/assoc-in","printed","result","js/console.log","cljs.core/*e","repl-error","js/shadow.cljs.devtools.client.env.reset-print-fn-ref","shadow.cljs.devtools.client.env/reset-print-fn-ref","shadow.cljs.devtools.client.env/set-print-fns!","cljs.core/*print-err-fn*","cljs.core/reset!","cljs.core/set-print-fn!","original-print-fn","cljs.core/set-print-err-fn!","original-print-err-fn","G__17209","msg-fn","clojure.string.join.cljs$core$IFn$_invoke$arity$2","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","G__17212","shadow.cljs.devtools.client.env/reset-print-fns!","cljs.core/deref","temp__5457__auto__","x","shadow.cljs.devtools.client.env/process-ws-msg","*default-data-reader-fn*-temp-val__17229","*default-data-reader-fn*-orig-val__17228","cljs.tools.reader/*default-data-reader-fn*","tag","value","e17230","cljs.tools.reader.read_string.cljs$core$IFn$_invoke$arity$1","text","handler","msg","js/console.warn","p__17248","map__17250","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","p__17249","map__17251","shadow.cljs.devtools.client.env/make-task-fn","e17259","js/goog.getObjectByName","fn-str","js/$CLJS","fn-obj","log-missing-fn","fn-sym","next","async","log-call-async","log-call","ex","p__17276","vec__17277","cljs.core/first","seq__17278","cljs.core/next","first__17279","shadow.cljs.devtools.client.env/do-js-reload*","task","e17284","G__17285","failure-fn","remaining-tasks","G__17292","shadow.cljs.devtools.client.env/do-js-reload","p__17293","map__17294","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$3","load-code-fn","shadow.cljs.devtools.client.env.do_js_reload.cljs$core$IFn$_invoke$arity$4","complete-fn","error","cljs.core.into.cljs$core$IFn$_invoke$arity$2","reload-info","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p1__17286#","cljs.core/reverse","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.map.cljs$core$IFn$_invoke$arity$1","p1__17287#","load-tasks","p__17302","map__17303","shadow.cljs.devtools.client.env/before-load-src","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","type","i__17308","count__17307","chunk__17306","seq__17305","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","cljs.core/count","js/goog.global.SHADOW_NS_RESET","ns","js/shadow.cljs.devtools.client.env.custom-msg-subscribers-ref","shadow.cljs.devtools.client.env/custom-msg-subscribers-ref","shadow.cljs.devtools.client.env/subscribe!","sub-id","callback","shadow.cljs.devtools.client.env/publish!","i__17316","count__17315","chunk__17314","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","vec__17317","seq__17313","vec__17339","e17326","e17342","id"]}