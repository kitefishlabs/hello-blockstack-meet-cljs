{
"version":3,
"file":"module$node_modules$elliptic$lib$elliptic$curves.js",
"lineCount":11,
"mappings":"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",
"sources":["node_modules/elliptic/lib/elliptic/curves.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$elliptic$lib$elliptic$curves\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nvar curves = exports;\n\nvar hash = require('hash.js');\nvar elliptic = require('../elliptic');\n\nvar assert = elliptic.utils.assert;\n\nfunction PresetCurve(options) {\n  if (options.type === 'short')\n    this.curve = new elliptic.curve.short(options);\n  else if (options.type === 'edwards')\n    this.curve = new elliptic.curve.edwards(options);\n  else\n    this.curve = new elliptic.curve.mont(options);\n  this.g = this.curve.g;\n  this.n = this.curve.n;\n  this.hash = options.hash;\n\n  assert(this.g.validate(), 'Invalid curve');\n  assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');\n}\ncurves.PresetCurve = PresetCurve;\n\nfunction defineCurve(name, options) {\n  Object.defineProperty(curves, name, {\n    configurable: true,\n    enumerable: true,\n    get: function() {\n      var curve = new PresetCurve(options);\n      Object.defineProperty(curves, name, {\n        configurable: true,\n        enumerable: true,\n        value: curve\n      });\n      return curve;\n    }\n  });\n}\n\ndefineCurve('p192', {\n  type: 'short',\n  prime: 'p192',\n  p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',\n  b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',\n  n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',\n    '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811'\n  ]\n});\n\ndefineCurve('p224', {\n  type: 'short',\n  prime: 'p224',\n  p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',\n  a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',\n  b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',\n  n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',\n    'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34'\n  ]\n});\n\ndefineCurve('p256', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',\n  a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',\n  b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',\n  n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',\n    '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5'\n  ]\n});\n\ndefineCurve('p384', {\n  type: 'short',\n  prime: null,\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 ffffffff',\n  a: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'fffffffe ffffffff 00000000 00000000 fffffffc',\n  b: 'b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f ' +\n     '5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef',\n  n: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 ' +\n     'f4372ddf 581a0db2 48b0a77a ecec196a ccc52973',\n  hash: hash.sha384,\n  gRed: false,\n  g: [\n    'aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 ' +\n    '5502f25d bf55296c 3a545e38 72760ab7',\n    '3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 ' +\n    '0a60b1ce 1d7e819d 7a431d7c 90ea0e5f'\n  ]\n});\n\ndefineCurve('p521', {\n  type: 'short',\n  prime: null,\n  p: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff',\n  a: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff ffffffff ffffffff fffffffc',\n  b: '00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b ' +\n     '99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd ' +\n     '3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00',\n  n: '000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ' +\n     'ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 ' +\n     'f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409',\n  hash: hash.sha512,\n  gRed: false,\n  g: [\n    '000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 ' +\n    '053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 ' +\n    'a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66',\n    '00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 ' +\n    '579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 ' +\n    '3fad0761 353c7086 a272c240 88be9476 9fd16650'\n  ]\n});\n\ndefineCurve('curve25519', {\n  type: 'mont',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '76d06',\n  b: '1',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '9'\n  ]\n});\n\ndefineCurve('ed25519', {\n  type: 'edwards',\n  prime: 'p25519',\n  p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',\n  a: '-1',\n  c: '1',\n  // -121665 * (121666^(-1)) (mod P)\n  d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',\n  n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',\n  hash: hash.sha256,\n  gRed: false,\n  g: [\n    '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',\n\n    // 4/5\n    '6666666666666666666666666666666666666666666666666666666666666658'\n  ]\n});\n\nvar pre;\ntry {\n  pre = require('./precomputed/secp256k1');\n} catch (e) {\n  pre = undefined;\n}\n\ndefineCurve('secp256k1', {\n  type: 'short',\n  prime: 'k256',\n  p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',\n  a: '0',\n  b: '7',\n  n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',\n  h: '1',\n  hash: hash.sha256,\n\n  // Precomputed endomorphism\n  beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',\n  lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',\n  basis: [\n    {\n      a: '3086d221a7d46bcde86c90e49284eb15',\n      b: '-e4437ed6010e88286f547fa90abfe4c3'\n    },\n    {\n      a: '114ca50f7a8e2f3f657c1108d9d44cfd8',\n      b: '3086d221a7d46bcde86c90e49284eb15'\n    }\n  ],\n\n  gRed: false,\n  g: [\n    '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',\n    '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',\n    pre\n  ]\n});\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","PresetCurve","options","curve","type","elliptic","short","edwards","mont","g","n","hash","assert","validate","mul","isInfinity","defineCurve","name","Object","defineProperty","curves","configurable","enumerable","get","value","utils","prime","p","a","b","sha256","gRed","sha384","sha512","c","d","pre","e","undefined","h","beta","lambda","basis"]
}
