shadow$provide.module$node_modules$hmac_drbg$lib$hmac_drbg=function(global,process,require,module,exports,shadow$shims){function HmacDRBG(options){if(!(this instanceof HmacDRBG))return new HmacDRBG(options);this.hash=options.hash;this.predResist=!!options.predResist;this.outLen=this.hash.outSize;this.minEntropy=options.minEntropy||this.hash.hmacStrength;this.V=this.K=this.reseedInterval=this._reseed=null;var entropy=utils.toArray(options.entropy,options.entropyEnc||"hex"),nonce=utils.toArray(options.nonce,
options.nonceEnc||"hex");options=utils.toArray(options.pers,options.persEnc||"hex");assert(entropy.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits");this._init(entropy,nonce,options)}var hash=require("module$node_modules$hash_DOT_js$lib$hash"),utils=require("module$node_modules$minimalistic_crypto_utils$lib$utils"),assert=require("module$node_modules$minimalistic_assert$index");module.exports=HmacDRBG;HmacDRBG.prototype._init=function(entropy,nonce,pers){entropy=
entropy.concat(nonce).concat(pers);this.K=Array(this.outLen/8);this.V=Array(this.outLen/8);for(nonce=0;nonce<this.V.length;nonce++)this.K[nonce]=0,this.V[nonce]=1;this._update(entropy);this._reseed=1;this.reseedInterval=281474976710656};HmacDRBG.prototype._hmac=function(){return new hash.hmac(this.hash,this.K)};HmacDRBG.prototype._update=function(seed){var kmac=this._hmac().update(this.V).update([0]);seed&&(kmac=kmac.update(seed));this.K=kmac.digest();this.V=this._hmac().update(this.V).digest();seed&&
(this.K=this._hmac().update(this.V).update([1]).update(seed).digest(),this.V=this._hmac().update(this.V).digest())};HmacDRBG.prototype.reseed=function(entropy,entropyEnc,add,addEnc){"string"!==typeof entropyEnc&&(addEnc=add,add=entropyEnc,entropyEnc=null);entropy=utils.toArray(entropy,entropyEnc);add=utils.toArray(add,addEnc);assert(entropy.length>=this.minEntropy/8,"Not enough entropy. Minimum is: "+this.minEntropy+" bits");this._update(entropy.concat(add||[]));this._reseed=1};HmacDRBG.prototype.generate=
function(len,enc,add,addEnc){if(this._reseed>this.reseedInterval)throw Error("Reseed is required");"string"!==typeof enc&&(addEnc=add,add=enc,enc=null);add&&(add=utils.toArray(add,addEnc||"hex"),this._update(add));for(addEnc=[];addEnc.length<len;)this.V=this._hmac().update(this.V).digest(),addEnc=addEnc.concat(this.V);len=addEnc.slice(0,len);this._update(add);this._reseed++;return utils.encode(len,enc)}}
//# sourceMappingURL=module$node_modules$hmac_drbg$lib$hmac_drbg.js.map
