{"version":3,"sources":["reagent/ratom.cljs"],"sourcesContent":["(ns reagent.ratom\n  (:refer-clojure :exclude [atom])\n  (:require-macros [reagent.ratom :refer [with-let]])\n  (:require [reagent.impl.util :as util]\n            [reagent.debug :refer-macros [dbg log warn error dev? time]]\n            [reagent.impl.batching :as batch]\n            [clojure.set :as s]))\n\n(declare ^:dynamic *ratom-context*)\n(defonce ^boolean debug false)\n(defonce ^:private generation 0)\n(defonce ^:private -running (clojure.core/atom 0))\n\n(defn ^boolean reactive? []\n  (some? *ratom-context*))\n\n\n;;; Utilities\n\n(defn running []\n  (+ @-running))\n\n(defn- ^number arr-len [x]\n  (if (nil? x) 0 (alength x)))\n\n(defn- ^boolean arr-eq [x y]\n  (let [len (arr-len x)]\n    (and (== len (arr-len y))\n         (loop [i 0]\n           (or (== i len)\n               (if (identical? (aget x i) (aget y i))\n                 (recur (inc i))\n                 false))))))\n\n(defn- in-context [obj f]\n  (binding [*ratom-context* obj]\n    (f)))\n\n(defn- deref-capture [f r]\n  (set! (.-captured r) nil)\n  (when (dev?)\n    (set! (.-ratomGeneration r) (set! generation (inc generation))))\n  (let [res (in-context r f)\n        c (.-captured r)]\n    (set! (.-dirty? r) false)\n    ;; Optimize common case where derefs occur in same order\n    (when-not (arr-eq c (.-watching r))\n      (._update-watching r c))\n    res))\n\n(defn- notify-deref-watcher! [derefed]\n  (when-some [r *ratom-context*]\n    (let [c (.-captured r)]\n      (if (nil? c)\n        (set! (.-captured r) (array derefed))\n        (.push c derefed)))))\n\n(defn- check-watches [old new]\n  (when debug\n    (swap! -running + (- (count new) (count old))))\n  new)\n\n(defn- add-w [this key f]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (assoc w key f)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- remove-w [this key]\n  (let [w (.-watches this)]\n    (set! (.-watches this) (check-watches w (dissoc w key)))\n    (set! (.-watchesArr this) nil)))\n\n(defn- notify-w [this old new]\n  (let [w (.-watchesArr this)\n        a (if (nil? w)\n            ;; Copy watches to array for speed\n            (->> (.-watches this)\n                 (reduce-kv #(doto %1 (.push %2) (.push %3)) #js[])\n                 (set! (.-watchesArr this)))\n            w)]\n    (let [len (alength a)]\n      (loop [i 0]\n        (when (< i len)\n          (let [k (aget a i)\n                f (aget a (inc i))]\n            (f k this old new))\n          (recur (+ 2 i)))))))\n\n(defn- pr-atom [a writer opts s]\n  (-write writer (str \"#<\" s \" \"))\n  (pr-writer (binding [*ratom-context* nil] (-deref a)) writer opts)\n  (-write writer \">\"))\n\n\n;;; Queueing\n\n(defonce ^:private rea-queue nil)\n\n(defn- rea-enqueue [r]\n  (when (nil? rea-queue)\n    (set! rea-queue (array))\n    (batch/schedule))\n  (.push rea-queue r))\n\n(defn flush! []\n  (loop []\n    (let [q rea-queue]\n      (when-not (nil? q)\n        (set! rea-queue nil)\n        (dotimes [i (alength q)]\n          (._queued-run (aget q i)))\n        (recur)))))\n\n(set! batch/ratom-flush flush!)\n\n\n;;; Atom\n\n(defprotocol IReactiveAtom)\n\n(deftype RAtom [^:mutable state meta validator ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IDeref\n  (-deref [this]\n    (notify-deref-watcher! this)\n    state)\n\n  IReset\n  (-reset! [a new-value]\n    (when-not (nil? validator)\n      (assert (validator new-value) \"Validator rejected reference state\"))\n    (let [old-value state]\n      (set! state new-value)\n      (when-not (nil? watches)\n        (notify-w a old-value new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IWithMeta\n  (-with-meta [_ new-meta] (RAtom. state new-meta validator watches))\n\n  IMeta\n  (-meta [_] meta)\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Atom:\"))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n(defn atom\n  \"Like clojure.core/atom, except that it keeps track of derefs.\"\n  ([x] (->RAtom x nil nil nil))\n  ([x & {:keys [meta validator]}] (->RAtom x meta validator nil)))\n\n\n;;; track\n\n(declare make-reaction)\n\n(def ^{:private true :const true} cache-key \"reagReactionCache\")\n\n(defn- cached-reaction [f o k obj destroy]\n  (let [m (aget o cache-key)\n        m (if (nil? m) {} m)\n        r (m k nil)]\n    (cond\n      (some? r) (-deref r)\n      (nil? *ratom-context*) (f)\n      :else (let [r (make-reaction\n                     f :on-dispose (fn [x]\n                                     (when debug (swap! -running dec))\n                                     (as-> (aget o cache-key) _\n                                       (dissoc _ k)\n                                       (aset o cache-key _))\n                                     (when (some? obj)\n                                       (set! (.-reaction obj) nil))\n                                     (when (some? destroy)\n                                       (destroy x))))\n                  v (-deref r)]\n              (aset o cache-key (assoc m k r))\n              (when debug (swap! -running inc))\n              (when (some? obj)\n                (set! (.-reaction obj) r))\n              v))))\n\n(deftype Track [f args ^:mutable reaction]\n  IReactiveAtom\n\n  IDeref\n  (-deref [this]\n    (if-some [r reaction]\n      (-deref r)\n      (cached-reaction #(apply f args) f args this nil)))\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? Track other)\n         (= f (.-f other))\n         (= args (.-args other))))\n\n  IHash\n  (-hash [_] (hash [f args]))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Track:\")))\n\n(defn make-track [f args]\n  (Track. f args nil))\n\n(defn make-track! [f args]\n  (let [t (make-track f args)\n        r (make-reaction #(-deref t)\n                         :auto-run true)]\n    @r\n    r))\n\n(defn track [f & args]\n  {:pre [(ifn? f)]}\n  (make-track f args))\n\n(defn track! [f & args]\n  {:pre [(ifn? f)]}\n  (make-track! f args))\n\n;;; cursor\n\n(deftype RCursor [ratom path ^:mutable reaction\n                  ^:mutable state ^:mutable watches]\n  IAtom\n  IReactiveAtom\n\n  IEquiv\n  (-equiv [_ other]\n    (and (instance? RCursor other)\n         (= path (.-path other))\n         (= ratom (.-ratom other))))\n\n  Object\n  (_peek [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_set-state [this oldstate newstate]\n    (when-not (identical? oldstate newstate)\n      (set! state newstate)\n      (when (some? watches)\n        (notify-w this oldstate newstate))))\n\n  IDeref\n  (-deref [this]\n    (let [oldstate state\n          newstate (if-some [r reaction]\n                     (-deref r)\n                     (let [f (if (satisfies? IDeref ratom)\n                               #(get-in @ratom path)\n                               #(ratom path))]\n                       (cached-reaction f ratom path this nil)))]\n      (._set-state this oldstate newstate)\n      newstate))\n\n  IReset\n  (-reset! [this new-value]\n    (let [oldstate state]\n      (._set-state this oldstate new-value)\n      (if (satisfies? IDeref ratom)\n        (if (= path [])\n          (reset! ratom new-value)\n          (swap! ratom assoc-in path new-value))\n        (ratom path new-value))\n      new-value))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek a))))\n  (-swap! [a f x]        (-reset! a (f (._peek a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek a) x y more)))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts (str \"Cursor: \" path)))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IHash\n  (-hash [_] (hash [ratom path])))\n\n(defn cursor\n  [src path]\n  (assert (or (satisfies? IReactiveAtom src)\n              (and (ifn? src)\n                   (not (vector? src))))\n          (str \"src must be a reactive atom or a function, not \"\n               (pr-str src)))\n  (->RCursor src path nil nil nil))\n\n\n;;; with-let support\n\n(defn with-let-destroy [v]\n  (when-some [f (.-destroy v)]\n    (f)))\n\n(defn with-let-values [key]\n  (if-some [c *ratom-context*]\n    (cached-reaction array c key\n                     nil with-let-destroy)\n    (array)))\n\n\n;;;; reaction\n\n(defprotocol IDisposable\n  (dispose! [this])\n  (add-on-dispose! [this f]))\n\n(defprotocol IRunnable\n  (run [this]))\n\n(defn- handle-reaction-change [this sender old new]\n  (._handle-change this sender old new))\n\n\n(deftype Reaction [f ^:mutable state ^:mutable ^boolean dirty? ^boolean nocache?\n                   ^:mutable watching ^:mutable watches ^:mutable auto-run\n                   ^:mutable caught]\n  IAtom\n  IReactiveAtom\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]\n    (let [was-empty (empty? watches)]\n      (remove-w this key)\n      (when (and (not was-empty)\n                 (empty? watches)\n                 (nil? auto-run))\n        (dispose! this))))\n\n  IReset\n  (-reset! [a newval]\n    (assert (fn? (.-on-set a)) \"Reaction is read only; on-set is not allowed\")\n    (let [oldval state]\n      (set! state newval)\n      (.on-set a oldval newval)\n      (notify-w a oldval newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f (._peek-at a))))\n  (-swap! [a f x]        (-reset! a (f (._peek-at a) x)))\n  (-swap! [a f x y]      (-reset! a (f (._peek-at a) x y)))\n  (-swap! [a f x y more] (-reset! a (apply f (._peek-at a) x y more)))\n\n  Object\n  (_peek-at [this]\n    (binding [*ratom-context* nil]\n      (-deref this)))\n\n  (_handle-change [this sender oldval newval]\n    (when-not (or (identical? oldval newval)\n                  dirty?)\n      (if (nil? auto-run)\n        (do\n          (set! dirty? true)\n          (rea-enqueue this))\n        (if (true? auto-run)\n          (._run this false)\n          (auto-run this)))))\n\n  (_update-watching [this derefed]\n    (let [new (set derefed)\n          old (set watching)]\n      (set! watching derefed)\n      (doseq [w (s/difference new old)]\n        (-add-watch w this handle-reaction-change))\n      (doseq [w (s/difference old new)]\n        (-remove-watch w this))))\n\n  (_queued-run [this]\n    (when (and dirty? (some? watching))\n      (._run this true)))\n\n  (_try-capture [this f]\n    (try\n      (set! caught nil)\n      (deref-capture f this)\n      (catch :default e\n        (set! state e)\n        (set! caught e)\n        (set! dirty? false))))\n\n  (_run [this check]\n    (let [oldstate state\n          res (if check\n                (._try-capture this f)\n                (deref-capture f this))]\n      (when-not nocache?\n        (set! state res)\n        ;; Use = to determine equality from reactions, since\n        ;; they are likely to produce new data structures.\n        (when-not (or (nil? watches)\n                      (= oldstate res))\n          (notify-w this oldstate res)))\n      res))\n\n  (_set-opts [this {:keys [auto-run on-set on-dispose no-cache]}]\n    (when (some? auto-run)\n      (set! (.-auto-run this) auto-run))\n    (when (some? on-set)\n      (set! (.-on-set this) on-set))\n    (when (some? on-dispose)\n      (set! (.-on-dispose this) on-dispose))\n    (when (some? no-cache)\n      (set! (.-nocache? this) no-cache)))\n\n  IRunnable\n  (run [this]\n    (flush!)\n    (._run this false))\n\n  IDeref\n  (-deref [this]\n    (when-some [e caught]\n      (throw e))\n    (let [non-reactive (nil? *ratom-context*)]\n      (when non-reactive\n        (flush!))\n      (if (and non-reactive (nil? auto-run))\n        (when dirty?\n          (let [oldstate state]\n            (set! state (f))\n            (when-not (or (nil? watches) (= oldstate state))\n              (notify-w this oldstate state))))\n        (do\n          (notify-deref-watcher! this)\n          (when dirty?\n            (._run this false)))))\n    state)\n\n  IDisposable\n  (dispose! [this]\n    (let [s state\n          wg watching]\n      (set! watching nil)\n      (set! state nil)\n      (set! auto-run nil)\n      (set! dirty? true)\n      (doseq [w (set wg)]\n        (-remove-watch w this))\n      (when (some? (.-on-dispose this))\n        (.on-dispose this s))\n      (when-some [a (.-on-dispose-arr this)]\n        (dotimes [i (alength a)]\n          ((aget a i) this)))))\n\n  (add-on-dispose! [this f]\n    ;; f is called with the reaction as argument when it is no longer active\n    (if-some [a (.-on-dispose-arr this)]\n      (.push a f)\n      (set! (.-on-dispose-arr this) (array f))))\n\n  IEquiv\n  (-equiv [o other] (identical? o other))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts (str \"Reaction \" (hash a) \":\")))\n\n  IHash\n  (-hash [this] (goog/getUid this)))\n\n\n(defn make-reaction [f & {:keys [auto-run on-set on-dispose]}]\n  (let [reaction (->Reaction f nil true false nil nil nil nil)]\n    (._set-opts reaction {:auto-run auto-run\n                          :on-set on-set\n                          :on-dispose on-dispose})\n    reaction))\n\n\n\n(def ^:private temp-reaction (make-reaction nil))\n\n(defn run-in-reaction [f obj key run opts]\n  (let [r temp-reaction\n        res (deref-capture f r)]\n    (when-not (nil? (.-watching r))\n      (set! temp-reaction (make-reaction nil))\n      (._set-opts r opts)\n      (set! (.-f r) f)\n      (set! (.-auto-run r) #(run obj))\n      (aset obj key r))\n    res))\n\n(defn check-derefs [f]\n  (let [ctx (js-obj)\n        res (in-context ctx f)]\n    [res (some? (.-captured ctx))]))\n\n\n;;; wrap\n\n(deftype Wrapper [^:mutable state callback ^:mutable ^boolean changed\n                  ^:mutable watches]\n\n  IAtom\n\n  IDeref\n  (-deref [this]\n    (when (dev?)\n      (when (and changed (some? *ratom-context*))\n        (warn \"derefing stale wrap: \"\n              (pr-str this))))\n    state)\n\n  IReset\n  (-reset! [this newval]\n    (let [oldval state]\n      (set! changed true)\n      (set! state newval)\n      (when (some? watches)\n        (notify-w this oldval newval))\n      (callback newval)\n      newval))\n\n  ISwap\n  (-swap! [a f]          (-reset! a (f state)))\n  (-swap! [a f x]        (-reset! a (f state x)))\n  (-swap! [a f x y]      (-reset! a (f state x y)))\n  (-swap! [a f x y more] (-reset! a (apply f state x y more)))\n\n  IEquiv\n  (-equiv [_ other]\n          (and (instance? Wrapper other)\n               ;; If either of the wrappers have changed, equality\n               ;; cannot be relied on.\n               (not changed)\n               (not (.-changed other))\n               (= state (.-state other))\n               (= callback (.-callback other))))\n\n  IWatchable\n  (-notify-watches [this old new] (notify-w this old new))\n  (-add-watch [this key f]        (add-w this key f))\n  (-remove-watch [this key]       (remove-w this key))\n\n  IPrintWithWriter\n  (-pr-writer [a w opts] (pr-atom a w opts \"Wrap:\")))\n\n(defn make-wrapper [value callback-fn args]\n  (->Wrapper value\n             (util/make-partial-fn callback-fn args)\n             false nil))\n\n\n\n\n#_(do\n  (defn ratom-perf []\n    (set! debug false)\n    (dotimes [_ 10]\n      (let [nite 100000\n            a (atom 0)\n            f (fn []\n                (quot @a 10))\n            mid (make-reaction f)\n            res (track! (fn []\n                          ;; (with-let [x 1])\n                          ;; @(track f)\n                          (inc @mid)\n                          ))]\n        @res\n        (time (dotimes [x nite]\n                (swap! a inc)\n                (flush!)))\n        (dispose! res))))\n  (ratom-perf))\n"],"mappings":"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","names":["js/reagent","js/reagent.ratom","js/reagent.ratom.debug","reagent.ratom/debug","js/reagent.ratom.generation","reagent.ratom/generation","js/reagent.ratom.-running","reagent.ratom/-running","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","reagent.ratom/reactive?","reagent.ratom/*ratom-context*","reagent.ratom/running","cljs.core/deref","reagent.ratom/arr-len","x","reagent.ratom/arr-eq","and__4036__auto__","len","y","or__4047__auto__","i","reagent.ratom/in-context","*ratom-context*-temp-val__22543","*ratom-context*-orig-val__22542","obj","f","reagent.ratom/deref-capture","r","c","res","reagent.ratom/notify-deref-watcher!","temp__5461__auto__","derefed","reagent.ratom/check-watches","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/+","cljs.core/count","new","old","reagent.ratom/add-w","this","w","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","key","reagent.ratom/remove-w","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","reagent.ratom/notify-w","cljs.core/reduce-kv","p1__22557#","G__22564","p2__22558#","p3__22559#","a","k","reagent.ratom/pr-atom","cljs.core/-write","writer","s","cljs.core/pr-writer","*ratom-context*-temp-val__22574","*ratom-context*-orig-val__22573","cljs.core/-deref","opts","js/reagent.ratom.rea-queue","reagent.ratom/rea-queue","reagent.ratom/rea-enqueue","reagent.impl.batching/schedule","reagent.ratom/flush!","q","n__4518__auto__","reagent.impl.batching/ratom-flush","reagent.ratom/IReactiveAtom","cljs.core/PROTOCOL_SENTINEL","writer__4291__auto__","reagent.ratom/RAtom","reagent.ratom/->RAtom","state","meta","validator","watches","o","other","js/Error","new-value","old-value","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","more","new-meta","goog/getUid","G__22607","reagent.ratom/atom","i__4642__auto__","len__4641__auto__","args-arr__4662__auto__","cljs.core/IndexedSeq","argseq__4663__auto__","p__22609","map__22610","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core/first","seq22600","cljs.core/next","self__4628__auto__","G__22601","reagent.ratom/cache-key","reagent.ratom/cached-reaction","m","G__22625","G__22626","G__22627","reagent.ratom/make-reaction","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/dec","_","destroy","cljs.core/inc","v","reagent.ratom/Track","reagent.ratom/->Track","args","reaction","temp__5459__auto__","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/hash","reagent.ratom/make-track","reagent.ratom/make-track!","G__22642","G__22644","G__22645","t","args__4647__auto__","reagent.ratom/track","argseq__4648__auto__","seq22646","G__22648","cljs.core/ifn?","reagent.ratom/track!","seq22650","G__22651","reagent.ratom/RCursor","reagent.ratom/->RCursor","ratom","path","*ratom-context*-temp-val__22656","*ratom-context*-orig-val__22655","oldstate","newstate","cljs.core/native-satisfies?","cljs.core/IDeref","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core/reset!","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc-in","G__22677","G__22686","G__22687","G__22689","G__22690","G__22691","reagent.ratom/cursor","src","cljs.core/vector?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","reagent.ratom/with-let-destroy","reagent.ratom/with-let-values","cljs.core/array","reagent.ratom/dispose!","goog/typeOf","x__4347__auto__","m__4348__auto__","cljs.core/missing-protocol","reagent.ratom/add-on-dispose!","reagent.ratom/IDisposable","reagent.ratom/run","reagent.ratom/IRunnable","reagent.ratom/handle-reaction-change","sender","p__22735","map__22736","reagent.ratom/Reaction","reagent.ratom/->Reaction","dirty?","nocache?","watching","auto-run","caught","cljs.core/empty?","was-empty","cljs.core/fn?","newval","oldval","G__22769","G__22770","G__22771","G__22772","G__22773","G__22774","*ratom-context*-temp-val__22722","*ratom-context*-orig-val__22721","cljs.core/set","cljs.core/seq","i__22726","count__22725","chunk__22724","seq__22723","temp__5457__auto__","cljs.core/chunked-seq?","cljs.core/chunk-first","cljs.core/chunk-rest","c__4461__auto__","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","cljs.core/-add-watch","i__22730","count__22729","chunk__22728","seq__22727","cljs.core/-remove-watch","e22731","e","check","on-set","on-dispose","no-cache","non-reactive","i__22741","count__22740","chunk__22739","seq__22738","wg","fexpr__22754","p__22809","map__22810","seq22789","G__22790","reagent.ratom/temp-reaction","reagent.ratom/run-in-reaction","run","reagent.ratom/check-derefs","ctx","reagent.ratom/Wrapper","reagent.ratom/->Wrapper","callback","changed","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","cljs.core/not","reagent.ratom/make-wrapper","value","reagent.impl.util/make-partial-fn","callback-fn"]}