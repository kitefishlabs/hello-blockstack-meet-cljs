{
"version":3,
"file":"module$node_modules$base64url$dist$base64url.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,6CAAA,CAAiE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAI9HC,QAASA,OAAM,CAACC,KAAD,CAAQC,QAAR,CAAkB,CACZ,IAAK,EAAtB,GAAIA,QAAJ,GAA2BA,QAA3B,CAAsC,MAAtC,CACA,OAAIC,oBAAAC,SAAA,CAAgBH,KAAhB,CAAJ,CACWI,UAAA,CAAWJ,KAAAK,SAAA,CAAe,QAAf,CAAX,CADX,CAGOD,UAAA,CAAWF,mBAAAI,KAAA,CAAYN,KAAZ,CAAmBC,QAAnB,CAAAI,SAAA,CAAsC,QAAtC,CAAX,CALsB,CAYjCE,QAASA,SAAQ,CAACC,SAAD,CAAY,CACzBA,SAAA,CAAYA,SAAAH,SAAA,EACZ,OAAOI,aAAAC,QAAA,CAAqBF,SAArB,CAAAG,QAAA,CACM,KADN,CACa,GADb,CAAAA,QAAA,CAEM,IAFN,CAEY,GAFZ,CAFkB,CAM7BP,QAASA,WAAU,CAACQ,MAAD,CAAS,CACxB,MAAOA,OAAAD,QAAA,CACM,IADN;AACY,EADZ,CAAAA,QAAA,CAEM,KAFN,CAEa,GAFb,CAAAA,QAAA,CAGM,KAHN,CAGa,GAHb,CADiB,CApB5BE,MAAAC,eAAA,CAAsBjB,OAAtB,CAA+B,YAA/B,CAA6C,CAAEkB,MAAO,CAAA,CAAT,CAA7C,CACA,KAAIN,aAAed,OAAA,CAAQ,+CAAR,CA4BHI,OAChBA,OAAA,CAAmBA,MADHA,OAEhBiB,OAAA,CArBAA,QAAe,CAACR,SAAD,CAAYP,QAAZ,CAAsB,CAChB,IAAK,EAAtB,GAAIA,QAAJ,GAA2BA,QAA3B,CAAsC,MAAtC,CACA,OAAOC,oBAAAI,KAAA,CAAYC,QAAA,CAASC,SAAT,CAAZ,CAAiC,QAAjC,CAAAH,SAAA,CAAoDJ,QAApD,CAF0B,CAmBrBF,OAGhBQ,SAAA,CAAqBA,QAHLR,OAIhBK,WAAA,CAAuBA,UAJPL,OAKhBkB,SAAA,CARAA,QAAiB,CAACT,SAAD,CAAY,CACzB,MAAON,oBAAAI,KAAA,CAAYC,QAAA,CAASC,SAAT,CAAZ,CAAiC,QAAjC,CADkB,CAS7BX;OAAAa,QAAA,CANgBX,MA/B8G;",
"sources":["node_modules/base64url/dist/base64url.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$base64url$dist$base64url\"] = function(global,process,require,module,exports,shadow$shims) {\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar pad_string_1 = require(\"./pad-string\");\nfunction encode(input, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    if (Buffer.isBuffer(input)) {\n        return fromBase64(input.toString(\"base64\"));\n    }\n    return fromBase64(Buffer.from(input, encoding).toString(\"base64\"));\n}\n;\nfunction decode(base64url, encoding) {\n    if (encoding === void 0) { encoding = \"utf8\"; }\n    return Buffer.from(toBase64(base64url), \"base64\").toString(encoding);\n}\nfunction toBase64(base64url) {\n    base64url = base64url.toString();\n    return pad_string_1.default(base64url)\n        .replace(/\\-/g, \"+\")\n        .replace(/_/g, \"/\");\n}\nfunction fromBase64(base64) {\n    return base64\n        .replace(/=/g, \"\")\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\");\n}\nfunction toBuffer(base64url) {\n    return Buffer.from(toBase64(base64url), \"base64\");\n}\nvar base64url = encode;\nbase64url.encode = encode;\nbase64url.decode = decode;\nbase64url.toBase64 = toBase64;\nbase64url.fromBase64 = fromBase64;\nbase64url.toBuffer = toBuffer;\nexports.default = base64url;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","encode","input","encoding","Buffer","isBuffer","fromBase64","toString","from","toBase64","base64url","pad_string_1","default","replace","base64","Object","defineProperty","value","decode","toBuffer"]
}
