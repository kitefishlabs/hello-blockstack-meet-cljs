{
"version":3,
"file":"module$node_modules$bitcoinjs_lib$src$transaction_builder.js",
"lineCount":33,
"mappings":"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",
"sources":["node_modules/bitcoinjs-lib/src/transaction_builder.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$bitcoinjs_lib$src$transaction_builder\"] = function(global,process,require,module,exports,shadow$shims) {\nconst Buffer = require('safe-buffer').Buffer\nconst baddress = require('./address')\nconst bcrypto = require('./crypto')\nconst bscript = require('./script')\nconst networks = require('./networks')\nconst ops = require('bitcoin-ops')\nconst payments = require('./payments')\nconst typeforce = require('typeforce')\nconst types = require('./types')\nconst classify = require('./classify')\nconst SCRIPT_TYPES = classify.types\n\nconst ECPair = require('./ecpair')\nconst Transaction = require('./transaction')\n\nfunction expandInput (scriptSig, witnessStack, type, scriptPubKey) {\n  if (scriptSig.length === 0 && witnessStack.length === 0) return {}\n  if (!type) {\n    let ssType = classify.input(scriptSig, true)\n    let wsType = classify.witness(witnessStack, true)\n    if (ssType === SCRIPT_TYPES.NONSTANDARD) ssType = undefined\n    if (wsType === SCRIPT_TYPES.NONSTANDARD) wsType = undefined\n    type = ssType || wsType\n  }\n\n  switch (type) {\n    case SCRIPT_TYPES.P2WPKH: {\n      const { output, pubkey, signature } = payments.p2wpkh({ witness: witnessStack })\n\n      return {\n        prevOutScript: output,\n        prevOutType: SCRIPT_TYPES.P2WPKH,\n        pubkeys: [pubkey],\n        signatures: [signature]\n      }\n    }\n\n    case SCRIPT_TYPES.P2PKH: {\n      const { output, pubkey, signature } = payments.p2pkh({ input: scriptSig })\n\n      return {\n        prevOutScript: output,\n        prevOutType: SCRIPT_TYPES.P2PKH,\n        pubkeys: [pubkey],\n        signatures: [signature]\n      }\n    }\n\n    case SCRIPT_TYPES.P2PK: {\n      const { signature } = payments.p2pk({ input: scriptSig })\n\n      return {\n        prevOutType: SCRIPT_TYPES.P2PK,\n        pubkeys: [undefined],\n        signatures: [signature]\n      }\n    }\n\n    case SCRIPT_TYPES.MULTISIG: {\n      const { pubkeys, signatures } = payments.p2ms({\n        input: scriptSig,\n        output: scriptPubKey\n      }, { allowIncomplete: true })\n\n      return {\n        prevOutType: SCRIPT_TYPES.MULTISIG,\n        pubkeys: pubkeys,\n        signatures: signatures\n      }\n    }\n  }\n\n  if (type === SCRIPT_TYPES.P2SH) {\n    const { output, redeem } = payments.p2sh({\n      input: scriptSig,\n      witness: witnessStack\n    })\n\n    const outputType = classify.output(redeem.output)\n    const expanded = expandInput(redeem.input, redeem.witness, outputType, redeem.output)\n    if (!expanded.prevOutType) return {}\n\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2SH,\n      redeemScript: redeem.output,\n      redeemScriptType: expanded.prevOutType,\n      witnessScript: expanded.witnessScript,\n      witnessScriptType: expanded.witnessScriptType,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  if (type === SCRIPT_TYPES.P2WSH) {\n    const { output, redeem } = payments.p2wsh({\n      input: scriptSig,\n      witness: witnessStack\n    })\n    const outputType = classify.output(redeem.output)\n    let expanded\n    if (outputType === SCRIPT_TYPES.P2WPKH) {\n      expanded = expandInput(redeem.input, redeem.witness, outputType)\n    } else {\n      expanded = expandInput(bscript.compile(redeem.witness), [], outputType, redeem.output)\n    }\n    if (!expanded.prevOutType) return {}\n\n    return {\n      prevOutScript: output,\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      witnessScript: redeem.output,\n      witnessScriptType: expanded.prevOutType,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  return {\n    prevOutType: SCRIPT_TYPES.NONSTANDARD,\n    prevOutScript: scriptSig\n  }\n}\n\n// could be done in expandInput, but requires the original Transaction for hashForSignature\nfunction fixMultisigOrder (input, transaction, vin) {\n  if (input.redeemScriptType !== SCRIPT_TYPES.MULTISIG || !input.redeemScript) return\n  if (input.pubkeys.length === input.signatures.length) return\n\n  const unmatched = input.signatures.concat()\n\n  input.signatures = input.pubkeys.map(function (pubKey) {\n    const keyPair = ECPair.fromPublicKey(pubKey)\n    let match\n\n    // check for a signature\n    unmatched.some(function (signature, i) {\n      // skip if undefined || OP_0\n      if (!signature) return false\n\n      // TODO: avoid O(n) hashForSignature\n      const parsed = bscript.signature.decode(signature)\n      const hash = transaction.hashForSignature(vin, input.redeemScript, parsed.hashType)\n\n      // skip if signature does not match pubKey\n      if (!keyPair.verify(hash, parsed.signature)) return false\n\n      // remove matched signature from unmatched\n      unmatched[i] = undefined\n      match = signature\n\n      return true\n    })\n\n    return match\n  })\n}\n\nfunction expandOutput (script, ourPubKey) {\n  typeforce(types.Buffer, script)\n  const type = classify.output(script)\n\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH: {\n      if (!ourPubKey) return { type }\n\n      // does our hash160(pubKey) match the output scripts?\n      const pkh1 = payments.p2pkh({ output: script }).hash\n      const pkh2 = bcrypto.hash160(ourPubKey)\n      if (!pkh1.equals(pkh2)) return { type }\n\n      return {\n        type,\n        pubkeys: [ourPubKey],\n        signatures: [undefined]\n      }\n    }\n\n    case SCRIPT_TYPES.P2WPKH: {\n      if (!ourPubKey) return { type }\n\n      // does our hash160(pubKey) match the output scripts?\n      const wpkh1 = payments.p2wpkh({ output: script }).hash\n      const wpkh2 = bcrypto.hash160(ourPubKey)\n      if (!wpkh1.equals(wpkh2)) return { type }\n\n      return {\n        type,\n        pubkeys: [ourPubKey],\n        signatures: [undefined]\n      }\n    }\n\n    case SCRIPT_TYPES.P2PK: {\n      const p2pk = payments.p2pk({ output: script })\n      return {\n        type,\n        pubkeys: [p2pk.pubkey],\n        signatures: [undefined]\n      }\n    }\n\n    case SCRIPT_TYPES.MULTISIG: {\n      const p2ms = payments.p2ms({ output: script })\n      return {\n        type,\n        pubkeys: p2ms.pubkeys,\n        signatures: p2ms.pubkeys.map(() => undefined)\n      }\n    }\n  }\n\n  return { type }\n}\n\nfunction prepareInput (input, ourPubKey, redeemScript, witnessValue, witnessScript) {\n  if (redeemScript && witnessScript) {\n    const p2wsh = payments.p2wsh({ redeem: { output: witnessScript } })\n    const p2wshAlt = payments.p2wsh({ output: redeemScript })\n    const p2sh = payments.p2sh({ redeem: { output: redeemScript } })\n    const p2shAlt = payments.p2sh({ redeem: p2wsh })\n\n    // enforces P2SH(P2WSH(...))\n    if (!p2wsh.hash.equals(p2wshAlt.hash)) throw new Error('Witness script inconsistent with prevOutScript')\n    if (!p2sh.hash.equals(p2shAlt.hash)) throw new Error('Redeem script inconsistent with prevOutScript')\n\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as witnessScript (' + bscript.toASM(witnessScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = witnessScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) throw new Error('P2SH(P2WSH(P2WPKH)) is a consensus failure')\n\n    return {\n      redeemScript,\n      redeemScriptType: SCRIPT_TYPES.P2WSH,\n\n      witnessScript,\n      witnessScriptType: expanded.type,\n\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  if (redeemScript) {\n    const p2sh = payments.p2sh({ redeem: { output: redeemScript } })\n\n    if (input.prevOutScript) {\n      let p2shAlt\n      try {\n        p2shAlt = payments.p2sh({ output: input.prevOutScript })\n      } catch (e) { throw new Error('PrevOutScript must be P2SH') }\n      if (!p2sh.hash.equals(p2shAlt.hash)) throw new Error('Redeem script inconsistent with prevOutScript')\n    }\n\n    const expanded = expandOutput(p2sh.redeem.output, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as redeemScript (' + bscript.toASM(redeemScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = redeemScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output\n    }\n\n    return {\n      redeemScript,\n      redeemScriptType: expanded.type,\n\n      prevOutType: SCRIPT_TYPES.P2SH,\n      prevOutScript: p2sh.output,\n\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  if (witnessScript) {\n    const p2wsh = payments.p2wsh({ redeem: { output: witnessScript } })\n\n    if (input.prevOutScript) {\n      const p2wshAlt = payments.p2wsh({ output: input.prevOutScript })\n      if (!p2wsh.hash.equals(p2wshAlt.hash)) throw new Error('Witness script inconsistent with prevOutScript')\n    }\n\n    const expanded = expandOutput(p2wsh.redeem.output, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported as witnessScript (' + bscript.toASM(witnessScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = witnessScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) throw new Error('P2WSH(P2WPKH) is a consensus failure')\n\n    return {\n      witnessScript,\n      witnessScriptType: expanded.type,\n\n      prevOutType: SCRIPT_TYPES.P2WSH,\n      prevOutScript: p2wsh.output,\n\n      hasWitness: true,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  if (input.prevOutType && input.prevOutScript) {\n    // embedded scripts are not possible without extra information\n    if (input.prevOutType === SCRIPT_TYPES.P2SH) throw new Error('PrevOutScript is ' + input.prevOutType + ', requires redeemScript')\n    if (input.prevOutType === SCRIPT_TYPES.P2WSH) throw new Error('PrevOutScript is ' + input.prevOutType + ', requires witnessScript')\n    if (!input.prevOutScript) throw new Error('PrevOutScript is missing')\n\n    const expanded = expandOutput(input.prevOutScript, ourPubKey)\n    if (!expanded.pubkeys) throw new Error(expanded.type + ' not supported (' + bscript.toASM(input.prevOutScript) + ')')\n    if (input.signatures && input.signatures.some(x => x)) {\n      expanded.signatures = input.signatures\n    }\n\n    let signScript = input.prevOutScript\n    if (expanded.type === SCRIPT_TYPES.P2WPKH) {\n      signScript = payments.p2pkh({ pubkey: expanded.pubkeys[0] }).output\n    }\n\n    return {\n      prevOutType: expanded.type,\n      prevOutScript: input.prevOutScript,\n\n      hasWitness: expanded.type === SCRIPT_TYPES.P2WPKH,\n      signScript,\n      signType: expanded.type,\n\n      pubkeys: expanded.pubkeys,\n      signatures: expanded.signatures\n    }\n  }\n\n  const prevOutScript = payments.p2pkh({ pubkey: ourPubKey }).output\n  return {\n    prevOutType: SCRIPT_TYPES.P2PKH,\n    prevOutScript: prevOutScript,\n\n    hasWitness: false,\n    signScript: prevOutScript,\n    signType: SCRIPT_TYPES.P2PKH,\n\n    pubkeys: [ourPubKey],\n    signatures: [undefined]\n  }\n}\n\nfunction build (type, input, allowIncomplete) {\n  const pubkeys = input.pubkeys || []\n  let signatures = input.signatures || []\n\n  switch (type) {\n    case SCRIPT_TYPES.P2PKH: {\n      if (pubkeys.length === 0) break\n      if (signatures.length === 0) break\n\n      return payments.p2pkh({ pubkey: pubkeys[0], signature: signatures[0] })\n    }\n    case SCRIPT_TYPES.P2WPKH: {\n      if (pubkeys.length === 0) break\n      if (signatures.length === 0) break\n\n      return payments.p2wpkh({ pubkey: pubkeys[0], signature: signatures[0] })\n    }\n    case SCRIPT_TYPES.P2PK: {\n      if (pubkeys.length === 0) break\n      if (signatures.length === 0) break\n\n      return payments.p2pk({ signature: signatures[0] })\n    }\n    case SCRIPT_TYPES.MULTISIG: {\n      if (allowIncomplete) {\n        signatures = signatures.map(x => x || ops.OP_0)\n      } else {\n        signatures = signatures.filter(x => x)\n      }\n\n      return payments.p2ms({ signatures }, { allowIncomplete })\n    }\n    case SCRIPT_TYPES.P2SH: {\n      const redeem = build(input.redeemScriptType, input, allowIncomplete)\n      if (!redeem) return\n\n      return payments.p2sh({\n        redeem: {\n          output: redeem.output || input.redeemScript,\n          input: redeem.input,\n          witness: redeem.witness\n        }\n      })\n    }\n    case SCRIPT_TYPES.P2WSH: {\n      const redeem = build(input.witnessScriptType, input, allowIncomplete)\n      if (!redeem) return\n\n      return payments.p2wsh({\n        redeem: {\n          output: input.witnessScript,\n          input: redeem.input,\n          witness: redeem.witness\n        }\n      })\n    }\n  }\n}\n\nfunction TransactionBuilder (network, maximumFeeRate) {\n  this.__prevTxSet = {}\n  this.network = network || networks.bitcoin\n\n  // WARNING: This is __NOT__ to be relied on, its just another potential safety mechanism (safety in-depth)\n  this.maximumFeeRate = maximumFeeRate || 2500\n\n  this.__inputs = []\n  this.__tx = new Transaction()\n  this.__tx.version = 2\n}\n\nTransactionBuilder.prototype.setLockTime = function (locktime) {\n  typeforce(types.UInt32, locktime)\n\n  // if any signatures exist, throw\n  if (this.__inputs.some(function (input) {\n    if (!input.signatures) return false\n\n    return input.signatures.some(function (s) { return s })\n  })) {\n    throw new Error('No, this would invalidate signatures')\n  }\n\n  this.__tx.locktime = locktime\n}\n\nTransactionBuilder.prototype.setVersion = function (version) {\n  typeforce(types.UInt32, version)\n\n  // XXX: this might eventually become more complex depending on what the versions represent\n  this.__tx.version = version\n}\n\nTransactionBuilder.fromTransaction = function (transaction, network) {\n  const txb = new TransactionBuilder(network)\n\n  // Copy transaction fields\n  txb.setVersion(transaction.version)\n  txb.setLockTime(transaction.locktime)\n\n  // Copy outputs (done first to avoid signature invalidation)\n  transaction.outs.forEach(function (txOut) {\n    txb.addOutput(txOut.script, txOut.value)\n  })\n\n  // Copy inputs\n  transaction.ins.forEach(function (txIn) {\n    txb.__addInputUnsafe(txIn.hash, txIn.index, {\n      sequence: txIn.sequence,\n      script: txIn.script,\n      witness: txIn.witness\n    })\n  })\n\n  // fix some things not possible through the public API\n  txb.__inputs.forEach(function (input, i) {\n    fixMultisigOrder(input, transaction, i)\n  })\n\n  return txb\n}\n\nTransactionBuilder.prototype.addInput = function (txHash, vout, sequence, prevOutScript) {\n  if (!this.__canModifyInputs()) {\n    throw new Error('No, this would invalidate signatures')\n  }\n\n  let value\n\n  // is it a hex string?\n  if (typeof txHash === 'string') {\n    // transaction hashs's are displayed in reverse order, un-reverse it\n    txHash = Buffer.from(txHash, 'hex').reverse()\n\n  // is it a Transaction object?\n  } else if (txHash instanceof Transaction) {\n    const txOut = txHash.outs[vout]\n    prevOutScript = txOut.script\n    value = txOut.value\n\n    txHash = txHash.getHash()\n  }\n\n  return this.__addInputUnsafe(txHash, vout, {\n    sequence: sequence,\n    prevOutScript: prevOutScript,\n    value: value\n  })\n}\n\nTransactionBuilder.prototype.__addInputUnsafe = function (txHash, vout, options) {\n  if (Transaction.isCoinbaseHash(txHash)) {\n    throw new Error('coinbase inputs not supported')\n  }\n\n  const prevTxOut = txHash.toString('hex') + ':' + vout\n  if (this.__prevTxSet[prevTxOut] !== undefined) throw new Error('Duplicate TxOut: ' + prevTxOut)\n\n  let input = {}\n\n  // derive what we can from the scriptSig\n  if (options.script !== undefined) {\n    input = expandInput(options.script, options.witness || [])\n  }\n\n  // if an input value was given, retain it\n  if (options.value !== undefined) {\n    input.value = options.value\n  }\n\n  // derive what we can from the previous transactions output script\n  if (!input.prevOutScript && options.prevOutScript) {\n    let prevOutType\n\n    if (!input.pubkeys && !input.signatures) {\n      const expanded = expandOutput(options.prevOutScript)\n      if (expanded.pubkeys) {\n        input.pubkeys = expanded.pubkeys\n        input.signatures = expanded.signatures\n      }\n\n      prevOutType = expanded.type\n    }\n\n    input.prevOutScript = options.prevOutScript\n    input.prevOutType = prevOutType || classify.output(options.prevOutScript)\n  }\n\n  const vin = this.__tx.addInput(txHash, vout, options.sequence, options.scriptSig)\n  this.__inputs[vin] = input\n  this.__prevTxSet[prevTxOut] = true\n  return vin\n}\n\nTransactionBuilder.prototype.addOutput = function (scriptPubKey, value) {\n  if (!this.__canModifyOutputs()) {\n    throw new Error('No, this would invalidate signatures')\n  }\n\n  // Attempt to get a script if it's a base58 or bech32 address string\n  if (typeof scriptPubKey === 'string') {\n    scriptPubKey = baddress.toOutputScript(scriptPubKey, this.network)\n  }\n\n  return this.__tx.addOutput(scriptPubKey, value)\n}\n\nTransactionBuilder.prototype.build = function () {\n  return this.__build(false)\n}\nTransactionBuilder.prototype.buildIncomplete = function () {\n  return this.__build(true)\n}\n\nTransactionBuilder.prototype.__build = function (allowIncomplete) {\n  if (!allowIncomplete) {\n    if (!this.__tx.ins.length) throw new Error('Transaction has no inputs')\n    if (!this.__tx.outs.length) throw new Error('Transaction has no outputs')\n  }\n\n  const tx = this.__tx.clone()\n\n  // create script signatures from inputs\n  this.__inputs.forEach(function (input, i) {\n    if (!input.prevOutType && !allowIncomplete) throw new Error('Transaction is not complete')\n\n    const result = build(input.prevOutType, input, allowIncomplete)\n    if (!result) {\n      if (!allowIncomplete && input.prevOutType === SCRIPT_TYPES.NONSTANDARD) throw new Error('Unknown input type')\n      if (!allowIncomplete) throw new Error('Not enough information')\n      return\n    }\n\n    tx.setInputScript(i, result.input)\n    tx.setWitness(i, result.witness)\n  })\n\n  if (!allowIncomplete) {\n    // do not rely on this, its merely a last resort\n    if (this.__overMaximumFees(tx.virtualSize())) {\n      throw new Error('Transaction has absurd fees')\n    }\n  }\n\n  return tx\n}\n\nfunction canSign (input) {\n  return input.signScript !== undefined &&\n    input.signType !== undefined &&\n    input.pubkeys !== undefined &&\n    input.signatures !== undefined &&\n    input.signatures.length === input.pubkeys.length &&\n    input.pubkeys.length > 0 &&\n    (\n      input.hasWitness === false ||\n      input.value !== undefined\n    )\n}\n\nTransactionBuilder.prototype.sign = function (vin, keyPair, redeemScript, hashType, witnessValue, witnessScript) {\n  // TODO: remove keyPair.network matching in 4.0.0\n  if (keyPair.network && keyPair.network !== this.network) throw new TypeError('Inconsistent network')\n  if (!this.__inputs[vin]) throw new Error('No input at index: ' + vin)\n  hashType = hashType || Transaction.SIGHASH_ALL\n\n  const input = this.__inputs[vin]\n\n  // if redeemScript was previously provided, enforce consistency\n  if (input.redeemScript !== undefined &&\n      redeemScript &&\n      !input.redeemScript.equals(redeemScript)) {\n    throw new Error('Inconsistent redeemScript')\n  }\n\n  const ourPubKey = keyPair.publicKey || keyPair.getPublicKey()\n  if (!canSign(input)) {\n    if (witnessValue !== undefined) {\n      if (input.value !== undefined && input.value !== witnessValue) throw new Error('Input didn\\'t match witnessValue')\n      typeforce(types.Satoshi, witnessValue)\n      input.value = witnessValue\n    }\n\n    if (!canSign(input)) {\n      const prepared = prepareInput(input, ourPubKey, redeemScript, witnessValue, witnessScript)\n\n      // updates inline\n      Object.assign(input, prepared)\n    }\n\n    if (!canSign(input)) throw Error(input.prevOutType + ' not supported')\n  }\n\n  // ready to sign\n  let signatureHash\n  if (input.hasWitness) {\n    signatureHash = this.__tx.hashForWitnessV0(vin, input.signScript, input.value, hashType)\n  } else {\n    signatureHash = this.__tx.hashForSignature(vin, input.signScript, hashType)\n  }\n\n  // enforce in order signing of public keys\n  const signed = input.pubkeys.some(function (pubKey, i) {\n    if (!ourPubKey.equals(pubKey)) return false\n    if (input.signatures[i]) throw new Error('Signature already exists')\n\n    // TODO: add tests\n    if (ourPubKey.length !== 33 && input.hasWitness) {\n      throw new Error('BIP143 rejects uncompressed public keys in P2WPKH or P2WSH')\n    }\n\n    const signature = keyPair.sign(signatureHash)\n    input.signatures[i] = bscript.signature.encode(signature, hashType)\n    return true\n  })\n\n  if (!signed) throw new Error('Key pair cannot sign for this input')\n}\n\nfunction signatureHashType (buffer) {\n  return buffer.readUInt8(buffer.length - 1)\n}\n\nTransactionBuilder.prototype.__canModifyInputs = function () {\n  return this.__inputs.every(function (input) {\n    // any signatures?\n    if (input.signatures === undefined) return true\n\n    return input.signatures.every(function (signature) {\n      if (!signature) return true\n      const hashType = signatureHashType(signature)\n\n      // if SIGHASH_ANYONECANPAY is set, signatures would not\n      // be invalidated by more inputs\n      return hashType & Transaction.SIGHASH_ANYONECANPAY\n    })\n  })\n}\n\nTransactionBuilder.prototype.__canModifyOutputs = function () {\n  const nInputs = this.__tx.ins.length\n  const nOutputs = this.__tx.outs.length\n\n  return this.__inputs.every(function (input) {\n    if (input.signatures === undefined) return true\n\n    return input.signatures.every(function (signature) {\n      if (!signature) return true\n      const hashType = signatureHashType(signature)\n\n      const hashTypeMod = hashType & 0x1f\n      if (hashTypeMod === Transaction.SIGHASH_NONE) return true\n      if (hashTypeMod === Transaction.SIGHASH_SINGLE) {\n        // if SIGHASH_SINGLE is set, and nInputs > nOutputs\n        // some signatures would be invalidated by the addition\n        // of more outputs\n        return nInputs <= nOutputs\n      }\n    })\n  })\n}\n\nTransactionBuilder.prototype.__overMaximumFees = function (bytes) {\n  // not all inputs will have .value defined\n  const incoming = this.__inputs.reduce(function (a, x) { return a + (x.value >>> 0) }, 0)\n\n  // but all outputs do, and if we have any input value\n  // we can immediately determine if the outputs are too small\n  const outgoing = this.__tx.outs.reduce(function (a, x) { return a + x.value }, 0)\n  const fee = incoming - outgoing\n  const feeRate = fee / bytes\n\n  return feeRate > this.maximumFeeRate\n}\n\nmodule.exports = TransactionBuilder\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","expandInput","scriptSig","witnessStack","type","scriptPubKey","length","ssType","classify","input","wsType","witness","SCRIPT_TYPES","NONSTANDARD","undefined","P2WPKH","payments","p2wpkh","prevOutScript","output","prevOutType","pubkeys","pubkey","signatures","signature","P2PKH","p2pkh","P2PK","p2pk","MULTISIG","p2ms","allowIncomplete","P2SH","p2sh","redeem","outputType","expanded","redeemScript","redeemScriptType","witnessScript","witnessScriptType","P2WSH","p2wsh","bscript","compile","fixMultisigOrder","transaction","vin","unmatched","concat","map","pubKey","keyPair","ECPair","fromPublicKey","match","some","i","parsed","decode","hash","hashForSignature","hashType","verify","expandOutput","script","ourPubKey","typeforce","types","Buffer","pkh1","pkh2","bcrypto","hash160","equals","wpkh1","wpkh2","prepareInput","witnessValue","p2wshAlt","p2shAlt","Error","toASM","x","hasWitness","signScript","signType","e","build","ops","OP_0","filter","TransactionBuilder","network","maximumFeeRate","__prevTxSet","networks","bitcoin","__inputs","__tx","Transaction","version","canSign","value","baddress","prototype","setLockTime","TransactionBuilder.prototype.setLockTime","locktime","UInt32","s","setVersion","TransactionBuilder.prototype.setVersion","fromTransaction","TransactionBuilder.fromTransaction","txb","outs","forEach","txOut","addOutput","ins","txIn","__addInputUnsafe","index","sequence","addInput","TransactionBuilder.prototype.addInput","txHash","vout","__canModifyInputs","from","reverse","getHash","TransactionBuilder.prototype.__addInputUnsafe","options","isCoinbaseHash","prevTxOut","toString","TransactionBuilder.prototype.addOutput","__canModifyOutputs","toOutputScript","TransactionBuilder.prototype.build","__build","buildIncomplete","TransactionBuilder.prototype.buildIncomplete","TransactionBuilder.prototype.__build","tx","clone","result","setInputScript","setWitness","__overMaximumFees","virtualSize","sign","TransactionBuilder.prototype.sign","TypeError","SIGHASH_ALL","publicKey","getPublicKey","Satoshi","prepared","Object","assign","signatureHash","hashForWitnessV0","signed","encode","TransactionBuilder.prototype.__canModifyInputs","every","readUInt8","SIGHASH_ANYONECANPAY","TransactionBuilder.prototype.__canModifyOutputs","nInputs","nOutputs","hashTypeMod","SIGHASH_NONE","SIGHASH_SINGLE","TransactionBuilder.prototype.__overMaximumFees","bytes","incoming","reduce","a","outgoing"]
}
