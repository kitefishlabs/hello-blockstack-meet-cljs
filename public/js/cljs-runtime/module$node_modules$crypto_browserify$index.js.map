{
"version":3,
"file":"module$node_modules$crypto_browserify$index.js",
"lineCount":6,
"mappings":"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",
"sources":["node_modules/crypto-browserify/index.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$crypto_browserify$index\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict'\n\nexports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes')\nexports.createHash = exports.Hash = require('create-hash')\nexports.createHmac = exports.Hmac = require('create-hmac')\n\nvar algos = require('browserify-sign/algos')\nvar algoKeys = Object.keys(algos)\nvar hashes = ['sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'md5', 'rmd160'].concat(algoKeys)\nexports.getHashes = function () {\n  return hashes\n}\n\nvar p = require('pbkdf2')\nexports.pbkdf2 = p.pbkdf2\nexports.pbkdf2Sync = p.pbkdf2Sync\n\nvar aes = require('browserify-cipher')\n\nexports.Cipher = aes.Cipher\nexports.createCipher = aes.createCipher\nexports.Cipheriv = aes.Cipheriv\nexports.createCipheriv = aes.createCipheriv\nexports.Decipher = aes.Decipher\nexports.createDecipher = aes.createDecipher\nexports.Decipheriv = aes.Decipheriv\nexports.createDecipheriv = aes.createDecipheriv\nexports.getCiphers = aes.getCiphers\nexports.listCiphers = aes.listCiphers\n\nvar dh = require('diffie-hellman')\n\nexports.DiffieHellmanGroup = dh.DiffieHellmanGroup\nexports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup\nexports.getDiffieHellman = dh.getDiffieHellman\nexports.createDiffieHellman = dh.createDiffieHellman\nexports.DiffieHellman = dh.DiffieHellman\n\nvar sign = require('browserify-sign')\n\nexports.createSign = sign.createSign\nexports.Sign = sign.Sign\nexports.createVerify = sign.createVerify\nexports.Verify = sign.Verify\n\nexports.createECDH = require('create-ecdh')\n\nvar publicEncrypt = require('public-encrypt')\n\nexports.publicEncrypt = publicEncrypt.publicEncrypt\nexports.privateEncrypt = publicEncrypt.privateEncrypt\nexports.publicDecrypt = publicEncrypt.publicDecrypt\nexports.privateDecrypt = publicEncrypt.privateDecrypt\n\n// the least I can do is make error messages for the rest of the node.js/crypto api.\n// ;[\n//   'createCredentials'\n// ].forEach(function (name) {\n//   exports[name] = function () {\n//     throw new Error([\n//       'sorry, ' + name + ' is not implemented yet',\n//       'we accept pull requests',\n//       'https://github.com/crypto-browserify/crypto-browserify'\n//     ].join('\\n'))\n//   }\n// })\n\nvar rf = require('randomfill')\n\nexports.randomFill = rf.randomFill\nexports.randomFillSync = rf.randomFillSync\n\nexports.createCredentials = function () {\n  throw new Error([\n    'sorry, createCredentials is not implemented yet',\n    'we accept pull requests',\n    'https://github.com/crypto-browserify/crypto-browserify'\n  ].join('\\n'))\n}\n\nexports.constants = {\n  'DH_CHECK_P_NOT_SAFE_PRIME': 2,\n  'DH_CHECK_P_NOT_PRIME': 1,\n  'DH_UNABLE_TO_CHECK_GENERATOR': 4,\n  'DH_NOT_SUITABLE_GENERATOR': 8,\n  'NPN_ENABLED': 1,\n  'ALPN_ENABLED': 1,\n  'RSA_PKCS1_PADDING': 1,\n  'RSA_SSLV23_PADDING': 2,\n  'RSA_NO_PADDING': 3,\n  'RSA_PKCS1_OAEP_PADDING': 4,\n  'RSA_X931_PADDING': 5,\n  'RSA_PKCS1_PSS_PADDING': 6,\n  'POINT_CONVERSION_COMPRESSED': 2,\n  'POINT_CONVERSION_UNCOMPRESSED': 4,\n  'POINT_CONVERSION_HYBRID': 6\n}\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","randomBytes","rng","pseudoRandomBytes","prng","createHash","Hash","createHmac","Hmac","algos","algoKeys","Object","keys","hashes","concat","getHashes","exports.getHashes","p","pbkdf2","pbkdf2Sync","aes","Cipher","createCipher","Cipheriv","createCipheriv","Decipher","createDecipher","Decipheriv","createDecipheriv","getCiphers","listCiphers","dh","DiffieHellmanGroup","createDiffieHellmanGroup","getDiffieHellman","createDiffieHellman","DiffieHellman","sign","createSign","Sign","createVerify","Verify","createECDH","publicEncrypt","privateEncrypt","publicDecrypt","privateDecrypt","rf","randomFill","randomFillSync","createCredentials","exports.createCredentials","Error","constants"]
}
