{
"version":3,
"file":"module$node_modules$blockstack$lib$dids.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,wCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAqBzHC,QAASA,WAAU,CAACC,eAAD,CAAkB,CAC/BC,eAAAA,CAAWD,eAAAE,MAAA,CAAsB,GAAtB,CAEf,IAAwB,CAAxB,GAAID,eAAAE,OAAJ,CACE,KAAM,KAAIC,OAAAC,gBAAJ,CAA4B,qCAA5B,CAAN,CAGF,GAAkC,KAAlC,GAAIJ,eAAA,CAAS,CAAT,CAAAK,YAAA,EAAJ,CACE,KAAM,KAAIF,OAAAC,gBAAJ,CAA4B,yCAA5B,CAAN,CAGF,MAAOJ,gBAAA,CAAS,CAAT,CAAAK,YAAA,EAX4B,CAlBrCC,MAAAC,eAAA,CAAsBX,OAAtB,CAA+B,YAA/B;AAA6C,CAC3CY,MAAO,CAAA,CADoC,CAA7C,CAGAZ,QAAAa,mBAAA,CAOAA,QAA2B,CAACC,OAAD,CAAU,CACnC,MAAO,eAAP,CAAyBA,OADU,CANrCd,QAAAe,qBAAA,CAUAA,QAA6B,CAACC,SAAD,CAAY,CACvC,MAAO,gBAAP,CAA0BA,SADa,CATzChB,QAAAE,WAAA,CAAqBA,UACrBF,QAAAiB,kBAAA,CA0BAA,QAA0B,CAACd,eAAD,CAAkB,CAG1C,MAAgB,UAAhB,GAFcD,UAAAgB,CAAWf,eAAXe,CAEd,CACSf,eAAAE,MAAA,CAAsB,GAAtB,CAAA,CAA2B,CAA3B,CADT,CAGS,IANiC,CAxB5C,KAAIE,QAAUT,OAAA,CAAQ,2CAAR,CAX2G;",
"sources":["node_modules/blockstack/lib/dids.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$blockstack$lib$dids\"] = function(global,process,require,module,exports,shadow$shims) {\n'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.makeDIDFromAddress = makeDIDFromAddress;\nexports.makeDIDFromPublicKey = makeDIDFromPublicKey;\nexports.getDIDType = getDIDType;\nexports.getAddressFromDID = getAddressFromDID;\n\nvar _errors = require('./errors');\n\nfunction makeDIDFromAddress(address) {\n  return 'did:btc-addr:' + address;\n}\n\nfunction makeDIDFromPublicKey(publicKey) {\n  return 'did:ecdsa-pub:' + publicKey;\n}\n\nfunction getDIDType(decentralizedID) {\n  var didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new _errors.InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new _errors.InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\n\nfunction getAddressFromDID(decentralizedID) {\n  var didType = getDIDType(decentralizedID);\n\n  if (didType === 'btc-addr') {\n    return decentralizedID.split(':')[2];\n  } else {\n    return null;\n  }\n}\n\n/*\nexport function getPublicKeyOrAddressFromDID(decentralizedID) {\n  const didParts = decentralizedID.split(':')\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts')\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"')\n  }\n\n  if (didParts[1].toLowerCase() === 'ecdsa-pub') {\n    return didParts[2]\n  } else if (didParts[1].toLowerCase() === 'btc-addr') {\n    return didParts[2]\n  } else {\n    throw new InvalidDIDError('Decentralized ID format not supported')\n  }\n}\n*/\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","getDIDType","decentralizedID","didParts","split","length","_errors","InvalidDIDError","toLowerCase","Object","defineProperty","value","makeDIDFromAddress","address","makeDIDFromPublicKey","publicKey","getAddressFromDID","didType"]
}
